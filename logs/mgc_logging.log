2019-08-13 15:00:04,819:INFO:NEW RUN: MGC 2sample
2019-08-13 15:00:22,816:INFO:NEW RUN: MGC 2sample
2019-08-13 15:40:56,455:INFO:Component(s) [0] done in -2433.6385209560394
2019-08-13 16:21:42,567:INFO:Component(s) [2] done in -2446.1116943359375
2019-08-13 17:34:41,736:INFO:Component(s) [0, 2] done in -4379.1695103645325
2019-08-13 19:26:19,218:INFO:Component(s) [0, 1, 2] done in -6697.48202252388
2019-08-14 10:47:43,280:INFO:NEW RUN: MGC 2sample
2019-08-14 10:47:43,280:INFO:Component(s) [0] done in 4.5299530029296875e-06
2019-08-14 10:47:43,280:INFO:Component(s) [2] done in 2.86102294921875e-06
2019-08-14 10:47:43,280:INFO:Component(s) [0, 2] done in 2.6226043701171875e-06
2019-08-14 10:47:43,280:INFO:Component(s) [0, 1, 2] done in 2.384185791015625e-06
2019-08-14 10:47:43,283:INFO:Names: [1.0024, 2.5402]
2019-08-14 10:47:43,283:INFO:pvals: ['test', 'test2']
2019-08-14 10:47:43,284:INFO:Names: [1.0024, 2.5402]
2019-08-14 10:47:43,284:INFO:pvals: ['test', 'test2']
2019-08-14 10:47:43,285:INFO:Names: [1.0024, 2.5402]
2019-08-14 10:47:43,285:INFO:pvals: ['test', 'test2']
2019-08-14 10:47:43,286:INFO:Names: [1.0024, 2.5402]
2019-08-14 10:47:43,286:INFO:pvals: ['test', 'test2']
2019-08-14 10:47:43,286:INFO:Saving to mgc_gcca_pvals.csv
2019-08-14 10:49:30,817:INFO:NEW RUN: MGC 2sample
2019-08-14 10:49:30,817:INFO:Component(s) [0] done in 4.5299530029296875e-06
2019-08-14 10:49:30,817:INFO:Component(s) [2] done in 2.6226043701171875e-06
2019-08-14 10:49:30,817:INFO:Component(s) [0, 2] done in 2.6226043701171875e-06
2019-08-14 10:49:30,817:INFO:Component(s) [0, 1, 2] done in 2.384185791015625e-06
2019-08-14 10:49:30,820:INFO:Names: ['test', 'test2']
2019-08-14 10:49:30,820:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:49:30,822:INFO:Names: ['test', 'test2']
2019-08-14 10:49:30,822:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:49:30,822:INFO:Names: ['test', 'test2']
2019-08-14 10:49:30,822:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:49:30,823:INFO:Names: ['test', 'test2']
2019-08-14 10:49:30,823:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:49:30,824:INFO:Saving to mgc_gcca_pvals.csv
2019-08-14 10:50:08,365:INFO:NEW RUN: MGC 2sample
2019-08-14 10:50:08,365:INFO:Component(s) [0] done in 4.76837158203125e-06
2019-08-14 10:50:08,365:INFO:Component(s) [2] done in 2.384185791015625e-06
2019-08-14 10:50:08,365:INFO:Component(s) [0, 2] done in 2.384185791015625e-06
2019-08-14 10:50:08,365:INFO:Component(s) [0, 1, 2] done in 2.384185791015625e-06
2019-08-14 10:50:08,368:INFO:Names: ['test', 'test2']
2019-08-14 10:50:08,368:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:50:08,370:INFO:Names: ['test', 'test2']
2019-08-14 10:50:08,370:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:50:08,370:INFO:Names: ['test', 'test2']
2019-08-14 10:50:08,370:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:50:08,371:INFO:Names: ['test', 'test2']
2019-08-14 10:50:08,371:INFO:pvals: [1.0024, 2.5402]
2019-08-14 10:50:08,371:INFO:Saving to mgc_gcca_pvals.csv
2019-08-14 10:54:47,585:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 10:54:47,585:INFO:Component(s) [0] done in 5.0067901611328125e-06
2019-08-14 10:54:47,585:INFO:Component(s) [2] done in 2.86102294921875e-06
2019-08-14 10:54:47,585:INFO:Component(s) [0, 2] done in 2.384185791015625e-06
2019-08-14 10:54:47,585:INFO:Component(s) [0, 1, 2] done in 2.384185791015625e-06
2019-08-14 10:56:41,730:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 10:56:41,730:INFO:Component(s) [0] done in 4.291534423828125e-06
2019-08-14 10:56:41,731:INFO:Component(s) [2] done in 2.6226043701171875e-06
2019-08-14 10:56:41,731:INFO:Component(s) [0, 2] done in 2.384185791015625e-06
2019-08-14 10:56:41,731:INFO:Component(s) [0, 1, 2] done in 2.384185791015625e-06
2019-08-14 10:57:18,101:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 10:57:18,101:INFO:Component(s) [0] done in 4.0531158447265625e-06
2019-08-14 10:57:18,101:INFO:Component(s) [2] done in 2.6226043701171875e-06
2019-08-14 10:57:18,101:INFO:Component(s) [0, 2] done in 2.384185791015625e-06
2019-08-14 10:57:18,101:INFO:Component(s) [0, 1, 2] done in 2.1457672119140625e-06
2019-08-14 10:57:45,794:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 10:57:45,794:INFO:Component(s) [0] done in 1.1205673217773438e-05
2019-08-14 10:57:45,794:INFO:Component(s) [2] done in 5.9604644775390625e-06
2019-08-14 10:57:45,794:INFO:Component(s) [0, 2] done in 5.0067901611328125e-06
2019-08-14 10:57:45,794:INFO:Component(s) [0, 1, 2] done in 5.0067901611328125e-06
2019-08-14 10:57:45,797:INFO:Names: ['test', 'test2']
2019-08-14 10:57:45,797:INFO:pvals: [1.0024 2.5402]
2019-08-14 10:57:45,798:INFO:Names: ['test', 'test2']
2019-08-14 10:57:45,799:INFO:pvals: [1.0024 2.5402]
2019-08-14 10:57:45,799:INFO:Names: ['test', 'test2']
2019-08-14 10:57:45,799:INFO:pvals: [1.0024 2.5402]
2019-08-14 10:57:45,800:INFO:Names: ['test', 'test2']
2019-08-14 10:57:45,800:INFO:pvals: [1.0024 2.5402]
2019-08-14 10:57:45,801:INFO:Saving to mgc_gcca_pvals.csv
2019-08-14 10:58:07,011:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 10:58:07,011:INFO:Component(s) [0] done in 1.239776611328125e-05
2019-08-14 10:58:07,011:INFO:Component(s) [2] done in 5.9604644775390625e-06
2019-08-14 10:58:07,011:INFO:Component(s) [0, 2] done in 5.245208740234375e-06
2019-08-14 10:58:07,011:INFO:Component(s) [0, 1, 2] done in 4.76837158203125e-06
2019-08-14 10:58:07,014:INFO:Names: ['test', 'test2']
2019-08-14 10:58:07,014:INFO:pvals: [1.0000e-04 2.5402e+00]
2019-08-14 10:58:07,016:INFO:Names: ['test', 'test2']
2019-08-14 10:58:07,016:INFO:pvals: [1.0000e-04 2.5402e+00]
2019-08-14 10:58:07,017:INFO:Names: ['test', 'test2']
2019-08-14 10:58:07,017:INFO:pvals: [1.0000e-04 2.5402e+00]
2019-08-14 10:58:07,018:INFO:Names: ['test', 'test2']
2019-08-14 10:58:07,018:INFO:pvals: [1.0000e-04 2.5402e+00]
2019-08-14 10:58:07,018:INFO:Saving to mgc_gcca_pvals.csv
2019-08-14 10:59:29,258:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-14 11:38:49,795:INFO:Component(s) [0] done in 2360.536823987961
2019-08-14 12:18:04,520:INFO:Component(s) [2] done in 2354.7246284484863
2019-08-14 13:29:24,644:INFO:Component(s) [0, 2] done in 4280.1241047382355
2019-08-14 15:20:22,412:INFO:Component(s) [0, 1, 2] done in 6657.767733573914
2019-08-14 15:20:22,416:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-14 15:20:22,416:INFO:pvals: [9.92e-01 8.14e-01 9.63e-01 9.22e-01 8.35e-01 2.05e-01 4.34e-01 5.59e-01
 8.97e-01 5.30e-02 2.19e-01 4.66e-01 6.95e-01 6.20e-02 2.21e-01 1.00e-03
 3.40e-02 5.80e-02 4.58e-01 1.45e-01 3.90e-02 1.00e-04 1.00e-04]
2019-08-14 15:20:22,418:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-14 15:20:22,418:INFO:pvals: [1.00e+00 9.57e-01 1.00e+00 9.97e-01 1.00e+00 9.82e-01 9.52e-01 9.99e-01
 9.99e-01 7.55e-01 9.90e-01 9.52e-01 2.20e-02 1.99e-01 5.64e-01 1.70e-01
 7.94e-01 8.80e-02 5.58e-01 1.63e-01 8.26e-01 1.00e-04 8.00e-03]
2019-08-14 15:20:22,419:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-14 15:20:22,419:INFO:pvals: [1.00e+00 9.46e-01 9.98e-01 9.86e-01 9.91e-01 5.98e-01 7.54e-01 9.21e-01
 9.91e-01 2.10e-01 6.84e-01 7.64e-01 3.03e-01 5.40e-02 3.71e-01 1.00e-04
 5.20e-02 5.70e-02 4.65e-01 9.60e-02 1.24e-01 1.00e-04 1.00e-04]
2019-08-14 15:20:22,420:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-14 15:20:22,420:INFO:pvals: [9.99e-01 9.37e-01 1.00e+00 9.69e-01 9.97e-01 8.29e-01 9.14e-01 9.83e-01
 9.98e-01 1.53e-01 8.83e-01 6.85e-01 3.62e-01 4.90e-02 1.44e-01 1.00e-03
 1.46e-01 5.50e-02 5.88e-01 1.32e-01 2.79e-01 1.00e-04 1.00e-04]
2019-08-14 15:20:22,421:INFO:Saving to mgc_gcca_pvals_10000.csv
2019-08-16 14:24:41,307:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-16 15:04:35,968:INFO:Component(s) [0] done in 2394.6607146263123
2019-08-16 15:43:41,632:INFO:Component(s) [2] done in 2345.664087295532
2019-08-16 16:54:27,410:INFO:Component(s) [0, 2] done in 4245.777062416077
2019-08-16 18:43:31,631:INFO:Component(s) [0, 1, 2] done in 6544.22145485878
2019-08-16 18:43:31,635:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-16 18:43:31,635:INFO:pvals: [9.98e-01 9.76e-01 9.74e-01 9.97e-01 9.41e-01 8.41e-01 1.00e+00 7.72e-01
 9.96e-01 6.44e-01 9.95e-01 8.61e-01 7.58e-01 1.74e-01 3.42e-01 4.00e-02
 3.03e-01 6.50e-02 3.37e-01 4.56e-01 3.00e-03 1.00e-04 1.00e-04]
2019-08-16 18:43:31,637:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-16 18:43:31,637:INFO:pvals: [1.00e+00 9.92e-01 9.98e-01 1.00e+00 1.00e+00 7.92e-01 9.80e-01 9.85e-01
 1.00e+00 5.98e-01 9.78e-01 9.87e-01 3.36e-01 2.32e-01 9.14e-01 1.05e-01
 7.87e-01 7.40e-02 6.27e-01 1.30e-01 8.23e-01 1.00e-04 2.40e-02]
2019-08-16 18:43:31,638:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-16 18:43:31,638:INFO:pvals: [1.00e+00 9.94e-01 9.99e-01 1.00e+00 9.98e-01 8.29e-01 9.99e-01 9.41e-01
 1.00e+00 6.55e-01 9.99e-01 9.67e-01 5.54e-01 1.33e-01 6.74e-01 6.30e-02
 5.27e-01 5.60e-02 4.60e-01 1.69e-01 3.10e-01 1.00e-04 2.00e-03]
2019-08-16 18:43:31,639:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-16 18:43:31,639:INFO:pvals: [1.00e+00 9.91e-01 9.99e-01 1.00e+00 9.98e-01 7.37e-01 9.97e-01 9.28e-01
 1.00e+00 2.11e-01 9.93e-01 8.89e-01 7.41e-01 1.02e-01 5.44e-01 2.10e-02
 5.33e-01 5.10e-02 5.50e-01 1.41e-01 4.73e-01 1.00e-04 1.00e-03]
2019-08-16 18:43:31,639:INFO:Saving to mgc_gcca_pvals_ratio-0.9_10000.csv
2019-08-21 18:14:20,879:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2019-08-21 18:56:48,651:INFO:Component(s) [3] done in 2547.7712717056274
2019-08-21 19:35:41,711:INFO:Component(s) [4] done in 2333.05953168869
2019-08-21 20:14:28,776:INFO:Component(s) [5] done in 2327.0646686553955
2019-08-21 21:24:34,402:INFO:Component(s) [3, 4] done in 4205.625998020172
2019-08-21 22:35:12,301:INFO:Component(s) [4, 5] done in 4237.898655414581
2019-08-21 23:45:43,474:INFO:Component(s) [3, 5] done in 4231.173072814941
2019-08-22 01:33:55,868:INFO:Component(s) [3, 4, 5] done in 6492.3937175273895
2019-08-22 01:33:55,875:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,875:INFO:pvals: [9.95e-01 9.78e-01 9.97e-01 9.71e-01 9.35e-01 8.21e-01 1.00e+00 5.99e-01
 7.55e-01 2.03e-01 1.00e+00 1.66e-01 3.47e-01 1.20e-01 5.10e-02 5.70e-02
 1.21e-01 4.13e-01 7.93e-01 3.46e-01 1.69e-01 1.00e-04 1.00e-04]
2019-08-22 01:33:55,879:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,879:INFO:pvals: [1.00e+00 1.00e+00 9.99e-01 9.98e-01 9.99e-01 1.00e+00 1.00e+00 1.00e+00
 9.99e-01 9.96e-01 1.00e+00 9.93e-01 5.64e-01 9.40e-02 7.94e-01 2.29e-01
 5.61e-01 4.33e-01 6.18e-01 4.21e-01 9.77e-01 1.00e-04 8.00e-03]
2019-08-22 01:33:55,881:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,882:INFO:pvals: [1.00e+00 1.00e+00 1.00e+00 1.00e+00 9.98e-01 9.92e-01 1.00e+00 9.88e-01
 9.85e-01 8.59e-01 1.00e+00 7.83e-01 4.39e-01 1.04e-01 3.47e-01 7.40e-02
 2.52e-01 3.92e-01 8.10e-01 3.85e-01 7.25e-01 1.00e-04 1.00e-04]
2019-08-22 01:33:55,882:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,883:INFO:pvals: [9.92e-01 9.81e-01 9.97e-01 9.96e-01 9.99e-01 9.35e-01 9.89e-01 9.90e-01
 1.00e+00 7.64e-01 1.00e+00 9.94e-01 7.89e-01 1.81e-01 6.15e-01 3.00e-02
 4.20e-02 1.03e-01 1.62e-01 1.29e-01 5.02e-01 1.00e-04 3.00e-03]
2019-08-22 01:33:55,883:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,884:INFO:pvals: [9.99e-01 9.95e-01 1.00e+00 9.95e-01 9.98e-01 9.24e-01 1.00e+00 9.44e-01
 1.00e+00 4.29e-01 1.00e+00 7.24e-01 6.00e-03 7.50e-02 2.95e-01 7.00e-02
 2.70e-01 1.74e-01 4.60e-01 6.00e-02 2.74e-01 1.00e-04 1.00e-04]
2019-08-22 01:33:55,884:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,885:INFO:pvals: [1.00e+00 9.99e-01 1.00e+00 9.99e-01 1.00e+00 9.99e-01 1.00e+00 1.00e+00
 1.00e+00 9.89e-01 1.00e+00 1.00e+00 7.51e-01 1.34e-01 8.15e-01 9.70e-02
 6.53e-01 1.60e-01 3.23e-01 1.80e-01 8.99e-01 1.00e-04 1.00e-04]
2019-08-22 01:33:55,885:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2019-08-22 01:33:55,886:INFO:pvals: [1.00e+00 1.00e+00 9.99e-01 1.00e+00 1.00e+00 9.99e-01 1.00e+00 9.96e-01
 1.00e+00 8.68e-01 1.00e+00 9.50e-01 6.10e-01 1.04e-01 4.57e-01 9.70e-02
 3.73e-01 1.77e-01 5.36e-01 1.57e-01 6.93e-01 1.00e-04 1.00e-04]
2019-08-22 01:33:55,886:INFO:Saving to mgc_gcca_pvals_ratio-0.9_10000.csv
2020-01-07 11:03:49,115:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2020-01-07 11:43:07,603:INFO:Component(s) [0] done in 2358.4871814250946
2020-01-07 12:22:06,832:INFO:Component(s) [1] done in 2339.2290608882904
2020-01-07 13:00:58,183:INFO:Component(s) [2] done in 2331.3444097042084
2020-01-07 14:10:13,053:INFO:Component(s) [0, 1] done in 4154.870653152466
2020-01-07 15:19:34,593:INFO:Component(s) [1, 2] done in 4161.53910946846
2020-01-07 16:28:52,337:INFO:Component(s) [2, 0] done in 4157.7445113658905
2020-01-07 18:15:23,924:INFO:Component(s) [0, 1, 2] done in 6391.586817026138
2020-01-07 18:15:23,929:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,929:INFO:pvals: [1.00e+00 9.79e-01 9.91e-01 9.99e-01 9.79e-01 8.90e-01 1.00e+00 8.54e-01
 9.98e-01 7.06e-01 1.00e+00 8.91e-01 7.57e-01 2.27e-01 4.16e-01 1.40e-02
 3.40e-01 1.67e-01 4.76e-01 4.80e-01 9.00e-03 1.00e-04 1.00e-04]
2020-01-07 18:15:23,931:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,931:INFO:pvals: [1.00e+00 9.93e-01 9.96e-01 1.00e+00 9.99e-01 9.08e-01 1.00e+00 9.58e-01
 1.00e+00 7.09e-01 9.99e-01 9.62e-01 4.67e-01 1.54e-01 6.31e-01 5.80e-02
 5.46e-01 5.90e-02 5.15e-01 1.78e-01 3.00e-02 1.00e-04 1.00e-03]
2020-01-07 18:15:23,932:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,932:INFO:pvals: [1.00e+00 9.79e-01 9.95e-01 1.00e+00 9.92e-01 5.90e-01 9.68e-01 8.77e-01
 9.98e-01 5.10e-02 8.75e-01 5.46e-01 9.21e-01 1.13e-01 3.62e-01 2.00e-02
 6.29e-01 9.90e-02 8.16e-01 3.00e-01 7.60e-01 1.00e-04 1.00e-04]
2020-01-07 18:15:23,933:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,933:INFO:pvals: [1.00e+00 9.91e-01 9.97e-01 1.00e+00 9.92e-01 8.20e-01 9.99e-01 9.04e-01
 1.00e+00 1.79e-01 9.99e-01 7.99e-01 9.04e-01 1.24e-01 3.34e-01 1.30e-02
 4.90e-01 7.20e-02 6.69e-01 3.88e-01 2.66e-01 1.00e-04 3.00e-03]
2020-01-07 18:15:23,934:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,934:INFO:pvals: [1.00e+00 9.92e-01 9.96e-01 1.00e+00 1.00e+00 8.42e-01 9.96e-01 9.79e-01
 1.00e+00 7.32e-01 9.91e-01 9.76e-01 2.14e-01 2.27e-01 8.10e-01 1.27e-01
 7.62e-01 2.40e-02 5.87e-01 1.35e-01 6.98e-01 1.00e-04 1.00e-02]
2020-01-07 18:15:23,935:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,935:INFO:pvals: [1.00e+00 9.94e-01 9.99e-01 1.00e+00 1.00e+00 7.36e-01 9.97e-01 9.67e-01
 1.00e+00 1.81e-01 9.74e-01 8.81e-01 5.88e-01 1.63e-01 6.25e-01 9.30e-02
 7.20e-01 6.30e-02 7.56e-01 1.84e-01 8.15e-01 1.00e-04 1.00e-04]
2020-01-07 18:15:23,936:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Meditating vs. Novices Resting']
2020-01-07 18:15:23,936:INFO:pvals: [1.00e+00 9.96e-01 9.99e-01 1.00e+00 9.99e-01 8.48e-01 1.00e+00 9.44e-01
 1.00e+00 3.12e-01 1.00e+00 9.10e-01 6.94e-01 1.52e-01 5.51e-01 3.20e-02
 6.01e-01 6.50e-02 6.55e-01 1.98e-01 4.25e-01 1.00e-04 1.00e-04]
2020-01-07 18:15:23,937:INFO:Saving to mgc_gcca_pvals_ratio-ZG-3_10000.csv
2020-01-09 20:38:58,682:INFO:NEW RUN: MGC 2sample SHORTENED, 10000 permutations, fast=False
2020-01-09 20:41:07,933:INFO:NEW RUN: MGC 2sample SHORTENED, 10000 permutations, fast=False
2020-01-09 20:44:09,134:INFO:Component(s) [0] done in 181.20000100135803
2020-01-09 20:47:05,344:INFO:Component(s) [1] done in 176.20372033119202
2020-01-09 20:50:03,664:INFO:Component(s) [2] done in 178.31909322738647
2020-01-09 20:54:43,116:INFO:Component(s) [0, 1] done in 279.45197582244873
2020-01-09 20:59:21,296:INFO:Component(s) [1, 2] done in 278.1801357269287
2020-01-09 21:03:59,247:INFO:Component(s) [2, 0] done in 277.9504373073578
2020-01-09 21:11:02,437:INFO:Component(s) [0, 1, 2] done in 423.1901650428772
2020-01-09 21:11:02,447:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,448:INFO:pvals: [0.302]
2020-01-09 21:11:02,451:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,451:INFO:pvals: [0.226]
2020-01-09 21:11:02,452:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,452:INFO:pvals: [0.523]
2020-01-09 21:11:02,453:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,453:INFO:pvals: [0.399]
2020-01-09 21:11:02,454:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,454:INFO:pvals: [0.247]
2020-01-09 21:11:02,455:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,455:INFO:pvals: [0.009]
2020-01-09 21:11:02,456:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-01-09 21:11:02,457:INFO:pvals: [0.298]
2020-01-09 21:11:02,457:INFO:Saving to mgc_gcca_pvals_ratio-ZG-3_10000.csv
2020-05-17 21:13:06,549:INFO:NEW RUN: MGC 2sample SHORTENED, 10000 permutations, fast=False
2020-05-17 21:15:12,756:INFO:Component(s) [0] done in 126.20632529258728
2020-05-17 21:17:20,273:INFO:Component(s) [1] done in 127.51651453971863
2020-05-17 21:19:30,025:INFO:Component(s) [2] done in 129.75133395195007
2020-05-17 21:24:47,568:INFO:Component(s) [0, 1] done in 317.5433580875397
2020-05-17 21:38:27,252:INFO:Component(s) [1, 2] done in 819.6832337379456
2020-05-17 21:42:22,242:INFO:Component(s) [2, 0] done in 234.9898419380188
2020-05-17 21:49:05,166:INFO:Component(s) [0, 1, 2] done in 402.92391753196716
2020-05-17 21:49:05,171:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,171:INFO:pvals: [0.405]
2020-05-17 21:49:05,173:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,173:INFO:pvals: [0.236]
2020-05-17 21:49:05,174:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,174:INFO:pvals: [0.176]
2020-05-17 21:49:05,175:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,175:INFO:pvals: [0.252]
2020-05-17 21:49:05,176:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,176:INFO:pvals: [0.02]
2020-05-17 21:49:05,177:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,177:INFO:pvals: [0.123]
2020-05-17 21:49:05,178:INFO:Names: ['Experts Resting vs. Novices Meditating']
2020-05-17 21:49:05,178:INFO:pvals: [0.187]
2020-05-17 21:49:05,179:INFO:Saving to mgc_gcca_pvals_ratio-ZG-3_10000.csv
2020-05-17 22:05:03,398:INFO:NEW RUN: MGC 2sample, 100000 permutations, fast=True
2020-05-17 22:05:08,935:INFO:Component(s) [0] done in 5.536356449127197
2020-05-17 22:05:14,399:INFO:Component(s) [1] done in 5.463673830032349
2020-05-17 22:05:19,787:INFO:Component(s) [2] done in 5.38861346244812
2020-05-17 22:05:28,215:INFO:Component(s) [0, 1] done in 8.427451133728027
2020-05-17 22:05:36,676:INFO:Component(s) [1, 2] done in 8.460717916488647
2020-05-17 22:05:45,126:INFO:Component(s) [2, 0] done in 8.44956374168396
2020-05-17 22:05:56,734:INFO:Component(s) [0, 1, 2] done in 11.608294486999512
2020-05-17 22:05:56,742:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,743:INFO:pvals: [7.72152311e-01 9.21008089e-01 9.98340987e-01 4.20508572e-01
 8.46241051e-01 6.93284629e-01 7.63703683e-01 9.10047074e-01
 8.30149228e-01 9.97868419e-01 9.85128881e-01 1.00000000e+00
 7.01503096e-01 1.38049554e-04 9.84778428e-01 0.00000000e+00
 3.26101959e-04 8.25397693e-01 9.99410024e-01 5.54209850e-02
 1.88069036e-02 2.39406273e-11 4.43806080e-01]
2020-05-17 22:05:56,745:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,746:INFO:pvals: [9.02144418e-01 6.97320158e-01 1.00000000e+00 9.99999636e-01
 9.96344095e-01 9.72151244e-01 7.03277071e-01 9.99985405e-01
 9.98404313e-01 4.09635418e-01 9.57699234e-01 5.42129732e-01
 9.49311238e-01 1.91465219e-02 9.32084992e-01 3.32698035e-06
 5.99014686e-02 9.04656050e-01 9.93222282e-01 1.27931618e-01
 3.91097408e-01 1.08894844e-08 9.99999851e-01]
2020-05-17 22:05:56,746:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,747:INFO:pvals: [9.65440945e-01 8.91623040e-01 9.99672240e-01 9.09594262e-01
 9.99999980e-01 1.00000000e+00 9.99990939e-01 9.93706078e-01
 9.66753712e-01 9.91605344e-01 9.16158423e-01 9.96207455e-01
 9.98166793e-01 2.93487821e-01 4.61724344e-03 9.74120947e-01
 2.04171786e-03 9.87147799e-01 9.99946546e-01 8.66189440e-02
 5.51443039e-01 3.93018951e-13 1.74166748e-01]
2020-05-17 22:05:56,748:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,748:INFO:pvals: [9.60309271e-01 7.48988374e-01 9.98247916e-01 6.52695117e-01
 9.97443823e-01 9.82192658e-01 9.87590611e-01 9.88177585e-01
 9.91583458e-01 9.99999638e-01 9.10429154e-01 1.00000000e+00
 7.66504475e-01 9.99999999e-01 9.97696026e-01 2.23241986e-04
 5.58820994e-01 4.60951971e-01 7.06199522e-01 6.89195416e-04
 2.16887532e-03 0.00000000e+00 2.76389812e-01]
2020-05-17 22:05:56,749:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,749:INFO:pvals: [9.99999743e-01 9.21730863e-01 9.67615764e-01 9.99039036e-01
 9.92882363e-01 1.00000000e+00 8.74945802e-01 9.78625486e-01
 8.79441935e-01 9.97143972e-01 9.95454392e-01 9.60897538e-01
 1.11022302e-16 9.30021986e-01 6.54242341e-01 5.09226266e-01
 9.47952133e-01 1.16490828e-01 7.13339579e-01 5.66293996e-01
 8.06478887e-01 0.00000000e+00 9.98499156e-01]
2020-05-17 22:05:56,750:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,750:INFO:pvals: [0.99999999 0.99996933 1.         0.9712309  0.98940519 0.99998906
 0.9994078  0.99897456 1.         0.91866794 0.94599478 1.
 0.65301612 0.30800028 0.97285808 0.60904619 0.99972376 0.96076297
 0.6685904  0.12545573 0.99999995 0.         0.4937802 ]
2020-05-17 22:05:56,751:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating']
2020-05-17 22:05:56,751:INFO:pvals: [9.88727338e-01 7.58388289e-01 9.99946687e-01 9.99285827e-01
 9.85127667e-01 9.99999999e-01 9.34472909e-01 9.92061115e-01
 8.75426813e-01 9.99999725e-01 9.44928874e-01 9.99999999e-01
 9.89589922e-01 8.42457689e-02 9.99543362e-01 8.05068469e-01
 2.36159536e-05 9.77483746e-01 5.86774726e-01 3.81187928e-03
 1.28941193e-01 0.00000000e+00 9.67131318e-01]
2020-05-17 22:05:56,752:INFO:Saving to ../data/mgc_gcca_pvals_100000_max_rank-ZG2.csv
2020-05-17 22:14:15,976:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=True
2020-05-17 22:14:21,702:INFO:Component(s) [0] done in 5.726330995559692
2020-05-17 22:14:27,312:INFO:Component(s) [1] done in 5.608891725540161
2020-05-17 22:14:32,896:INFO:Component(s) [2] done in 5.584072113037109
2020-05-17 22:14:41,636:INFO:Component(s) [0, 1] done in 8.739710092544556
2020-05-17 22:14:50,420:INFO:Component(s) [1, 2] done in 8.784555912017822
2020-05-17 22:14:59,060:INFO:Component(s) [2, 0] done in 8.63943338394165
2020-05-17 22:15:10,935:INFO:Component(s) [0, 1, 2] done in 11.874776363372803
2020-05-17 22:15:10,939:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,940:INFO:pvals: [8.32752630e-01 7.70036713e-01 8.23544301e-01 4.38839100e-01
 8.98436103e-01 7.50502951e-01 9.99997839e-01 8.64971769e-01
 9.99999122e-01 1.00000000e+00 9.79605204e-01 2.11016816e-01
 9.81875501e-01 1.20758666e-01 2.66560515e-01 9.71468964e-01
 1.97456608e-02 6.43060530e-01 7.34111694e-01 5.52354652e-02
 4.95946224e-06 6.99855943e-02 4.57772264e-01 3.81284083e-01]
2020-05-17 22:15:10,942:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,942:INFO:pvals: [9.33823470e-01 9.99829940e-01 9.72029219e-01 9.99815467e-01
 9.07862144e-01 9.91661426e-01 7.00756591e-01 9.39915800e-01
 8.08852179e-01 4.36289313e-01 1.00000000e+00 5.37110258e-01
 4.19637703e-01 3.45174259e-02 9.98584953e-01 2.66432657e-07
 8.68025915e-03 1.72047710e-01 5.72563228e-01 1.41520092e-01
 5.14467541e-03 3.33066907e-15 3.51070557e-01 4.99397158e-08]
2020-05-17 22:15:10,943:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,943:INFO:pvals: [9.99999601e-01 9.99998849e-01 9.89198202e-01 9.34265412e-01
 9.97414154e-01 9.99999868e-01 9.36384434e-01 9.44436532e-01
 9.46461658e-01 9.96239985e-01 8.64225453e-01 9.97034725e-01
 6.46678844e-01 9.99615951e-01 2.24232715e-01 6.33967520e-01
 3.34242482e-02 9.97611980e-01 4.79711959e-01 2.46757061e-01
 8.59491830e-01 0.00000000e+00 2.02234480e-01 3.69929119e-05]
2020-05-17 22:15:10,944:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,944:INFO:pvals: [8.47339551e-01 7.97509970e-01 9.99995771e-01 9.99993121e-01
 9.71189563e-01 9.94274986e-01 9.99994391e-01 9.99093944e-01
 8.12439455e-01 5.31453562e-01 9.59229596e-01 7.61352391e-01
 9.99995442e-01 2.62534501e-03 6.03174547e-01 2.23010566e-08
 1.70120759e-02 6.68345703e-01 9.99827528e-01 9.69728191e-01
 7.34590793e-01 0.00000000e+00 2.78068542e-01 1.05542251e-06]
2020-05-17 22:15:10,945:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,945:INFO:pvals: [9.99992572e-01 7.31416230e-01 9.99994493e-01 1.00000000e+00
 9.61062826e-01 9.97198246e-01 9.99558697e-01 1.00000000e+00
 9.99695771e-01 9.57036671e-01 9.99826889e-01 9.99993566e-01
 0.00000000e+00 3.84319000e-01 9.99886344e-01 5.07830869e-01
 5.23454855e-01 6.86888681e-02 2.06016064e-01 8.81899656e-01
 9.99999929e-01 2.25927996e-04 8.36421928e-03 6.25024140e-01]
2020-05-17 22:15:10,946:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,946:INFO:pvals: [9.91731951e-01 9.99876793e-01 9.99301853e-01 9.52941748e-01
 9.99648119e-01 9.93867682e-01 8.14338365e-01 9.96970992e-01
 9.94265474e-01 9.99946876e-01 9.99991251e-01 1.00000000e+00
 1.27496083e-01 3.12306839e-01 5.95350610e-02 8.20027216e-01
 5.20618949e-01 3.44313915e-01 3.97570029e-01 9.95742501e-01
 8.49280158e-01 0.00000000e+00 1.00000000e+00 5.30282746e-07]
2020-05-17 22:15:10,947:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:15:10,948:INFO:pvals: [9.89779100e-01 8.88699094e-01 9.94342172e-01 8.49923936e-01
 9.99999919e-01 9.81468374e-01 7.33675674e-01 9.99995209e-01
 1.00000000e+00 9.99496032e-01 9.99934737e-01 9.99999778e-01
 9.98140181e-01 4.64661277e-02 8.37493056e-01 1.71267667e-10
 9.88144464e-01 9.99995662e-01 9.89848967e-01 6.19826573e-01
 7.42209945e-01 0.00000000e+00 9.97690462e-01 1.92535856e-04]
2020-05-17 22:15:10,948:INFO:Saving to ../data/mgc_gcca_pvals_10000_max_rank-ZG2.csv
2020-05-17 22:19:46,360:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=True
2020-05-17 22:21:25,848:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=True
2020-05-17 22:21:32,267:INFO:Component(s) [0] done in 6.4195921421051025
2020-05-17 22:21:37,889:INFO:Component(s) [1] done in 5.621016502380371
2020-05-17 22:21:43,504:INFO:Component(s) [2] done in 5.614982604980469
2020-05-17 22:21:52,062:INFO:Component(s) [0, 1] done in 8.558573961257935
2020-05-17 22:22:00,351:INFO:Component(s) [1, 2] done in 8.288076162338257
2020-05-17 22:22:08,713:INFO:Component(s) [2, 0] done in 8.362465381622314
2020-05-17 22:22:20,281:INFO:Component(s) [0, 1, 2] done in 11.567870616912842
2020-05-17 22:22:20,285:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,286:INFO:pvals: [9.99999617e-01 5.72788530e-01 6.52345750e-01 9.95211354e-01
 9.99999948e-01 2.06443163e-01 9.99676319e-01 9.97458269e-01
 8.37135857e-01 3.29860709e-02 8.46355446e-01 3.31025124e-01
 7.54346680e-01 4.12905107e-07 1.01323923e-01 8.62853441e-01
 9.71774017e-06 2.47760839e-07 9.89312130e-01 9.91049773e-01
 2.00445616e-06 1.94664172e-06 3.60653186e-01 1.40564958e-01]
2020-05-17 22:22:20,287:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,288:INFO:pvals: [9.95693797e-01 7.84997076e-01 9.64214250e-01 8.94697762e-01
 9.99774923e-01 9.98002636e-01 8.45365317e-01 9.63885050e-01
 9.93486847e-01 2.37529249e-01 7.01855041e-01 1.00000000e+00
 3.28617988e-01 9.86095660e-01 1.98186665e-01 7.04707857e-07
 1.30264788e-02 3.32867067e-12 6.59749575e-01 1.93126472e-01
 2.77047929e-01 0.00000000e+00 1.51609492e-01 4.81037432e-12]
2020-05-17 22:22:20,288:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,289:INFO:pvals: [9.85824543e-01 9.76649840e-01 9.99109909e-01 9.47080051e-01
 9.99997751e-01 9.99570565e-01 8.79270942e-01 9.87873080e-01
 9.53173289e-01 9.87643959e-01 6.39554619e-01 1.00000000e+00
 4.28379161e-01 2.46812880e-01 9.79107120e-01 5.77187594e-01
 8.21781768e-01 6.61704277e-02 9.94920507e-01 2.81944485e-01
 8.69314171e-01 2.27393781e-01 9.99998540e-01 1.19759827e-06]
2020-05-17 22:22:20,289:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,290:INFO:pvals: [8.80782451e-01 8.45856874e-01 9.86261477e-01 9.75642291e-01
 9.22265934e-01 9.97042764e-01 8.68625883e-01 9.24668677e-01
 9.99999997e-01 3.76283944e-01 9.96373485e-01 9.74333588e-01
 9.98623807e-01 9.17672200e-01 5.85446294e-02 3.40564807e-05
 6.06173084e-02 4.82778448e-01 5.28127223e-01 8.73068310e-01
 4.38297176e-11 1.99215920e-06 9.99998416e-01 3.23174820e-12]
2020-05-17 22:22:20,291:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,291:INFO:pvals: [9.99999753e-01 9.43970802e-01 9.87394502e-01 9.99822991e-01
 9.99994271e-01 9.99996777e-01 8.72586615e-01 9.99998007e-01
 9.99787783e-01 9.99999976e-01 9.91821231e-01 9.99119908e-01
 4.69446704e-12 4.17714275e-01 4.23874167e-01 7.18261880e-01
 9.32625968e-01 2.99144389e-01 9.92679985e-01 3.40287076e-01
 6.66150461e-01 1.09313381e-02 9.99825394e-01 7.09129145e-01]
2020-05-17 22:22:20,292:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,292:INFO:pvals: [0.99998351 0.99844187 1.         0.99748484 1.         0.99994859
 0.95824798 1.         0.99998767 0.93680601 0.98846513 1.
 0.15600593 0.99999991 0.09050273 0.99733281 0.27455844 0.00742742
 0.44146445 0.14759263 0.99759575 0.         0.99999997 0.02006006]
2020-05-17 22:22:20,293:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-17 22:22:20,293:INFO:pvals: [9.98690395e-01 9.28307896e-01 1.00000000e+00 9.56793272e-01
 9.99959693e-01 9.99999999e-01 8.10069784e-01 9.99790404e-01
 9.99660609e-01 5.09170386e-01 6.73880091e-01 9.99999999e-01
 7.33592013e-01 2.72307504e-01 3.91154508e-02 7.34517614e-01
 6.04000350e-09 1.24569438e-05 8.24538564e-01 3.17358898e-01
 1.95505779e-01 0.00000000e+00 1.24742475e-01 1.10430614e-01]
2020-05-17 22:22:20,294:INFO:Saving to ../data/mgc_gcca_pvals_10000_FAST_min_rank-ZG3.csv
2020-05-17 22:26:43,303:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2020-05-17 23:14:05,057:INFO:Component(s) [0] done in 2841.7535848617554
2020-05-17 23:58:33,768:INFO:Component(s) [1] done in 2668.7108442783356
2020-05-18 00:40:45,247:INFO:Component(s) [2] done in 2531.477652311325
2020-05-18 01:58:14,741:INFO:Component(s) [0, 1] done in 4649.4944460392
2020-05-18 03:13:19,910:INFO:Component(s) [1, 2] done in 4505.168630599976
2020-05-18 04:29:00,672:INFO:Component(s) [2, 0] done in 4540.761669158936
2020-05-18 06:27:39,303:INFO:Component(s) [0, 1, 2] done in 7118.6306138038635
2020-05-18 06:27:39,308:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,309:INFO:pvals: [8.32e-01 6.32e-01 6.86e-01 7.53e-01 9.63e-01 1.65e-01 6.83e-01 5.44e-01
 8.67e-01 5.20e-02 2.59e-01 3.65e-01 7.01e-01 5.00e-02 1.65e-01 8.00e-03
 1.70e-02 2.20e-02 6.54e-01 1.78e-01 2.20e-02 1.00e-04 3.28e-01 1.00e-04]
2020-05-18 06:27:39,311:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,311:INFO:pvals: [9.96e-01 8.72e-01 9.70e-01 9.59e-01 9.97e-01 6.57e-01 8.66e-01 9.38e-01
 9.95e-01 1.74e-01 6.36e-01 7.60e-01 3.57e-01 1.09e-01 2.62e-01 2.00e-03
 1.12e-01 5.00e-02 6.59e-01 1.14e-01 6.60e-02 1.00e-04 1.60e-01 1.00e-04]
2020-05-18 06:27:39,312:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,312:INFO:pvals: [9.69e-01 9.75e-01 1.00e+00 9.06e-01 9.42e-01 1.00e+00 7.14e-01 1.00e+00
 9.90e-01 9.71e-01 6.52e-01 9.98e-01 3.33e-01 3.37e-01 7.90e-02 5.52e-01
 1.17e-01 2.14e-01 2.60e-01 1.95e-01 8.54e-01 1.00e-04 9.60e-02 1.00e-02]
2020-05-18 06:27:39,313:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,313:INFO:pvals: [9.50e-01 8.66e-01 9.76e-01 8.83e-01 9.75e-01 7.87e-01 7.34e-01 9.57e-01
 9.73e-01 2.64e-01 3.52e-01 8.14e-01 5.59e-01 1.25e-01 9.20e-02 4.00e-02
 4.90e-02 7.30e-02 4.71e-01 1.42e-01 3.30e-02 1.00e-04 1.78e-01 1.00e-04]
2020-05-18 06:27:39,314:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,314:INFO:pvals: [1.00e+00 9.66e-01 1.00e+00 9.97e-01 1.00e+00 1.00e+00 9.32e-01 1.00e+00
 1.00e+00 8.69e-01 9.83e-01 9.95e-01 5.40e-02 3.92e-01 4.05e-01 1.80e-01
 7.82e-01 6.60e-02 5.86e-01 1.15e-01 6.72e-01 1.00e-04 1.30e-02 1.80e-02]
2020-05-18 06:27:39,315:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,315:INFO:pvals: [1.00e+00 9.80e-01 1.00e+00 9.80e-01 9.96e-01 1.00e+00 8.49e-01 1.00e+00
 1.00e+00 9.67e-01 9.11e-01 1.00e+00 1.51e-01 3.17e-01 1.27e-01 2.62e-01
 2.84e-01 7.70e-02 3.77e-01 1.17e-01 8.16e-01 1.00e-04 8.00e-02 3.50e-02]
2020-05-18 06:27:39,316:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 06:27:39,316:INFO:pvals: [9.96e-01 9.42e-01 9.98e-01 9.58e-01 9.95e-01 9.48e-01 8.31e-01 9.97e-01
 9.99e-01 4.57e-01 6.55e-01 9.41e-01 2.92e-01 1.39e-01 1.30e-01 1.00e-02
 7.70e-02 6.50e-02 5.11e-01 1.28e-01 2.75e-01 1.00e-04 1.29e-01 1.00e-04]
2020-05-18 06:27:39,317:INFO:Saving to ../data/mgc_gcca_pvals_10000_min_rank-ZG3.csv
2020-05-18 10:08:03,737:INFO:NEW RUN: MGC 2sample, 10000 permutations, fast=False
2020-05-18 10:50:53,364:INFO:Component(s) [0] done in 2569.626638650894
2020-05-18 11:35:08,569:INFO:Component(s) [1] done in 2655.2044014930725
2020-05-18 12:18:42,846:INFO:Component(s) [2] done in 2614.2774584293365
2020-05-18 13:39:27,354:INFO:Component(s) [0, 1] done in 4844.507702589035
2020-05-18 14:56:22,164:INFO:Component(s) [1, 2] done in 4614.809377670288
2020-05-18 16:50:28,388:INFO:Component(s) [2, 0] done in 6846.223837375641
2020-05-18 19:47:58,809:INFO:Component(s) [0, 1, 2] done in 10650.419134616852
2020-05-18 19:47:58,825:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,825:INFO:pvals: [6.90e-01 4.92e-01 9.83e-01 4.12e-01 9.12e-01 6.59e-01 5.64e-01 8.86e-01
 6.98e-01 1.25e-01 8.38e-01 2.51e-01 6.98e-01 3.10e-02 2.35e-01 1.20e-02
 3.20e-02 1.78e-01 6.39e-01 8.50e-02 5.90e-02 1.00e-04 4.15e-01 1.00e-04]
2020-05-18 19:47:58,829:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,830:INFO:pvals: [9.43e-01 6.57e-01 1.00e+00 6.51e-01 9.64e-01 9.15e-01 8.49e-01 9.53e-01
 8.78e-01 3.52e-01 9.55e-01 4.70e-01 3.50e-01 2.80e-02 3.08e-01 9.00e-03
 5.20e-02 1.08e-01 5.40e-01 5.70e-02 1.42e-01 1.00e-04 2.41e-01 1.00e-04]
2020-05-18 19:47:58,832:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,832:INFO:pvals: [9.80e-01 9.93e-01 1.00e+00 9.56e-01 9.75e-01 1.00e+00 9.15e-01 1.00e+00
 9.99e-01 9.97e-01 9.16e-01 9.99e-01 6.12e-01 2.24e-01 1.02e-01 6.09e-01
 2.60e-02 4.90e-01 4.02e-01 1.36e-01 4.85e-01 1.00e-04 1.47e-01 1.00e-04]
2020-05-18 19:47:58,833:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,833:INFO:pvals: [9.17e-01 8.08e-01 1.00e+00 6.34e-01 9.81e-01 9.85e-01 8.13e-01 9.96e-01
 9.49e-01 4.84e-01 9.50e-01 7.21e-01 7.41e-01 3.90e-02 1.31e-01 1.70e-02
 2.10e-02 2.19e-01 6.67e-01 7.70e-02 9.40e-02 1.00e-04 2.96e-01 1.00e-04]
2020-05-18 19:47:58,834:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,834:INFO:pvals: [9.99e-01 9.23e-01 1.00e+00 9.49e-01 9.73e-01 9.94e-01 9.71e-01 9.90e-01
 9.68e-01 9.92e-01 9.74e-01 9.74e-01 1.20e-02 3.23e-01 6.09e-01 4.52e-01
 4.54e-01 1.62e-01 3.08e-01 2.74e-01 6.98e-01 1.00e-04 2.80e-02 9.60e-02]
2020-05-18 19:47:58,835:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,835:INFO:pvals: [9.94e-01 9.87e-01 1.00e+00 9.71e-01 9.90e-01 1.00e+00 9.77e-01 1.00e+00
 9.98e-01 1.00e+00 9.74e-01 1.00e+00 2.34e-01 2.41e-01 2.20e-01 5.44e-01
 8.80e-02 2.99e-01 3.61e-01 1.38e-01 6.39e-01 1.00e-04 1.04e-01 2.00e-03]
2020-05-18 19:47:58,836:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-05-18 19:47:58,836:INFO:pvals: [9.85e-01 8.78e-01 1.00e+00 7.85e-01 9.89e-01 9.92e-01 9.07e-01 9.98e-01
 9.76e-01 7.35e-01 9.60e-01 8.25e-01 4.17e-01 3.70e-02 1.86e-01 1.60e-02
 4.40e-02 1.75e-01 5.39e-01 6.20e-02 1.74e-01 1.00e-04 1.94e-01 1.00e-04]
2020-05-18 19:47:58,837:INFO:Saving to ../data/mgc_gcca_pvals_10000_max_rank-ZG2.csv
2020-06-11 12:04:57,286:INFO:NEW RUN: DCORR 2sample, 10000 permutations, fast=False
2020-06-11 12:04:57,690:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=263)
           2	LOAD_GLOBAL(arg=0, lineno=263)
           4	LOAD_FAST(arg=0, lineno=263)
           6	LOAD_FAST(arg=2, lineno=263)
           8	CALL_FUNCTION(arg=2, lineno=263)
          10	STORE_FAST(arg=3, lineno=263)
          12	LOAD_GLOBAL(arg=0, lineno=264)
          14	LOAD_FAST(arg=1, lineno=264)
          16	LOAD_FAST(arg=2, lineno=264)
          18	CALL_FUNCTION(arg=2, lineno=264)
          20	STORE_FAST(arg=4, lineno=264)
          22	LOAD_GLOBAL(arg=1, lineno=267)
          24	LOAD_METHOD(arg=2, lineno=267)
          26	LOAD_GLOBAL(arg=1, lineno=267)
          28	LOAD_METHOD(arg=3, lineno=267)
          30	LOAD_FAST(arg=3, lineno=267)
          32	LOAD_FAST(arg=4, lineno=267)
          34	LOAD_ATTR(arg=4, lineno=267)
          36	CALL_METHOD(arg=2, lineno=267)
          38	CALL_METHOD(arg=1, lineno=267)
          40	STORE_FAST(arg=5, lineno=267)
          42	LOAD_GLOBAL(arg=1, lineno=268)
          44	LOAD_METHOD(arg=2, lineno=268)
          46	LOAD_GLOBAL(arg=1, lineno=268)
          48	LOAD_METHOD(arg=3, lineno=268)
          50	LOAD_FAST(arg=3, lineno=268)
          52	LOAD_FAST(arg=3, lineno=268)
          54	LOAD_ATTR(arg=4, lineno=268)
          56	CALL_METHOD(arg=2, lineno=268)
          58	CALL_METHOD(arg=1, lineno=268)
          60	STORE_FAST(arg=6, lineno=268)
          62	LOAD_GLOBAL(arg=1, lineno=269)
          64	LOAD_METHOD(arg=2, lineno=269)
          66	LOAD_GLOBAL(arg=1, lineno=269)
          68	LOAD_METHOD(arg=3, lineno=269)
          70	LOAD_FAST(arg=4, lineno=269)
          72	LOAD_FAST(arg=4, lineno=269)
          74	LOAD_ATTR(arg=4, lineno=269)
          76	CALL_METHOD(arg=2, lineno=269)
          78	CALL_METHOD(arg=1, lineno=269)
          80	STORE_FAST(arg=7, lineno=269)
          82	LOAD_FAST(arg=6, lineno=272)
          84	LOAD_CONST(arg=1, lineno=272)
          86	COMPARE_OP(arg=1, lineno=272)
          88	POP_JUMP_IF_TRUE(arg=98, lineno=272)
          90	LOAD_FAST(arg=7, lineno=272)
          92	LOAD_CONST(arg=1, lineno=272)
          94	COMPARE_OP(arg=1, lineno=272)
          96	POP_JUMP_IF_FALSE(arg=104, lineno=272)
>         98	LOAD_CONST(arg=1, lineno=273)
         100	STORE_FAST(arg=8, lineno=273)
         102	JUMP_FORWARD(arg=24, lineno=273)
>        104	LOAD_FAST(arg=5, lineno=277)
         106	LOAD_GLOBAL(arg=1, lineno=277)
         108	LOAD_METHOD(arg=5, lineno=277)
         110	LOAD_GLOBAL(arg=1, lineno=277)
         112	LOAD_METHOD(arg=6, lineno=277)
         114	LOAD_FAST(arg=6, lineno=277)
         116	LOAD_FAST(arg=7, lineno=277)
         118	BINARY_MULTIPLY(arg=None, lineno=277)
         120	CALL_METHOD(arg=1, lineno=277)
         122	CALL_METHOD(arg=1, lineno=277)
         124	BINARY_TRUE_DIVIDE(arg=None, lineno=277)
         126	STORE_FAST(arg=8, lineno=277)
>        128	LOAD_FAST(arg=8, lineno=279)
         130	RETURN_VALUE(arg=None, lineno=279)
2020-06-11 12:04:57,690:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,691:DEBUG:stack: []
2020-06-11 12:04:57,691:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack []
2020-06-11 12:04:57,691:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack []
2020-06-11 12:04:57,691:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack ['$2load_global.0', '$distx4.1']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack ['$2load_global.0', '$distx4.1', '$bias6.2']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=10, inst=STORE_FAST(arg=3, lineno=263)
2020-06-11 12:04:57,691:DEBUG:stack ['$8call_function.3']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=264)
2020-06-11 12:04:57,691:DEBUG:stack []
2020-06-11 12:04:57,691:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=264)
2020-06-11 12:04:57,691:DEBUG:stack ['$12load_global.4']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=264)
2020-06-11 12:04:57,691:DEBUG:stack ['$12load_global.4', '$disty14.5']
2020-06-11 12:04:57,691:DEBUG:dispatch pc=18, inst=CALL_FUNCTION(arg=2, lineno=264)
2020-06-11 12:04:57,691:DEBUG:stack ['$12load_global.4', '$disty14.5', '$bias16.6']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=4, lineno=264)
2020-06-11 12:04:57,692:DEBUG:stack ['$18call_function.7']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack []
2020-06-11 12:04:57,692:DEBUG:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$22load_global.8']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$26load_global.10']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$28load_method.11']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=34, inst=LOAD_ATTR(arg=4, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12', '$cent_disty32.13']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=36, inst=CALL_METHOD(arg=2, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12', '$34load_attr.14']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$24load_method.9', '$36call_method.15']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=40, inst=STORE_FAST(arg=5, lineno=267)
2020-06-11 12:04:57,692:DEBUG:stack ['$38call_method.16']
2020-06-11 12:04:57,692:DEBUG:dispatch pc=42, inst=LOAD_GLOBAL(arg=1, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack []
2020-06-11 12:04:57,693:DEBUG:dispatch pc=44, inst=LOAD_METHOD(arg=2, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$42load_global.17']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=48, inst=LOAD_METHOD(arg=3, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$46load_global.19']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$48load_method.20']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=54, inst=LOAD_ATTR(arg=4, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21', '$cent_distx52.22']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21', '$54load_attr.23']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$44load_method.18', '$56call_method.24']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=6, lineno=268)
2020-06-11 12:04:57,693:DEBUG:stack ['$58call_method.25']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=62, inst=LOAD_GLOBAL(arg=1, lineno=269)
2020-06-11 12:04:57,693:DEBUG:stack []
2020-06-11 12:04:57,693:DEBUG:dispatch pc=64, inst=LOAD_METHOD(arg=2, lineno=269)
2020-06-11 12:04:57,693:DEBUG:stack ['$62load_global.26']
2020-06-11 12:04:57,693:DEBUG:dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=68, inst=LOAD_METHOD(arg=3, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$66load_global.28']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$68load_method.29']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=74, inst=LOAD_ATTR(arg=4, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30', '$cent_disty72.31']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30', '$74load_attr.32']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$64load_method.27', '$76call_method.33']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=80, inst=STORE_FAST(arg=7, lineno=269)
2020-06-11 12:04:57,694:DEBUG:stack ['$78call_method.34']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=6, lineno=272)
2020-06-11 12:04:57,694:DEBUG:stack []
2020-06-11 12:04:57,694:DEBUG:dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=272)
2020-06-11 12:04:57,694:DEBUG:stack ['$varx82.35']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=86, inst=COMPARE_OP(arg=1, lineno=272)
2020-06-11 12:04:57,694:DEBUG:stack ['$varx82.35', '$const84.36']
2020-06-11 12:04:57,694:DEBUG:dispatch pc=88, inst=POP_JUMP_IF_TRUE(arg=98, lineno=272)
2020-06-11 12:04:57,695:DEBUG:stack ['$86compare_op.37']
2020-06-11 12:04:57,695:DEBUG:end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,695:DEBUG:pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2020-06-11 12:04:57,695:DEBUG:stack: []
2020-06-11 12:04:57,695:DEBUG:dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=272)
2020-06-11 12:04:57,695:DEBUG:stack []
2020-06-11 12:04:57,695:DEBUG:dispatch pc=92, inst=LOAD_CONST(arg=1, lineno=272)
2020-06-11 12:04:57,695:DEBUG:stack ['$vary90.0']
2020-06-11 12:04:57,695:DEBUG:dispatch pc=94, inst=COMPARE_OP(arg=1, lineno=272)
2020-06-11 12:04:57,695:DEBUG:stack ['$vary90.0', '$const92.1']
2020-06-11 12:04:57,695:DEBUG:dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=104, lineno=272)
2020-06-11 12:04:57,695:DEBUG:stack ['$94compare_op.2']
2020-06-11 12:04:57,695:DEBUG:end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=104, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,695:DEBUG:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:57,695:DEBUG:stack: []
2020-06-11 12:04:57,695:DEBUG:dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=273)
2020-06-11 12:04:57,695:DEBUG:stack []
2020-06-11 12:04:57,695:DEBUG:dispatch pc=100, inst=STORE_FAST(arg=8, lineno=273)
2020-06-11 12:04:57,695:DEBUG:stack ['$const98.0']
2020-06-11 12:04:57,695:DEBUG:dispatch pc=102, inst=JUMP_FORWARD(arg=24, lineno=273)
2020-06-11 12:04:57,695:DEBUG:stack []
2020-06-11 12:04:57,696:DEBUG:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,696:DEBUG:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:04:57,696:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:04:57,696:DEBUG:stack: []
2020-06-11 12:04:57,696:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=5, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack []
2020-06-11 12:04:57,696:DEBUG:dispatch pc=106, inst=LOAD_GLOBAL(arg=1, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=108, inst=LOAD_METHOD(arg=5, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$106load_global.1']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=110, inst=LOAD_GLOBAL(arg=1, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=112, inst=LOAD_METHOD(arg=6, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$110load_global.3']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=116, inst=LOAD_FAST(arg=7, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$varx114.5']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$varx114.5', '$vary116.6']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=120, inst=CALL_METHOD(arg=1, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$118binary_multiply.7']
2020-06-11 12:04:57,696:DEBUG:dispatch pc=122, inst=CALL_METHOD(arg=1, lineno=277)
2020-06-11 12:04:57,696:DEBUG:stack ['$covar104.0', '$108load_method.2', '$120call_method.8']
2020-06-11 12:04:57,697:DEBUG:dispatch pc=124, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=277)
2020-06-11 12:04:57,697:DEBUG:stack ['$covar104.0', '$122call_method.9']
2020-06-11 12:04:57,697:DEBUG:dispatch pc=126, inst=STORE_FAST(arg=8, lineno=277)
2020-06-11 12:04:57,697:DEBUG:stack ['$124binary_true_divide.10']
2020-06-11 12:04:57,697:DEBUG:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,697:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:04:57,697:DEBUG:stack: []
2020-06-11 12:04:57,697:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=8, lineno=279)
2020-06-11 12:04:57,697:DEBUG:stack []
2020-06-11 12:04:57,697:DEBUG:dispatch pc=130, inst=RETURN_VALUE(arg=None, lineno=279)
2020-06-11 12:04:57,697:DEBUG:stack ['$stat128.0']
2020-06-11 12:04:57,697:DEBUG:end state. edges=[]
2020-06-11 12:04:57,697:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:04:57,697:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,697:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set()})
2020-06-11 12:04:57,697:DEBUG:defmap: {}
2020-06-11 12:04:57,698:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,698:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,698:DEBUG:keep phismap: {}
2020-06-11 12:04:57,698:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:57,698:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,698:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$distx4.1'}), (6, {'res': '$bias6.2'}), (8, {'func': '$2load_global.0', 'args': ['$distx4.1', '$bias6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$disty14.5'}), (16, {'res': '$bias16.6'}), (18, {'func': '$12load_global.4', 'args': ['$disty14.5', '$bias16.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_method.11'}), (30, {'res': '$cent_distx30.12'}), (32, {'res': '$cent_disty32.13'}), (34, {'item': '$cent_disty32.13', 'res': '$34load_attr.14'}), (36, {'func': '$28load_method.11', 'args': ['$cent_distx30.12', '$34load_attr.14'], 'res': '$36call_method.15'}), (38, {'func': '$24load_method.9', 'args': ['$36call_method.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_method.18'}), (46, {'res': '$46load_global.19'}), (48, {'item': '$46load_global.19', 'res': '$48load_method.20'}), (50, {'res': '$cent_distx50.21'}), (52, {'res': '$cent_distx52.22'}), (54, {'item': '$cent_distx52.22', 'res': '$54load_attr.23'}), (56, {'func': '$48load_method.20', 'args': ['$cent_distx50.21', '$54load_attr.23'], 'res': '$56call_method.24'}), (58, {'func': '$44load_method.18', 'args': ['$56call_method.24'], 'res': '$58call_method.25'}), (60, {'value': '$58call_method.25'}), (62, {'res': '$62load_global.26'}), (64, {'item': '$62load_global.26', 'res': '$64load_method.27'}), (66, {'res': '$66load_global.28'}), (68, {'item': '$66load_global.28', 'res': '$68load_method.29'}), (70, {'res': '$cent_disty70.30'}), (72, {'res': '$cent_disty72.31'}), (74, {'item': '$cent_disty72.31', 'res': '$74load_attr.32'}), (76, {'func': '$68load_method.29', 'args': ['$cent_disty70.30', '$74load_attr.32'], 'res': '$76call_method.33'}), (78, {'func': '$64load_method.27', 'args': ['$76call_method.33'], 'res': '$78call_method.34'}), (80, {'value': '$78call_method.34'}), (82, {'res': '$varx82.35'}), (84, {'res': '$const84.36'}), (86, {'lhs': '$varx82.35', 'rhs': '$const84.36', 'res': '$86compare_op.37'}), (88, {'pred': '$86compare_op.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 98: ()})
2020-06-11 12:04:57,698:DEBUG:block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$vary90.0'}), (92, {'res': '$const92.1'}), (94, {'lhs': '$vary90.0', 'rhs': '$const92.1', 'res': '$94compare_op.2'}), (96, {'pred': '$94compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 104: ()})
2020-06-11 12:04:57,698:DEBUG:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
2020-06-11 12:04:57,698:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$covar104.0'}), (106, {'res': '$106load_global.1'}), (108, {'item': '$106load_global.1', 'res': '$108load_method.2'}), (110, {'res': '$110load_global.3'}), (112, {'item': '$110load_global.3', 'res': '$112load_method.4'}), (114, {'res': '$varx114.5'}), (116, {'res': '$vary116.6'}), (118, {'lhs': '$varx114.5', 'rhs': '$vary116.6', 'res': '$118binary_multiply.7'}), (120, {'func': '$112load_method.4', 'args': ['$118binary_multiply.7'], 'res': '$120call_method.8'}), (122, {'func': '$108load_method.2', 'args': ['$120call_method.8'], 'res': '$122call_method.9'}), (124, {'lhs': '$covar104.0', 'rhs': '$122call_method.9', 'res': '$124binary_true_divide.10'}), (126, {'value': '$124binary_true_divide.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
2020-06-11 12:04:57,698:DEBUG:block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$stat128.0'}), (130, {'retval': '$stat128.0', 'castval': '$130return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,700:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat = $124binary_true_divide.10         ['$124binary_true_divide.10', 'stat']
    jump 128                                 []
label 128:
    $130return_value.1 = cast(value=stat)    ['$130return_value.1', 'stat']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:04:57,707:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,708:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat = $124binary_true_divide.10         ['$124binary_true_divide.10', 'stat']
    jump 128                                 []
label 128:
    $130return_value.1 = cast(value=stat)    ['$130return_value.1', 'stat']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:04:57,708:DEBUG:================================================================================
2020-06-11 12:04:57,708:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,708:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd6a1910>
2020-06-11 12:04:57,708:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,708:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:04:57,708:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:04:57,708:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,708:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,708:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:04:57,708:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,708:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,709:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:04:57,709:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:04:57,709:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:04:57,709:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,709:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,709:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,709:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:04:57,709:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:04:57,709:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:04:57,709:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:04:57,709:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,709:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,709:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:04:57,709:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:04:57,709:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,709:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:04:57,709:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,709:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,710:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,710:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:04:57,710:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:04:57,710:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:04:57,710:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:04:57,710:DEBUG:==== SSA block analysis pass on 90
2020-06-11 12:04:57,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd6a1910>
2020-06-11 12:04:57,710:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:04:57,710:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:04:57,710:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:04:57,710:DEBUG:==== SSA block analysis pass on 98
2020-06-11 12:04:57,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd6a1910>
2020-06-11 12:04:57,710:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:04:57,710:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:04:57,710:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,710:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:04:57,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd6a1910>
2020-06-11 12:04:57,710:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,710:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:04:57,710:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,710:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:04:57,710:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:04:57,710:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,711:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,711:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:04:57,711:DEBUG:on stmt: stat = $124binary_true_divide.10
2020-06-11 12:04:57,711:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,711:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:04:57,711:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd6a1910>
2020-06-11 12:04:57,711:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:04:57,711:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:04:57,712:DEBUG:defs defaultdict(<class 'list'>,
            {'$106load_global.1': [<numba.core.ir.Assign object at 0x7f01cd64dd50>],
             '$108load_method.2': [<numba.core.ir.Assign object at 0x7f01cd64de10>],
             '$110load_global.3': [<numba.core.ir.Assign object at 0x7f01cd64df10>],
             '$112load_method.4': [<numba.core.ir.Assign object at 0x7f01cd654050>],
             '$118binary_multiply.7': [<numba.core.ir.Assign object at 0x7f01cd654310>],
             '$120call_method.8': [<numba.core.ir.Assign object at 0x7f01cd654450>],
             '$122call_method.9': [<numba.core.ir.Assign object at 0x7f01cd654510>],
             '$124binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f01cd6545d0>],
             '$12load_global.4': [<numba.core.ir.Assign object at 0x7f01cd644650>],
             '$130return_value.1': [<numba.core.ir.Assign object at 0x7f01cd654850>],
             '$18call_function.7': [<numba.core.ir.Assign object at 0x7f01cd6448d0>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x7f01cd644a50>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x7f01cd644b90>],
             '$26load_global.10': [<numba.core.ir.Assign object at 0x7f01cd644c90>],
             '$28load_method.11': [<numba.core.ir.Assign object at 0x7f01cd644d90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01cd644150>],
             '$34load_attr.14': [<numba.core.ir.Assign object at 0x7f01cd649090>],
             '$36call_method.15': [<numba.core.ir.Assign object at 0x7f01cd649210>],
             '$38call_method.16': [<numba.core.ir.Assign object at 0x7f01cd649310>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x7f01cd649490>],
             '$44load_method.18': [<numba.core.ir.Assign object at 0x7f01cd649550>],
             '$46load_global.19': [<numba.core.ir.Assign object at 0x7f01cd649650>],
             '$48load_method.20': [<numba.core.ir.Assign object at 0x7f01cd649750>],
             '$54load_attr.23': [<numba.core.ir.Assign object at 0x7f01cd649a10>],
             '$56call_method.24': [<numba.core.ir.Assign object at 0x7f01cd649b50>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7f01cd649c50>],
             '$62load_global.26': [<numba.core.ir.Assign object at 0x7f01cd649dd0>],
             '$64load_method.27': [<numba.core.ir.Assign object at 0x7f01cd649e90>],
             '$66load_global.28': [<numba.core.ir.Assign object at 0x7f01cd649f90>],
             '$68load_method.29': [<numba.core.ir.Assign object at 0x7f01cd64d0d0>],
             '$74load_attr.32': [<numba.core.ir.Assign object at 0x7f01cd62cb10>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x7f01cd62c050>],
             '$78call_method.34': [<numba.core.ir.Assign object at 0x7f01cd64d310>],
             '$86compare_op.37': [<numba.core.ir.Assign object at 0x7f01cd64d6d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01cd644490>],
             '$94compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd64d7d0>],
             '$const84.36': [<numba.core.ir.Assign object at 0x7f01cd64d590>],
             '$const92.1': [<numba.core.ir.Assign object at 0x7f01cd64d190>],
             '$const98.0': [<numba.core.ir.Assign object at 0x7f01cd64d990>],
             'bias': [<numba.core.ir.Assign object at 0x7f01cd62cdd0>],
             'cent_distx': [<numba.core.ir.Assign object at 0x7f01cd644550>],
             'cent_disty': [<numba.core.ir.Assign object at 0x7f01cd644950>],
             'covar': [<numba.core.ir.Assign object at 0x7f01cd649390>],
             'distx': [<numba.core.ir.Assign object at 0x7f01cd62ced0>],
             'disty': [<numba.core.ir.Assign object at 0x7f01cd62ce50>],
             'stat': [<numba.core.ir.Assign object at 0x7f01cd64da50>,
                      <numba.core.ir.Assign object at 0x7f01cd64da10>],
             'varx': [<numba.core.ir.Assign object at 0x7f01cd649cd0>],
             'vary': [<numba.core.ir.Assign object at 0x7f01cd64d390>]})
2020-06-11 12:04:57,712:DEBUG:SSA violators {'stat'}
2020-06-11 12:04:57,712:DEBUG:Fix SSA violator on var stat
2020-06-11 12:04:57,712:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,712:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd62af90>
2020-06-11 12:04:57,712:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,712:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:04:57,712:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:04:57,712:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,712:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,712:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:04:57,712:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,712:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,712:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:04:57,712:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,712:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:04:57,712:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,712:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:04:57,712:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,712:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:04:57,713:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,713:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:04:57,713:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,713:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:04:57,713:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:04:57,713:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:04:57,713:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,713:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:04:57,713:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,713:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:04:57,713:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,713:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,713:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:04:57,713:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:04:57,713:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:04:57,713:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:04:57,713:DEBUG:==== SSA block rewrite pass on 90
2020-06-11 12:04:57,714:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd62af90>
2020-06-11 12:04:57,714:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:04:57,714:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:04:57,714:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:04:57,714:DEBUG:==== SSA block rewrite pass on 98
2020-06-11 12:04:57,714:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd62af90>
2020-06-11 12:04:57,714:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:04:57,714:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:04:57,714:DEBUG:first assign: stat
2020-06-11 12:04:57,714:DEBUG:replaced with: stat = $const98.0
2020-06-11 12:04:57,714:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,714:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,714:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd62af90>
2020-06-11 12:04:57,714:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,714:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:04:57,714:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,714:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:04:57,714:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:04:57,714:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,714:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,714:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:04:57,714:DEBUG:on stmt: stat = $124binary_true_divide.10
2020-06-11 12:04:57,714:DEBUG:replaced with: stat.1 = $124binary_true_divide.10
2020-06-11 12:04:57,714:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,715:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:57,715:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd62af90>
2020-06-11 12:04:57,715:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:04:57,715:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:04:57,715:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {98: [<numba.core.ir.Assign object at 0x7f01cd62ab90>],
             104: [<numba.core.ir.Assign object at 0x7f01cd62aa50>]})
2020-06-11 12:04:57,715:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,715:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd62aed0>
2020-06-11 12:04:57,715:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,715:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:04:57,715:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:04:57,715:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,715:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,715:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:04:57,715:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>))
2020-06-11 12:04:57,715:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:04:57,715:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:04:57,715:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,715:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:04:57,716:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,716:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:04:57,716:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,716:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,716:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:04:57,716:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:04:57,716:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,716:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:04:57,716:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,716:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:04:57,716:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:04:57,716:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,716:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:04:57,716:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:04:57,716:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,716:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:04:57,716:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,716:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:04:57,716:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:04:57,716:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,717:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:04:57,717:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:04:57,717:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:04:57,717:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:04:57,717:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:04:57,717:DEBUG:==== SSA block rewrite pass on 90
2020-06-11 12:04:57,717:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd62aed0>
2020-06-11 12:04:57,717:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:04:57,717:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:04:57,717:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:04:57,717:DEBUG:==== SSA block rewrite pass on 98
2020-06-11 12:04:57,717:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd62aed0>
2020-06-11 12:04:57,717:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:04:57,717:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:04:57,717:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,717:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,717:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd62aed0>
2020-06-11 12:04:57,717:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,717:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:04:57,717:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,717:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:04:57,717:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:04:57,717:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,718:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:04:57,718:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:04:57,718:DEBUG:on stmt: stat.1 = $124binary_true_divide.10
2020-06-11 12:04:57,718:DEBUG:on stmt: jump 128
2020-06-11 12:04:57,718:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:57,718:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd62aed0>
2020-06-11 12:04:57,718:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:04:57,718:DEBUG:find_def var='stat' stmt=$130return_value.1 = cast(value=stat)
2020-06-11 12:04:57,718:DEBUG:find_def_from_top label 128
2020-06-11 12:04:57,718:DEBUG:insert phi node stat.2 = phi(incoming_values=[], incoming_blocks=[]) at 128
2020-06-11 12:04:57,718:DEBUG:find_def_from_bottom label 104
2020-06-11 12:04:57,718:DEBUG:incoming_def stat.1 = $124binary_true_divide.10
2020-06-11 12:04:57,718:DEBUG:find_def_from_bottom label 98
2020-06-11 12:04:57,718:DEBUG:incoming_def stat = $const98.0
2020-06-11 12:04:57,718:DEBUG:replaced with: $130return_value.1 = cast(value=stat.2)
2020-06-11 12:04:57,718:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:04:57,718:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,719:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7f01d3158560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat.1 = $124binary_true_divide.10       ['$124binary_true_divide.10', 'stat.1']
    jump 128                                 []
label 128:
    stat.2 = phi(incoming_values=[Var(stat.1, dcorr.py:277), Var(stat, dcorr.py:273)], incoming_blocks=[104, 98]) ['stat', 'stat.1', 'stat.2']
    $130return_value.1 = cast(value=stat.2)  ['$130return_value.1', 'stat.2']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:04:57,719:DEBUG:================================================================================
2020-06-11 12:04:57,723:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=236)
           2	LOAD_FAST(arg=0, lineno=236)
           4	LOAD_ATTR(arg=0, lineno=236)
           6	LOAD_CONST(arg=1, lineno=236)
           8	BINARY_SUBSCR(arg=None, lineno=236)
          10	STORE_FAST(arg=2, lineno=236)
          12	LOAD_FAST(arg=1, lineno=239)
          14	POP_JUMP_IF_FALSE(arg=100, lineno=239)
          16	LOAD_GLOBAL(arg=1, lineno=244)
          18	LOAD_METHOD(arg=2, lineno=244)
          20	LOAD_FAST(arg=0, lineno=244)
          22	LOAD_ATTR(arg=3, lineno=244)
          24	LOAD_CONST(arg=1, lineno=244)
          26	LOAD_CONST(arg=2, lineno=244)
          28	CALL_FUNCTION_KW(arg=1, lineno=244)
          30	LOAD_FAST(arg=2, lineno=244)
          32	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          34	LOAD_FAST(arg=2, lineno=244)
          36	CALL_METHOD(arg=2, lineno=244)
          38	LOAD_METHOD(arg=4, lineno=244)
          40	LOAD_CONST(arg=3, lineno=244)
          42	LOAD_FAST(arg=2, lineno=244)
          44	CALL_METHOD(arg=2, lineno=244)
          46	LOAD_ATTR(arg=5, lineno=244)
          48	LOAD_GLOBAL(arg=1, lineno=244)
          50	LOAD_METHOD(arg=2, lineno=244)
          52	LOAD_FAST(arg=0, lineno=244)
          54	LOAD_ATTR(arg=3, lineno=244)
          56	LOAD_CONST(arg=4, lineno=244)
          58	LOAD_CONST(arg=2, lineno=244)
          60	CALL_FUNCTION_KW(arg=1, lineno=244)
          62	LOAD_FAST(arg=2, lineno=244)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          66	LOAD_FAST(arg=2, lineno=244)
          68	CALL_METHOD(arg=2, lineno=244)
          70	LOAD_METHOD(arg=4, lineno=244)
          72	LOAD_CONST(arg=3, lineno=244)
          74	LOAD_FAST(arg=2, lineno=244)
          76	CALL_METHOD(arg=2, lineno=244)
          78	BINARY_ADD(arg=None, lineno=244)
          80	LOAD_FAST(arg=0, lineno=244)
          82	LOAD_METHOD(arg=3, lineno=244)
          84	CALL_METHOD(arg=0, lineno=244)
          86	LOAD_FAST(arg=2, lineno=244)
          88	LOAD_FAST(arg=2, lineno=244)
          90	BINARY_MULTIPLY(arg=None, lineno=244)
          92	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          94	BINARY_SUBTRACT(arg=None, lineno=244)
          96	STORE_FAST(arg=3, lineno=244)
          98	JUMP_FORWARD(arg=98, lineno=244)
>        100	LOAD_GLOBAL(arg=1, lineno=250)
         102	LOAD_METHOD(arg=2, lineno=250)
         104	LOAD_FAST(arg=0, lineno=250)
         106	LOAD_ATTR(arg=3, lineno=250)
         108	LOAD_CONST(arg=1, lineno=250)
         110	LOAD_CONST(arg=2, lineno=250)
         112	CALL_FUNCTION_KW(arg=1, lineno=250)
         114	LOAD_FAST(arg=2, lineno=250)
         116	LOAD_CONST(arg=5, lineno=250)
         118	BINARY_SUBTRACT(arg=None, lineno=250)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         122	LOAD_FAST(arg=2, lineno=250)
         124	CALL_METHOD(arg=2, lineno=250)
         126	LOAD_METHOD(arg=4, lineno=250)
         128	LOAD_CONST(arg=3, lineno=250)
         130	LOAD_FAST(arg=2, lineno=250)
         132	CALL_METHOD(arg=2, lineno=250)
         134	LOAD_ATTR(arg=5, lineno=250)
         136	LOAD_GLOBAL(arg=1, lineno=250)
         138	LOAD_METHOD(arg=2, lineno=250)
         140	LOAD_FAST(arg=0, lineno=250)
         142	LOAD_ATTR(arg=3, lineno=250)
         144	LOAD_CONST(arg=4, lineno=250)
         146	LOAD_CONST(arg=2, lineno=250)
         148	CALL_FUNCTION_KW(arg=1, lineno=250)
         150	LOAD_FAST(arg=2, lineno=250)
         152	LOAD_CONST(arg=5, lineno=250)
         154	BINARY_SUBTRACT(arg=None, lineno=250)
         156	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         158	LOAD_FAST(arg=2, lineno=250)
         160	CALL_METHOD(arg=2, lineno=250)
         162	LOAD_METHOD(arg=4, lineno=250)
         164	LOAD_CONST(arg=3, lineno=250)
         166	LOAD_FAST(arg=2, lineno=250)
         168	CALL_METHOD(arg=2, lineno=250)
         170	BINARY_ADD(arg=None, lineno=250)
         172	LOAD_FAST(arg=0, lineno=250)
         174	LOAD_METHOD(arg=3, lineno=250)
         176	CALL_METHOD(arg=0, lineno=250)
         178	LOAD_FAST(arg=2, lineno=250)
         180	LOAD_CONST(arg=4, lineno=250)
         182	BINARY_SUBTRACT(arg=None, lineno=250)
         184	LOAD_FAST(arg=2, lineno=250)
         186	LOAD_CONST(arg=5, lineno=250)
         188	BINARY_SUBTRACT(arg=None, lineno=250)
         190	BINARY_MULTIPLY(arg=None, lineno=250)
         192	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         194	BINARY_SUBTRACT(arg=None, lineno=250)
         196	STORE_FAST(arg=3, lineno=250)
>        198	LOAD_FAST(arg=0, lineno=252)
         200	LOAD_FAST(arg=3, lineno=252)
         202	BINARY_SUBTRACT(arg=None, lineno=252)
         204	STORE_FAST(arg=4, lineno=252)
         206	LOAD_FAST(arg=1, lineno=253)
         208	POP_JUMP_IF_TRUE(arg=222, lineno=253)
         210	LOAD_GLOBAL(arg=1, lineno=254)
         212	LOAD_METHOD(arg=6, lineno=254)
         214	LOAD_FAST(arg=4, lineno=254)
         216	LOAD_CONST(arg=1, lineno=254)
         218	CALL_METHOD(arg=2, lineno=254)
         220	POP_TOP(arg=None, lineno=254)
>        222	LOAD_FAST(arg=4, lineno=256)
         224	RETURN_VALUE(arg=None, lineno=256)
2020-06-11 12:04:57,723:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,723:DEBUG:stack: []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack ['$distx2.0']
2020-06-11 12:04:57,724:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:57,724:DEBUG:dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack ['$4load_attr.1', '$const6.2']
2020-06-11 12:04:57,724:DEBUG:dispatch pc=10, inst=STORE_FAST(arg=2, lineno=236)
2020-06-11 12:04:57,724:DEBUG:stack ['$8binary_subscr.3']
2020-06-11 12:04:57,724:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:04:57,724:DEBUG:stack []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=14, inst=POP_JUMP_IF_FALSE(arg=100, lineno=239)
2020-06-11 12:04:57,724:DEBUG:stack ['$bias12.4']
2020-06-11 12:04:57,724:DEBUG:end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=100, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,724:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2020-06-11 12:04:57,724:DEBUG:stack: []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=244)
2020-06-11 12:04:57,724:DEBUG:stack []
2020-06-11 12:04:57,724:DEBUG:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,724:DEBUG:stack ['$16load_global.0']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$distx20.2']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$22load_attr.3']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$22load_attr.3', '$const24.4']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=28, inst=CALL_FUNCTION_KW(arg=1, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$22load_attr.3', '$const24.4', '$const26.5']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$28call_function_kw.6']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=32, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$28call_function_kw.6', '$n30.7']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$32binary_true_divide.8']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=36, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$18load_method.1', '$32binary_true_divide.8', '$n34.9']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=38, inst=LOAD_METHOD(arg=4, lineno=244)
2020-06-11 12:04:57,725:DEBUG:stack ['$36call_method.10']
2020-06-11 12:04:57,725:DEBUG:dispatch pc=40, inst=LOAD_CONST(arg=3, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$38load_method.11']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$38load_method.11', '$const40.12']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=44, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$38load_method.11', '$const40.12', '$n42.13']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=46, inst=LOAD_ATTR(arg=5, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$44call_method.14']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$48load_global.16']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$distx52.18']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=56, inst=LOAD_CONST(arg=4, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19', '$const56.20']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=60, inst=CALL_FUNCTION_KW(arg=1, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19', '$const56.20', '$const58.21']
2020-06-11 12:04:57,726:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,726:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$60call_function_kw.22']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$60call_function_kw.22', '$n62.23']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$64binary_true_divide.24']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=68, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$64binary_true_divide.24', '$n66.25']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$68call_method.26']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$70load_method.27']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$70load_method.27', '$const72.28']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$70load_method.27', '$const72.28', '$n74.29']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$46load_attr.15', '$76call_method.30']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$78binary_add.31']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=82, inst=LOAD_METHOD(arg=3, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$78binary_add.31', '$distx80.32']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=84, inst=CALL_METHOD(arg=0, lineno=244)
2020-06-11 12:04:57,727:DEBUG:stack ['$78binary_add.31', '$82load_method.33']
2020-06-11 12:04:57,727:DEBUG:dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$78binary_add.31', '$84call_method.34']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$n86.35']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=90, inst=BINARY_MULTIPLY(arg=None, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$n86.35', '$n88.36']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=92, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$90binary_multiply.37']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=94, inst=BINARY_SUBTRACT(arg=None, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$78binary_add.31', '$92binary_true_divide.38']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=96, inst=STORE_FAST(arg=3, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack ['$94binary_subtract.39']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=98, inst=JUMP_FORWARD(arg=98, lineno=244)
2020-06-11 12:04:57,728:DEBUG:stack []
2020-06-11 12:04:57,728:DEBUG:end state. edges=[Edge(pc=198, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,728:DEBUG:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=198 nstack_initial=0)])
2020-06-11 12:04:57,728:DEBUG:stack: []
2020-06-11 12:04:57,728:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=1, lineno=250)
2020-06-11 12:04:57,728:DEBUG:stack []
2020-06-11 12:04:57,728:DEBUG:dispatch pc=102, inst=LOAD_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,728:DEBUG:stack ['$100load_global.0']
2020-06-11 12:04:57,728:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:04:57,728:DEBUG:stack ['$102load_method.1']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=106, inst=LOAD_ATTR(arg=3, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$distx104.2']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=108, inst=LOAD_CONST(arg=1, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$106load_attr.3']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=2, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$106load_attr.3', '$const108.4']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=112, inst=CALL_FUNCTION_KW(arg=1, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$106load_attr.3', '$const108.4', '$const110.5']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=116, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$n114.7']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=118, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$n114.7', '$const116.8']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$118binary_subtract.9']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=122, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$120binary_true_divide.10']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=124, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$102load_method.1', '$120binary_true_divide.10', '$n122.11']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=126, inst=LOAD_METHOD(arg=4, lineno=250)
2020-06-11 12:04:57,729:DEBUG:stack ['$124call_method.12']
2020-06-11 12:04:57,729:DEBUG:dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$126load_method.13']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$126load_method.13', '$const128.14']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=132, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$126load_method.13', '$const128.14', '$n130.15']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=134, inst=LOAD_ATTR(arg=5, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$132call_method.16']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=136, inst=LOAD_GLOBAL(arg=1, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=138, inst=LOAD_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$136load_global.18']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=140, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$138load_method.19']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=142, inst=LOAD_ATTR(arg=3, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$distx140.20']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=144, inst=LOAD_CONST(arg=4, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21', '$const144.22']
2020-06-11 12:04:57,730:DEBUG:dispatch pc=148, inst=CALL_FUNCTION_KW(arg=1, lineno=250)
2020-06-11 12:04:57,730:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21', '$const144.22', '$const146.23']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=152, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$n150.25']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=154, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$n150.25', '$const152.26']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=156, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$154binary_subtract.27']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=158, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$156binary_true_divide.28']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=160, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$156binary_true_divide.28', '$n158.29']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=162, inst=LOAD_METHOD(arg=4, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$160call_method.30']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=164, inst=LOAD_CONST(arg=3, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$162load_method.31']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$162load_method.31', '$const164.32']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=168, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$162load_method.31', '$const164.32', '$n166.33']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=250)
2020-06-11 12:04:57,731:DEBUG:stack ['$134load_attr.17', '$168call_method.34']
2020-06-11 12:04:57,731:DEBUG:dispatch pc=172, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=174, inst=LOAD_METHOD(arg=3, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$distx172.36']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=176, inst=CALL_METHOD(arg=0, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$174load_method.37']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=180, inst=LOAD_CONST(arg=4, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$n178.39']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=182, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$n178.39', '$const180.40']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=186, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$n184.42']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=188, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$n184.42', '$const186.43']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=190, inst=BINARY_MULTIPLY(arg=None, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$188binary_subtract.44']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=192, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:04:57,732:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$190binary_multiply.45']
2020-06-11 12:04:57,732:DEBUG:dispatch pc=194, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:04:57,733:DEBUG:stack ['$170binary_add.35', '$192binary_true_divide.46']
2020-06-11 12:04:57,733:DEBUG:dispatch pc=196, inst=STORE_FAST(arg=3, lineno=250)
2020-06-11 12:04:57,733:DEBUG:stack ['$194binary_subtract.47']
2020-06-11 12:04:57,733:DEBUG:end state. edges=[Edge(pc=198, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,733:DEBUG:pending: deque([State(pc_initial=198 nstack_initial=0), State(pc_initial=198 nstack_initial=0)])
2020-06-11 12:04:57,733:DEBUG:stack: []
2020-06-11 12:04:57,733:DEBUG:dispatch pc=198, inst=LOAD_FAST(arg=0, lineno=252)
2020-06-11 12:04:57,733:DEBUG:stack []
2020-06-11 12:04:57,733:DEBUG:dispatch pc=200, inst=LOAD_FAST(arg=3, lineno=252)
2020-06-11 12:04:57,733:DEBUG:stack ['$distx198.0']
2020-06-11 12:04:57,733:DEBUG:dispatch pc=202, inst=BINARY_SUBTRACT(arg=None, lineno=252)
2020-06-11 12:04:57,733:DEBUG:stack ['$distx198.0', '$exp_distx200.1']
2020-06-11 12:04:57,733:DEBUG:dispatch pc=204, inst=STORE_FAST(arg=4, lineno=252)
2020-06-11 12:04:57,733:DEBUG:stack ['$202binary_subtract.2']
2020-06-11 12:04:57,733:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=1, lineno=253)
2020-06-11 12:04:57,733:DEBUG:stack []
2020-06-11 12:04:57,733:DEBUG:dispatch pc=208, inst=POP_JUMP_IF_TRUE(arg=222, lineno=253)
2020-06-11 12:04:57,733:DEBUG:stack ['$bias206.3']
2020-06-11 12:04:57,733:DEBUG:end state. edges=[Edge(pc=210, stack=(), blockstack=(), npush=0), Edge(pc=222, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,733:DEBUG:pending: deque([State(pc_initial=198 nstack_initial=0), State(pc_initial=210 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:04:57,733:DEBUG:pending: deque([State(pc_initial=210 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:04:57,733:DEBUG:stack: []
2020-06-11 12:04:57,734:DEBUG:dispatch pc=210, inst=LOAD_GLOBAL(arg=1, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack []
2020-06-11 12:04:57,734:DEBUG:dispatch pc=212, inst=LOAD_METHOD(arg=6, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack ['$210load_global.0']
2020-06-11 12:04:57,734:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=4, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack ['$212load_method.1']
2020-06-11 12:04:57,734:DEBUG:dispatch pc=216, inst=LOAD_CONST(arg=1, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack ['$212load_method.1', '$cent_distx214.2']
2020-06-11 12:04:57,734:DEBUG:dispatch pc=218, inst=CALL_METHOD(arg=2, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack ['$212load_method.1', '$cent_distx214.2', '$const216.3']
2020-06-11 12:04:57,734:DEBUG:dispatch pc=220, inst=POP_TOP(arg=None, lineno=254)
2020-06-11 12:04:57,734:DEBUG:stack ['$218call_method.4']
2020-06-11 12:04:57,734:DEBUG:end state. edges=[Edge(pc=222, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,734:DEBUG:pending: deque([State(pc_initial=222 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:04:57,734:DEBUG:stack: []
2020-06-11 12:04:57,734:DEBUG:dispatch pc=222, inst=LOAD_FAST(arg=4, lineno=256)
2020-06-11 12:04:57,734:DEBUG:stack []
2020-06-11 12:04:57,734:DEBUG:dispatch pc=224, inst=RETURN_VALUE(arg=None, lineno=256)
2020-06-11 12:04:57,734:DEBUG:stack ['$cent_distx222.0']
2020-06-11 12:04:57,734:DEBUG:end state. edges=[]
2020-06-11 12:04:57,735:DEBUG:pending: deque([State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:04:57,735:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,735:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=198 nstack_initial=0): set(),
             State(pc_initial=210 nstack_initial=0): set(),
             State(pc_initial=222 nstack_initial=0): set()})
2020-06-11 12:04:57,735:DEBUG:defmap: {}
2020-06-11 12:04:57,735:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,735:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,735:DEBUG:keep phismap: {}
2020-06-11 12:04:57,735:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:57,735:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,735:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$distx2.0'}), (4, {'item': '$distx2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$bias12.4'}), (14, {'pred': '$bias12.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 100: ()})
2020-06-11 12:04:57,735:DEBUG:block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$16load_global.0'}), (18, {'item': '$16load_global.0', 'res': '$18load_method.1'}), (20, {'res': '$distx20.2'}), (22, {'item': '$distx20.2', 'res': '$22load_attr.3'}), (24, {'res': '$const24.4'}), (26, {'res': '$const26.5'}), (28, {'func': '$22load_attr.3', 'args': ['$const24.4'], 'names': '$const26.5', 'res': '$28call_function_kw.6'}), (30, {'res': '$n30.7'}), (32, {'lhs': '$28call_function_kw.6', 'rhs': '$n30.7', 'res': '$32binary_true_divide.8'}), (34, {'res': '$n34.9'}), (36, {'func': '$18load_method.1', 'args': ['$32binary_true_divide.8', '$n34.9'], 'res': '$36call_method.10'}), (38, {'item': '$36call_method.10', 'res': '$38load_method.11'}), (40, {'res': '$const40.12'}), (42, {'res': '$n42.13'}), (44, {'func': '$38load_method.11', 'args': ['$const40.12', '$n42.13'], 'res': '$44call_method.14'}), (46, {'item': '$44call_method.14', 'res': '$46load_attr.15'}), (48, {'res': '$48load_global.16'}), (50, {'item': '$48load_global.16', 'res': '$50load_method.17'}), (52, {'res': '$distx52.18'}), (54, {'item': '$distx52.18', 'res': '$54load_attr.19'}), (56, {'res': '$const56.20'}), (58, {'res': '$const58.21'}), (60, {'func': '$54load_attr.19', 'args': ['$const56.20'], 'names': '$const58.21', 'res': '$60call_function_kw.22'}), (62, {'res': '$n62.23'}), (64, {'lhs': '$60call_function_kw.22', 'rhs': '$n62.23', 'res': '$64binary_true_divide.24'}), (66, {'res': '$n66.25'}), (68, {'func': '$50load_method.17', 'args': ['$64binary_true_divide.24', '$n66.25'], 'res': '$68call_method.26'}), (70, {'item': '$68call_method.26', 'res': '$70load_method.27'}), (72, {'res': '$const72.28'}), (74, {'res': '$n74.29'}), (76, {'func': '$70load_method.27', 'args': ['$const72.28', '$n74.29'], 'res': '$76call_method.30'}), (78, {'lhs': '$46load_attr.15', 'rhs': '$76call_method.30', 'res': '$78binary_add.31'}), (80, {'res': '$distx80.32'}), (82, {'item': '$distx80.32', 'res': '$82load_method.33'}), (84, {'func': '$82load_method.33', 'args': [], 'res': '$84call_method.34'}), (86, {'res': '$n86.35'}), (88, {'res': '$n88.36'}), (90, {'lhs': '$n86.35', 'rhs': '$n88.36', 'res': '$90binary_multiply.37'}), (92, {'lhs': '$84call_method.34', 'rhs': '$90binary_multiply.37', 'res': '$92binary_true_divide.38'}), (94, {'lhs': '$78binary_add.31', 'rhs': '$92binary_true_divide.38', 'res': '$94binary_subtract.39'}), (96, {'value': '$94binary_subtract.39'}), (98, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ()})
2020-06-11 12:04:57,735:DEBUG:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$100load_global.0'}), (102, {'item': '$100load_global.0', 'res': '$102load_method.1'}), (104, {'res': '$distx104.2'}), (106, {'item': '$distx104.2', 'res': '$106load_attr.3'}), (108, {'res': '$const108.4'}), (110, {'res': '$const110.5'}), (112, {'func': '$106load_attr.3', 'args': ['$const108.4'], 'names': '$const110.5', 'res': '$112call_function_kw.6'}), (114, {'res': '$n114.7'}), (116, {'res': '$const116.8'}), (118, {'lhs': '$n114.7', 'rhs': '$const116.8', 'res': '$118binary_subtract.9'}), (120, {'lhs': '$112call_function_kw.6', 'rhs': '$118binary_subtract.9', 'res': '$120binary_true_divide.10'}), (122, {'res': '$n122.11'}), (124, {'func': '$102load_method.1', 'args': ['$120binary_true_divide.10', '$n122.11'], 'res': '$124call_method.12'}), (126, {'item': '$124call_method.12', 'res': '$126load_method.13'}), (128, {'res': '$const128.14'}), (130, {'res': '$n130.15'}), (132, {'func': '$126load_method.13', 'args': ['$const128.14', '$n130.15'], 'res': '$132call_method.16'}), (134, {'item': '$132call_method.16', 'res': '$134load_attr.17'}), (136, {'res': '$136load_global.18'}), (138, {'item': '$136load_global.18', 'res': '$138load_method.19'}), (140, {'res': '$distx140.20'}), (142, {'item': '$distx140.20', 'res': '$142load_attr.21'}), (144, {'res': '$const144.22'}), (146, {'res': '$const146.23'}), (148, {'func': '$142load_attr.21', 'args': ['$const144.22'], 'names': '$const146.23', 'res': '$148call_function_kw.24'}), (150, {'res': '$n150.25'}), (152, {'res': '$const152.26'}), (154, {'lhs': '$n150.25', 'rhs': '$const152.26', 'res': '$154binary_subtract.27'}), (156, {'lhs': '$148call_function_kw.24', 'rhs': '$154binary_subtract.27', 'res': '$156binary_true_divide.28'}), (158, {'res': '$n158.29'}), (160, {'func': '$138load_method.19', 'args': ['$156binary_true_divide.28', '$n158.29'], 'res': '$160call_method.30'}), (162, {'item': '$160call_method.30', 'res': '$162load_method.31'}), (164, {'res': '$const164.32'}), (166, {'res': '$n166.33'}), (168, {'func': '$162load_method.31', 'args': ['$const164.32', '$n166.33'], 'res': '$168call_method.34'}), (170, {'lhs': '$134load_attr.17', 'rhs': '$168call_method.34', 'res': '$170binary_add.35'}), (172, {'res': '$distx172.36'}), (174, {'item': '$distx172.36', 'res': '$174load_method.37'}), (176, {'func': '$174load_method.37', 'args': [], 'res': '$176call_method.38'}), (178, {'res': '$n178.39'}), (180, {'res': '$const180.40'}), (182, {'lhs': '$n178.39', 'rhs': '$const180.40', 'res': '$182binary_subtract.41'}), (184, {'res': '$n184.42'}), (186, {'res': '$const186.43'}), (188, {'lhs': '$n184.42', 'rhs': '$const186.43', 'res': '$188binary_subtract.44'}), (190, {'lhs': '$182binary_subtract.41', 'rhs': '$188binary_subtract.44', 'res': '$190binary_multiply.45'}), (192, {'lhs': '$176call_method.38', 'rhs': '$190binary_multiply.45', 'res': '$192binary_true_divide.46'}), (194, {'lhs': '$170binary_add.35', 'rhs': '$192binary_true_divide.46', 'res': '$194binary_subtract.47'}), (196, {'value': '$194binary_subtract.47'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ()})
2020-06-11 12:04:57,736:DEBUG:block_infos State(pc_initial=198 nstack_initial=0):
AdaptBlockInfo(insts=((198, {'res': '$distx198.0'}), (200, {'res': '$exp_distx200.1'}), (202, {'lhs': '$distx198.0', 'rhs': '$exp_distx200.1', 'res': '$202binary_subtract.2'}), (204, {'value': '$202binary_subtract.2'}), (206, {'res': '$bias206.3'}), (208, {'pred': '$bias206.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: (), 222: ()})
2020-06-11 12:04:57,736:DEBUG:block_infos State(pc_initial=210 nstack_initial=0):
AdaptBlockInfo(insts=((210, {'res': '$210load_global.0'}), (212, {'item': '$210load_global.0', 'res': '$212load_method.1'}), (214, {'res': '$cent_distx214.2'}), (216, {'res': '$const216.3'}), (218, {'func': '$212load_method.1', 'args': ['$cent_distx214.2', '$const216.3'], 'res': '$218call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={222: ()})
2020-06-11 12:04:57,736:DEBUG:block_infos State(pc_initial=222 nstack_initial=0):
AdaptBlockInfo(insts=((222, {'res': '$cent_distx222.0'}), (224, {'retval': '$cent_distx222.0', 'castval': '$224return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,739:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=$4load_attr.1, index=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx = $194binary_subtract.47       ['$194binary_subtract.47', 'exp_distx']
    jump 198                                 []
label 198:
    $202binary_subtract.2 = distx - exp_distx ['$202binary_subtract.2', 'distx', 'exp_distx']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:04:57,749:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,750:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx = $194binary_subtract.47       ['$194binary_subtract.47', 'exp_distx']
    jump 198                                 []
label 198:
    $202binary_subtract.2 = distx - exp_distx ['$202binary_subtract.2', 'distx', 'exp_distx']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:04:57,750:DEBUG:================================================================================
2020-06-11 12:04:57,750:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,750:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,750:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,750:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:04:57,750:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:04:57,750:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:04:57,750:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:04:57,750:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:04:57,750:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:04:57,750:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:04:57,750:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,751:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,751:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:04:57,751:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,751:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:04:57,751:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:04:57,751:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:04:57,751:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:04:57,751:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:04:57,751:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,751:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:04:57,751:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,751:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:04:57,751:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:04:57,751:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:04:57,751:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:04:57,751:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,751:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:04:57,752:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,752:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,752:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:04:57,752:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:04:57,752:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:04:57,752:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:04:57,752:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,752:DEBUG:==== SSA block analysis pass on 100
2020-06-11 12:04:57,752:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,752:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,752:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:04:57,752:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,752:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:04:57,752:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,752:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:04:57,752:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:04:57,752:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:04:57,752:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,752:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:04:57,752:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:04:57,752:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,752:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:04:57,752:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,752:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:04:57,753:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,753:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:04:57,753:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,753:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:04:57,753:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:04:57,753:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:04:57,753:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,753:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:04:57,753:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:04:57,753:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,753:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:04:57,753:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,753:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,753:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:04:57,753:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:04:57,753:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:04:57,753:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:04:57,753:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:04:57,753:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:04:57,753:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:04:57,753:DEBUG:on stmt: exp_distx = $194binary_subtract.47
2020-06-11 12:04:57,754:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,754:DEBUG:==== SSA block analysis pass on 198
2020-06-11 12:04:57,754:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,754:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:04:57,754:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:04:57,754:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:04:57,754:DEBUG:==== SSA block analysis pass on 210
2020-06-11 12:04:57,754:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,754:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,754:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:04:57,754:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:04:57,754:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:04:57,754:DEBUG:on stmt: jump 222
2020-06-11 12:04:57,754:DEBUG:==== SSA block analysis pass on 222
2020-06-11 12:04:57,754:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d27d0>
2020-06-11 12:04:57,754:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:04:57,754:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:04:57,755:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.0': [<numba.core.ir.Assign object at 0x7f01cd5c27d0>],
             '$102load_method.1': [<numba.core.ir.Assign object at 0x7f01cd5b7290>],
             '$106load_attr.3': [<numba.core.ir.Assign object at 0x7f01cd5c7190>],
             '$112call_function_kw.6': [<numba.core.ir.Assign object at 0x7f01cd5c75d0>],
             '$118binary_subtract.9': [<numba.core.ir.Assign object at 0x7f01cd5c77d0>],
             '$120binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f01cd5c7890>],
             '$124call_method.12': [<numba.core.ir.Assign object at 0x7f01cd5c7a90>],
             '$126load_method.13': [<numba.core.ir.Assign object at 0x7f01cd5c7b50>],
             '$132call_method.16': [<numba.core.ir.Assign object at 0x7f01cd5c7e10>],
             '$134load_attr.17': [<numba.core.ir.Assign object at 0x7f01cd5c7f10>],
             '$136load_global.18': [<numba.core.ir.Assign object at 0x7f01cd5ca050>],
             '$138load_method.19': [<numba.core.ir.Assign object at 0x7f01cd5ca150>],
             '$142load_attr.21': [<numba.core.ir.Assign object at 0x7f01cd5ca310>],
             '$148call_function_kw.24': [<numba.core.ir.Assign object at 0x7f01cd5ca750>],
             '$154binary_subtract.27': [<numba.core.ir.Assign object at 0x7f01cd5ca950>],
             '$156binary_true_divide.28': [<numba.core.ir.Assign object at 0x7f01cd5caa50>],
             '$160call_method.30': [<numba.core.ir.Assign object at 0x7f01cd5cac90>],
             '$162load_method.31': [<numba.core.ir.Assign object at 0x7f01cd5cad50>],
             '$168call_method.34': [<numba.core.ir.Assign object at 0x7f01cd5d0050>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x7f01cd5b7b10>],
             '$170binary_add.35': [<numba.core.ir.Assign object at 0x7f01cd5d0110>],
             '$174load_method.37': [<numba.core.ir.Assign object at 0x7f01cd5d0310>],
             '$176call_method.38': [<numba.core.ir.Assign object at 0x7f01cd5d0410>],
             '$182binary_subtract.41': [<numba.core.ir.Assign object at 0x7f01cd5d0690>],
             '$188binary_subtract.44': [<numba.core.ir.Assign object at 0x7f01cd5d0950>],
             '$18load_method.1': [<numba.core.ir.Assign object at 0x7f01cd5b7c10>],
             '$190binary_multiply.45': [<numba.core.ir.Assign object at 0x7f01cd5d0a50>],
             '$192binary_true_divide.46': [<numba.core.ir.Assign object at 0x7f01cd5d0b50>],
             '$194binary_subtract.47': [<numba.core.ir.Assign object at 0x7f01cd5d0c50>],
             '$202binary_subtract.2': [<numba.core.ir.Assign object at 0x7f01cd5d0d10>],
             '$210load_global.0': [<numba.core.ir.Assign object at 0x7f01cd5d0fd0>],
             '$212load_method.1': [<numba.core.ir.Assign object at 0x7f01cd5d2150>],
             '$218call_method.4': [<numba.core.ir.Assign object at 0x7f01cd5d2410>],
             '$224return_value.1': [<numba.core.ir.Assign object at 0x7f01cd5d2650>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x7f01cd5b7dd0>],
             '$28call_function_kw.6': [<numba.core.ir.Assign object at 0x7f01cd5bf290>],
             '$32binary_true_divide.8': [<numba.core.ir.Assign object at 0x7f01cd5bf390>],
             '$36call_method.10': [<numba.core.ir.Assign object at 0x7f01cd5bf590>],
             '$38load_method.11': [<numba.core.ir.Assign object at 0x7f01cd5bf650>],
             '$44call_method.14': [<numba.core.ir.Assign object at 0x7f01cd5bf910>],
             '$46load_attr.15': [<numba.core.ir.Assign object at 0x7f01cd5bfa10>],
             '$48load_global.16': [<numba.core.ir.Assign object at 0x7f01cd5bfb10>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01cd64df90>],
             '$50load_method.17': [<numba.core.ir.Assign object at 0x7f01cd5bfc10>],
             '$54load_attr.19': [<numba.core.ir.Assign object at 0x7f01cd5bfdd0>],
             '$60call_function_kw.22': [<numba.core.ir.Assign object at 0x7f01cd5b7210>],
             '$64binary_true_divide.24': [<numba.core.ir.Assign object at 0x7f01cd5aaf90>],
             '$68call_method.26': [<numba.core.ir.Assign object at 0x7f01cd5c2290>],
             '$70load_method.27': [<numba.core.ir.Assign object at 0x7f01cd5c2350>],
             '$76call_method.30': [<numba.core.ir.Assign object at 0x7f01cd5c2610>],
             '$78binary_add.31': [<numba.core.ir.Assign object at 0x7f01cd5c2710>],
             '$82load_method.33': [<numba.core.ir.Assign object at 0x7f01cd5c2910>],
             '$84call_method.34': [<numba.core.ir.Assign object at 0x7f01cd5c2a10>],
             '$8binary_subscr.3': [<numba.core.ir.Assign object at 0x7f01cd5d2d50>],
             '$90binary_multiply.37': [<numba.core.ir.Assign object at 0x7f01cd5c2c50>],
             '$92binary_true_divide.38': [<numba.core.ir.Assign object at 0x7f01cd5c2d50>],
             '$94binary_subtract.39': [<numba.core.ir.Assign object at 0x7f01cd5c2e50>],
             '$const108.4': [<numba.core.ir.Assign object at 0x7f01cd5c7250>],
             '$const116.8': [<numba.core.ir.Assign object at 0x7f01cd5c76d0>],
             '$const128.14': [<numba.core.ir.Assign object at 0x7f01cd5c7c10>],
             '$const144.22': [<numba.core.ir.Assign object at 0x7f01cd5ca410>],
             '$const152.26': [<numba.core.ir.Assign object at 0x7f01cd5ca850>],
             '$const164.32': [<numba.core.ir.Assign object at 0x7f01cd5cae10>],
             '$const180.40': [<numba.core.ir.Assign object at 0x7f01cd5d0590>],
             '$const186.43': [<numba.core.ir.Assign object at 0x7f01cd5d0850>],
             '$const216.3': [<numba.core.ir.Assign object at 0x7f01cd5d22d0>],
             '$const24.4': [<numba.core.ir.Assign object at 0x7f01cd5b7ed0>],
             '$const40.12': [<numba.core.ir.Assign object at 0x7f01cd5bf710>],
             '$const56.20': [<numba.core.ir.Assign object at 0x7f01cd5bfed0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7f01cd5b77d0>],
             '$const72.28': [<numba.core.ir.Assign object at 0x7f01cd5c2410>],
             'bias': [<numba.core.ir.Assign object at 0x7f01cd5b7410>],
             'cent_distx': [<numba.core.ir.Assign object at 0x7f01cd5d0dd0>],
             'distx': [<numba.core.ir.Assign object at 0x7f01cd5b7350>],
             'exp_distx': [<numba.core.ir.Assign object at 0x7f01cd5c2f10>,
                           <numba.core.ir.Assign object at 0x7f01cd5c2ed0>],
             'n': [<numba.core.ir.Assign object at 0x7f01cd5b78d0>]})
2020-06-11 12:04:57,755:DEBUG:SSA violators {'exp_distx'}
2020-06-11 12:04:57,755:DEBUG:Fix SSA violator on var exp_distx
2020-06-11 12:04:57,755:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,755:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,755:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,755:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:04:57,756:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:04:57,756:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:04:57,756:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:04:57,756:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:04:57,756:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:04:57,756:DEBUG:==== SSA block rewrite pass on 16
2020-06-11 12:04:57,756:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,756:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,756:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:04:57,756:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,756:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:04:57,756:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,756:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:04:57,756:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,756:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:04:57,756:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:04:57,756:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,756:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:04:57,756:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,756:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:04:57,756:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,756:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:04:57,756:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,756:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:04:57,757:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,757:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:04:57,757:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:04:57,757:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,757:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:04:57,757:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,757:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,757:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:04:57,757:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:04:57,757:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:04:57,757:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:04:57,757:DEBUG:first assign: exp_distx
2020-06-11 12:04:57,757:DEBUG:replaced with: exp_distx = $94binary_subtract.39
2020-06-11 12:04:57,757:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,757:DEBUG:==== SSA block rewrite pass on 100
2020-06-11 12:04:57,757:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,757:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,757:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:04:57,757:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,757:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:04:57,757:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,757:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:04:57,757:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:04:57,757:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:04:57,758:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:04:57,758:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:04:57,758:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:04:57,758:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,758:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:04:57,758:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,758:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:04:57,758:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:04:57,758:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:04:57,758:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:04:57,758:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:04:57,758:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:04:57,758:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:04:57,758:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,758:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,758:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:04:57,758:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:04:57,758:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:04:57,759:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:04:57,759:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:04:57,759:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:04:57,759:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:04:57,759:DEBUG:on stmt: exp_distx = $194binary_subtract.47
2020-06-11 12:04:57,759:DEBUG:replaced with: exp_distx.1 = $194binary_subtract.47
2020-06-11 12:04:57,759:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,759:DEBUG:==== SSA block rewrite pass on 198
2020-06-11 12:04:57,759:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,759:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:04:57,759:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:04:57,759:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:04:57,759:DEBUG:==== SSA block rewrite pass on 210
2020-06-11 12:04:57,759:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,759:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,759:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:04:57,759:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:04:57,759:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:04:57,759:DEBUG:on stmt: jump 222
2020-06-11 12:04:57,759:DEBUG:==== SSA block rewrite pass on 222
2020-06-11 12:04:57,759:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd5aae90>
2020-06-11 12:04:57,759:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:04:57,759:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:04:57,760:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {16: [<numba.core.ir.Assign object at 0x7f01cd569e50>],
             100: [<numba.core.ir.Assign object at 0x7f01cd569d90>]})
2020-06-11 12:04:57,760:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,760:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,760:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:04:57,760:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:04:57,760:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:04:57,760:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:04:57,760:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:04:57,760:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:04:57,760:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:04:57,760:DEBUG:==== SSA block rewrite pass on 16
2020-06-11 12:04:57,760:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,760:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,760:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:04:57,760:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,760:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:04:57,760:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,760:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:04:57,761:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:04:57,761:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:04:57,761:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:04:57,761:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,761:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:04:57,761:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,761:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:04:57,761:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:04:57,761:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:04:57,761:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:04:57,761:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:04:57,761:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,761:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,761:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:04:57,761:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:04:57,761:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:04:57,762:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:04:57,762:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,762:DEBUG:==== SSA block rewrite pass on 100
2020-06-11 12:04:57,762:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,762:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,762:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:04:57,762:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,762:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:04:57,762:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,762:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:04:57,762:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:04:57,762:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:04:57,762:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,762:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:04:57,762:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:04:57,762:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,762:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:04:57,762:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,762:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:04:57,762:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,763:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:04:57,763:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:04:57,763:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:04:57,763:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:04:57,763:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:04:57,763:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,763:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:04:57,763:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:04:57,763:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:04:57,763:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:04:57,763:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:04:57,763:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,763:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:04:57,763:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:04:57,763:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:04:57,763:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:04:57,763:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:04:57,763:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:04:57,763:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:04:57,763:DEBUG:on stmt: exp_distx.1 = $194binary_subtract.47
2020-06-11 12:04:57,764:DEBUG:on stmt: jump 198
2020-06-11 12:04:57,764:DEBUG:==== SSA block rewrite pass on 198
2020-06-11 12:04:57,764:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,764:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:04:57,764:DEBUG:find_def var='exp_distx' stmt=$202binary_subtract.2 = distx - exp_distx
2020-06-11 12:04:57,764:DEBUG:find_def_from_top label 198
2020-06-11 12:04:57,764:DEBUG:insert phi node exp_distx.2 = phi(incoming_values=[], incoming_blocks=[]) at 198
2020-06-11 12:04:57,764:DEBUG:find_def_from_bottom label 16
2020-06-11 12:04:57,764:DEBUG:incoming_def exp_distx = $94binary_subtract.39
2020-06-11 12:04:57,764:DEBUG:find_def_from_bottom label 100
2020-06-11 12:04:57,764:DEBUG:incoming_def exp_distx.1 = $194binary_subtract.47
2020-06-11 12:04:57,764:DEBUG:replaced with: $202binary_subtract.2 = distx - exp_distx.2
2020-06-11 12:04:57,764:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:04:57,764:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:04:57,764:DEBUG:==== SSA block rewrite pass on 210
2020-06-11 12:04:57,764:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,764:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,764:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:04:57,764:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:04:57,764:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:04:57,764:DEBUG:on stmt: jump 222
2020-06-11 12:04:57,764:DEBUG:==== SSA block rewrite pass on 222
2020-06-11 12:04:57,765:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd569750>
2020-06-11 12:04:57,765:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:04:57,765:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:04:57,765:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,766:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx.1 = $194binary_subtract.47     ['$194binary_subtract.47', 'exp_distx.1']
    jump 198                                 []
label 198:
    exp_distx.2 = phi(incoming_values=[Var(exp_distx, dcorr.py:244), Var(exp_distx.1, dcorr.py:250)], incoming_blocks=[16, 100]) ['exp_distx', 'exp_distx.1', 'exp_distx.2']
    $202binary_subtract.2 = distx - exp_distx.2 ['$202binary_subtract.2', 'distx', 'exp_distx.2']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:04:57,766:DEBUG:================================================================================
2020-06-11 12:04:57,771:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1972)
           2	LOAD_FAST(arg=1, lineno=1972)
           4	LOAD_CONST(arg=1, lineno=1972)
           6	COMPARE_OP(arg=0, lineno=1972)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=1972)
          10	LOAD_GLOBAL(arg=0, lineno=1973)
          12	LOAD_CONST(arg=2, lineno=1973)
          14	CALL_FUNCTION(arg=1, lineno=1973)
          16	RAISE_VARARGS(arg=1, lineno=1973)
>         18	LOAD_GLOBAL(arg=1, lineno=1974)
          20	LOAD_METHOD(arg=2, lineno=1974)
          22	LOAD_FAST(arg=0, lineno=1974)
          24	CALL_METHOD(arg=1, lineno=1974)
          26	STORE_FAST(arg=2, lineno=1974)
          28	LOAD_FAST(arg=2, lineno=1975)
          30	LOAD_METHOD(arg=3, lineno=1975)
          32	CALL_METHOD(arg=0, lineno=1975)
          34	STORE_FAST(arg=3, lineno=1975)
          36	LOAD_FAST(arg=3, lineno=1976)
          38	LOAD_ATTR(arg=4, lineno=1976)
          40	LOAD_CONST(arg=1, lineno=1976)
          42	BINARY_SUBSCR(arg=None, lineno=1976)
          44	STORE_FAST(arg=4, lineno=1976)
          46	LOAD_FAST(arg=1, lineno=1977)
          48	LOAD_CONST(arg=1, lineno=1977)
          50	COMPARE_OP(arg=2, lineno=1977)
          52	POP_JUMP_IF_FALSE(arg=70, lineno=1977)
          54	LOAD_GLOBAL(arg=1, lineno=1978)
          56	LOAD_ATTR(arg=5, lineno=1978)
          58	LOAD_CONST(arg=1, lineno=1978)
          60	LOAD_FAST(arg=2, lineno=1978)
          62	LOAD_ATTR(arg=6, lineno=1978)
          64	LOAD_CONST(arg=3, lineno=1978)
          66	CALL_FUNCTION_KW(arg=2, lineno=1978)
          68	RETURN_VALUE(arg=None, lineno=1978)
>         70	LOAD_FAST(arg=1, lineno=1979)
          72	LOAD_CONST(arg=4, lineno=1979)
          74	COMPARE_OP(arg=2, lineno=1979)
          76	POP_JUMP_IF_FALSE(arg=88, lineno=1979)
          78	LOAD_GLOBAL(arg=1, lineno=1980)
          80	LOAD_METHOD(arg=7, lineno=1980)
          82	LOAD_FAST(arg=3, lineno=1980)
          84	CALL_METHOD(arg=1, lineno=1980)
          86	RETURN_VALUE(arg=None, lineno=1980)
>         88	LOAD_GLOBAL(arg=1, lineno=1982)
          90	LOAD_ATTR(arg=5, lineno=1982)
          92	LOAD_FAST(arg=4, lineno=1982)
          94	LOAD_FAST(arg=1, lineno=1982)
          96	BINARY_MULTIPLY(arg=None, lineno=1982)
          98	LOAD_FAST(arg=2, lineno=1982)
         100	LOAD_ATTR(arg=6, lineno=1982)
         102	LOAD_CONST(arg=3, lineno=1982)
         104	CALL_FUNCTION_KW(arg=2, lineno=1982)
         106	STORE_FAST(arg=5, lineno=1982)
         108	SETUP_LOOP(arg=44, lineno=1983)
         110	LOAD_GLOBAL(arg=8, lineno=1983)
         112	LOAD_FAST(arg=4, lineno=1983)
         114	CALL_FUNCTION(arg=1, lineno=1983)
         116	GET_ITER(arg=None, lineno=1983)
>        118	FOR_ITER(arg=32, lineno=1983)
         120	STORE_FAST(arg=6, lineno=1983)
         122	LOAD_FAST(arg=3, lineno=1984)
         124	LOAD_FAST(arg=6, lineno=1984)
         126	BINARY_SUBSCR(arg=None, lineno=1984)
         128	LOAD_FAST(arg=5, lineno=1984)
         130	LOAD_FAST(arg=6, lineno=1984)
         132	LOAD_FAST(arg=1, lineno=1984)
         134	BINARY_MULTIPLY(arg=None, lineno=1984)
         136	LOAD_FAST(arg=6, lineno=1984)
         138	LOAD_CONST(arg=4, lineno=1984)
         140	BINARY_ADD(arg=None, lineno=1984)
         142	LOAD_FAST(arg=1, lineno=1984)
         144	BINARY_MULTIPLY(arg=None, lineno=1984)
         146	BUILD_SLICE(arg=2, lineno=1984)
         148	STORE_SUBSCR(arg=None, lineno=1984)
         150	JUMP_ABSOLUTE(arg=118, lineno=1984)
>        152	POP_BLOCK(arg=None, lineno=1984)
>        154	LOAD_FAST(arg=5, lineno=1985)
         156	RETURN_VALUE(arg=None, lineno=1985)
         158	LOAD_CONST(arg=0, lineno=1985)
         160	RETURN_VALUE(arg=None, lineno=1985)
2020-06-11 12:04:57,771:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,771:DEBUG:stack: []
2020-06-11 12:04:57,771:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1972)
2020-06-11 12:04:57,771:DEBUG:stack []
2020-06-11 12:04:57,771:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1972)
2020-06-11 12:04:57,771:DEBUG:stack []
2020-06-11 12:04:57,771:DEBUG:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1972)
2020-06-11 12:04:57,771:DEBUG:stack ['$repeats2.0']
2020-06-11 12:04:57,771:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=1972)
2020-06-11 12:04:57,771:DEBUG:stack ['$repeats2.0', '$const4.1']
2020-06-11 12:04:57,772:DEBUG:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=1972)
2020-06-11 12:04:57,772:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:04:57,772:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,772:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
2020-06-11 12:04:57,772:DEBUG:stack: []
2020-06-11 12:04:57,772:DEBUG:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1973)
2020-06-11 12:04:57,772:DEBUG:stack []
2020-06-11 12:04:57,772:DEBUG:dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=1973)
2020-06-11 12:04:57,772:DEBUG:stack ['$10load_global.0']
2020-06-11 12:04:57,772:DEBUG:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1973)
2020-06-11 12:04:57,772:DEBUG:stack ['$10load_global.0', '$const12.1']
2020-06-11 12:04:57,772:DEBUG:dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=1973)
2020-06-11 12:04:57,772:DEBUG:stack ['$14call_function.2']
2020-06-11 12:04:57,772:DEBUG:end state. edges=[]
2020-06-11 12:04:57,772:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=0)])
2020-06-11 12:04:57,772:DEBUG:stack: []
2020-06-11 12:04:57,772:DEBUG:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=1974)
2020-06-11 12:04:57,772:DEBUG:stack []
2020-06-11 12:04:57,772:DEBUG:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=1974)
2020-06-11 12:04:57,772:DEBUG:stack ['$18load_global.0']
2020-06-11 12:04:57,772:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1974)
2020-06-11 12:04:57,773:DEBUG:stack ['$20load_method.1']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=1974)
2020-06-11 12:04:57,773:DEBUG:stack ['$20load_method.1', '$a22.2']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=26, inst=STORE_FAST(arg=2, lineno=1974)
2020-06-11 12:04:57,773:DEBUG:stack ['$24call_method.3']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=1975)
2020-06-11 12:04:57,773:DEBUG:stack []
2020-06-11 12:04:57,773:DEBUG:dispatch pc=30, inst=LOAD_METHOD(arg=3, lineno=1975)
2020-06-11 12:04:57,773:DEBUG:stack ['$asa28.4']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=32, inst=CALL_METHOD(arg=0, lineno=1975)
2020-06-11 12:04:57,773:DEBUG:stack ['$30load_method.5']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=34, inst=STORE_FAST(arg=3, lineno=1975)
2020-06-11 12:04:57,773:DEBUG:stack ['$32call_method.6']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=1976)
2020-06-11 12:04:57,773:DEBUG:stack []
2020-06-11 12:04:57,773:DEBUG:dispatch pc=38, inst=LOAD_ATTR(arg=4, lineno=1976)
2020-06-11 12:04:57,773:DEBUG:stack ['$aravel36.7']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1976)
2020-06-11 12:04:57,773:DEBUG:stack ['$38load_attr.8']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=1976)
2020-06-11 12:04:57,773:DEBUG:stack ['$38load_attr.8', '$const40.9']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=44, inst=STORE_FAST(arg=4, lineno=1976)
2020-06-11 12:04:57,773:DEBUG:stack ['$42binary_subscr.10']
2020-06-11 12:04:57,773:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=1977)
2020-06-11 12:04:57,774:DEBUG:stack []
2020-06-11 12:04:57,774:DEBUG:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1977)
2020-06-11 12:04:57,774:DEBUG:stack ['$repeats46.11']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=50, inst=COMPARE_OP(arg=2, lineno=1977)
2020-06-11 12:04:57,774:DEBUG:stack ['$repeats46.11', '$const48.12']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=70, lineno=1977)
2020-06-11 12:04:57,774:DEBUG:stack ['$50compare_op.13']
2020-06-11 12:04:57,774:DEBUG:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,774:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:04:57,774:DEBUG:stack: []
2020-06-11 12:04:57,774:DEBUG:dispatch pc=54, inst=LOAD_GLOBAL(arg=1, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack []
2020-06-11 12:04:57,774:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=5, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack ['$54load_global.0']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack ['$56load_attr.1']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack ['$56load_attr.1', '$const58.2']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=62, inst=LOAD_ATTR(arg=6, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack ['$56load_attr.1', '$const58.2', '$asa60.3']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=3, lineno=1978)
2020-06-11 12:04:57,774:DEBUG:stack ['$56load_attr.1', '$const58.2', '$62load_attr.4']
2020-06-11 12:04:57,774:DEBUG:dispatch pc=66, inst=CALL_FUNCTION_KW(arg=2, lineno=1978)
2020-06-11 12:04:57,775:DEBUG:stack ['$56load_attr.1', '$const58.2', '$62load_attr.4', '$const64.5']
2020-06-11 12:04:57,775:DEBUG:dispatch pc=68, inst=RETURN_VALUE(arg=None, lineno=1978)
2020-06-11 12:04:57,775:DEBUG:stack ['$66call_function_kw.6']
2020-06-11 12:04:57,775:DEBUG:end state. edges=[]
2020-06-11 12:04:57,775:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:04:57,775:DEBUG:stack: []
2020-06-11 12:04:57,775:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=1, lineno=1979)
2020-06-11 12:04:57,775:DEBUG:stack []
2020-06-11 12:04:57,775:DEBUG:dispatch pc=72, inst=LOAD_CONST(arg=4, lineno=1979)
2020-06-11 12:04:57,775:DEBUG:stack ['$repeats70.0']
2020-06-11 12:04:57,775:DEBUG:dispatch pc=74, inst=COMPARE_OP(arg=2, lineno=1979)
2020-06-11 12:04:57,775:DEBUG:stack ['$repeats70.0', '$const72.1']
2020-06-11 12:04:57,775:DEBUG:dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1979)
2020-06-11 12:04:57,775:DEBUG:stack ['$74compare_op.2']
2020-06-11 12:04:57,775:DEBUG:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,775:DEBUG:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:04:57,775:DEBUG:stack: []
2020-06-11 12:04:57,775:DEBUG:dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1980)
2020-06-11 12:04:57,775:DEBUG:stack []
2020-06-11 12:04:57,775:DEBUG:dispatch pc=80, inst=LOAD_METHOD(arg=7, lineno=1980)
2020-06-11 12:04:57,775:DEBUG:stack ['$78load_global.0']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=1980)
2020-06-11 12:04:57,776:DEBUG:stack ['$80load_method.1']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1980)
2020-06-11 12:04:57,776:DEBUG:stack ['$80load_method.1', '$aravel82.2']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=1980)
2020-06-11 12:04:57,776:DEBUG:stack ['$84call_method.3']
2020-06-11 12:04:57,776:DEBUG:end state. edges=[]
2020-06-11 12:04:57,776:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:04:57,776:DEBUG:stack: []
2020-06-11 12:04:57,776:DEBUG:dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack []
2020-06-11 12:04:57,776:DEBUG:dispatch pc=90, inst=LOAD_ATTR(arg=5, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$88load_global.0']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$90load_attr.1']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$90load_attr.1', '$n92.2']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=96, inst=BINARY_MULTIPLY(arg=None, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$90load_attr.1', '$n92.2', '$repeats94.3']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=98, inst=LOAD_FAST(arg=2, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=100, inst=LOAD_ATTR(arg=6, lineno=1982)
2020-06-11 12:04:57,776:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$asa98.5']
2020-06-11 12:04:57,776:DEBUG:dispatch pc=102, inst=LOAD_CONST(arg=3, lineno=1982)
2020-06-11 12:04:57,777:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$100load_attr.6']
2020-06-11 12:04:57,777:DEBUG:dispatch pc=104, inst=CALL_FUNCTION_KW(arg=2, lineno=1982)
2020-06-11 12:04:57,777:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$100load_attr.6', '$const102.7']
2020-06-11 12:04:57,777:DEBUG:dispatch pc=106, inst=STORE_FAST(arg=5, lineno=1982)
2020-06-11 12:04:57,777:DEBUG:stack ['$104call_function_kw.8']
2020-06-11 12:04:57,777:DEBUG:end state. edges=[Edge(pc=108, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,777:DEBUG:pending: deque([State(pc_initial=108 nstack_initial=0)])
2020-06-11 12:04:57,777:DEBUG:stack: []
2020-06-11 12:04:57,777:DEBUG:dispatch pc=108, inst=SETUP_LOOP(arg=44, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack []
2020-06-11 12:04:57,777:DEBUG:dispatch pc=110, inst=LOAD_GLOBAL(arg=8, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack []
2020-06-11 12:04:57,777:DEBUG:dispatch pc=112, inst=LOAD_FAST(arg=4, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack ['$110load_global.0']
2020-06-11 12:04:57,777:DEBUG:dispatch pc=114, inst=CALL_FUNCTION(arg=1, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack ['$110load_global.0', '$n112.1']
2020-06-11 12:04:57,777:DEBUG:dispatch pc=116, inst=GET_ITER(arg=None, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack ['$114call_function.2']
2020-06-11 12:04:57,777:DEBUG:end state. edges=[Edge(pc=118, stack=('$116get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,777:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:04:57,777:DEBUG:stack: ['$phi118.0']
2020-06-11 12:04:57,777:DEBUG:dispatch pc=118, inst=FOR_ITER(arg=32, lineno=1983)
2020-06-11 12:04:57,777:DEBUG:stack ['$phi118.0']
2020-06-11 12:04:57,778:DEBUG:end state. edges=[Edge(pc=152, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi118.0', '$118for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,778:DEBUG:pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=120 nstack_initial=2)])
2020-06-11 12:04:57,778:DEBUG:stack: []
2020-06-11 12:04:57,778:DEBUG:dispatch pc=152, inst=POP_BLOCK(arg=None, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack []
2020-06-11 12:04:57,778:DEBUG:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,778:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=2), State(pc_initial=154 nstack_initial=0)])
2020-06-11 12:04:57,778:DEBUG:stack: ['$phi120.0', '$phi120.1']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=120, inst=STORE_FAST(arg=6, lineno=1983)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$phi120.1']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=122, inst=LOAD_FAST(arg=3, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$aravel122.2']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$aravel122.2', '$i124.3']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=5, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$126binary_subscr.4']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$i130.6']
2020-06-11 12:04:57,778:DEBUG:dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=1984)
2020-06-11 12:04:57,778:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$i130.6', '$repeats132.7']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=138, inst=LOAD_CONST(arg=4, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$i136.9']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=140, inst=BINARY_ADD(arg=None, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$i136.9', '$const138.10']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=1, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$140binary_add.11']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=144, inst=BINARY_MULTIPLY(arg=None, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$140binary_add.11', '$repeats142.12']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$144binary_multiply.13']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=148, inst=STORE_SUBSCR(arg=None, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$146build_slice.15']
2020-06-11 12:04:57,779:DEBUG:dispatch pc=150, inst=JUMP_ABSOLUTE(arg=118, lineno=1984)
2020-06-11 12:04:57,779:DEBUG:stack ['$phi120.0']
2020-06-11 12:04:57,779:DEBUG:end state. edges=[Edge(pc=118, stack=('$phi120.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,779:DEBUG:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:04:57,779:DEBUG:stack: []
2020-06-11 12:04:57,779:DEBUG:dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1985)
2020-06-11 12:04:57,779:DEBUG:stack []
2020-06-11 12:04:57,779:DEBUG:dispatch pc=156, inst=RETURN_VALUE(arg=None, lineno=1985)
2020-06-11 12:04:57,780:DEBUG:stack ['$to_return154.0']
2020-06-11 12:04:57,780:DEBUG:end state. edges=[]
2020-06-11 12:04:57,780:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:04:57,780:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,780:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=1): {'$phi118.0'},
             State(pc_initial=120 nstack_initial=2): {'$phi120.1'},
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set()})
2020-06-11 12:04:57,780:DEBUG:defmap: {'$phi118.0': State(pc_initial=108 nstack_initial=0),
 '$phi120.1': State(pc_initial=118 nstack_initial=1)}
2020-06-11 12:04:57,780:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0)),
                           ('$phi120.0',
                            State(pc_initial=120 nstack_initial=2))},
             '$phi120.0': {('$phi118.0',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:04:57,781:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0)),
                           ('$phi118.0',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:04:57,781:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:04:57,781:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:04:57,781:DEBUG:keep phismap: {'$phi118.0': {('$116get_iter.3', State(pc_initial=108 nstack_initial=0))},
 '$phi120.1': {('$118for_iter.2', State(pc_initial=118 nstack_initial=1))}}
2020-06-11 12:04:57,781:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=108 nstack_initial=0): {'$phi118.0': '$116get_iter.3'},
             State(pc_initial=118 nstack_initial=1): {'$phi120.1': '$118for_iter.2'}})
2020-06-11 12:04:57,781:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,781:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$repeats2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$repeats2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
2020-06-11 12:04:57,781:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,781:DEBUG:block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'item': '$18load_global.0', 'res': '$20load_method.1'}), (22, {'res': '$a22.2'}), (24, {'func': '$20load_method.1', 'args': ['$a22.2'], 'res': '$24call_method.3'}), (26, {'value': '$24call_method.3'}), (28, {'res': '$asa28.4'}), (30, {'item': '$asa28.4', 'res': '$30load_method.5'}), (32, {'func': '$30load_method.5', 'args': [], 'res': '$32call_method.6'}), (34, {'value': '$32call_method.6'}), (36, {'res': '$aravel36.7'}), (38, {'item': '$aravel36.7', 'res': '$38load_attr.8'}), (40, {'res': '$const40.9'}), (42, {'index': '$const40.9', 'target': '$38load_attr.8', 'res': '$42binary_subscr.10'}), (44, {'value': '$42binary_subscr.10'}), (46, {'res': '$repeats46.11'}), (48, {'res': '$const48.12'}), (50, {'lhs': '$repeats46.11', 'rhs': '$const48.12', 'res': '$50compare_op.13'}), (52, {'pred': '$50compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 70: ()})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'item': '$54load_global.0', 'res': '$56load_attr.1'}), (58, {'res': '$const58.2'}), (60, {'res': '$asa60.3'}), (62, {'item': '$asa60.3', 'res': '$62load_attr.4'}), (64, {'res': '$const64.5'}), (66, {'func': '$56load_attr.1', 'args': ['$const58.2', '$62load_attr.4'], 'names': '$const64.5', 'res': '$66call_function_kw.6'}), (68, {'retval': '$66call_function_kw.6', 'castval': '$68return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$repeats70.0'}), (72, {'res': '$const72.1'}), (74, {'lhs': '$repeats70.0', 'rhs': '$const72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 88: ()})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'item': '$78load_global.0', 'res': '$80load_method.1'}), (82, {'res': '$aravel82.2'}), (84, {'func': '$80load_method.1', 'args': ['$aravel82.2'], 'res': '$84call_method.3'}), (86, {'retval': '$84call_method.3', 'castval': '$86return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$88load_global.0'}), (90, {'item': '$88load_global.0', 'res': '$90load_attr.1'}), (92, {'res': '$n92.2'}), (94, {'res': '$repeats94.3'}), (96, {'lhs': '$n92.2', 'rhs': '$repeats94.3', 'res': '$96binary_multiply.4'}), (98, {'res': '$asa98.5'}), (100, {'item': '$asa98.5', 'res': '$100load_attr.6'}), (102, {'res': '$const102.7'}), (104, {'func': '$90load_attr.1', 'args': ['$96binary_multiply.4', '$100load_attr.6'], 'names': '$const102.7', 'res': '$104call_function_kw.8'}), (106, {'value': '$104call_function_kw.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ()})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=108 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$110load_global.0'}), (112, {'res': '$n112.1'}), (114, {'func': '$110load_global.0', 'args': ['$n112.1'], 'res': '$114call_function.2'}), (116, {'value': '$114call_function.2', 'res': '$116get_iter.3'})), outgoing_phis={'$phi118.0': '$116get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: ('$116get_iter.3',)})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=118 nstack_initial=1):
AdaptBlockInfo(insts=((118, {'iterator': '$phi118.0', 'pair': '$118for_iter.1', 'indval': '$118for_iter.2', 'pred': '$118for_iter.3'}),), outgoing_phis={'$phi120.1': '$118for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={152: (), 120: ('$phi118.0', '$118for_iter.2')})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=120 nstack_initial=2):
AdaptBlockInfo(insts=((120, {'value': '$phi120.1'}), (122, {'res': '$aravel122.2'}), (124, {'res': '$i124.3'}), (126, {'index': '$i124.3', 'target': '$aravel122.2', 'res': '$126binary_subscr.4'}), (128, {'res': '$to_return128.5'}), (130, {'res': '$i130.6'}), (132, {'res': '$repeats132.7'}), (134, {'lhs': '$i130.6', 'rhs': '$repeats132.7', 'res': '$134binary_multiply.8'}), (136, {'res': '$i136.9'}), (138, {'res': '$const138.10'}), (140, {'lhs': '$i136.9', 'rhs': '$const138.10', 'res': '$140binary_add.11'}), (142, {'res': '$repeats142.12'}), (144, {'lhs': '$140binary_add.11', 'rhs': '$repeats142.12', 'res': '$144binary_multiply.13'}), (146, {'start': '$134binary_multiply.8', 'stop': '$144binary_multiply.13', 'step': None, 'res': '$146build_slice.15', 'slicevar': '$146build_slice.14'}), (148, {'target': '$to_return128.5', 'index': '$146build_slice.15', 'value': '$126binary_subscr.4'}), (150, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={118: ('$phi120.0',)})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={154: ()})
2020-06-11 12:04:57,782:DEBUG:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$to_return154.0'}), (156, {'retval': '$to_return154.0', 'castval': '$156return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,784:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = getitem(value=$38load_attr.8, index=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:04:57,796:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,797:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise <class 'ValueError'>('negative dimensions are not allowed') []
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:04:57,797:DEBUG:================================================================================
2020-06-11 12:04:57,797:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,797:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,797:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:57,797:DEBUG:on stmt: repeats = arg(1, name=repeats)
2020-06-11 12:04:57,797:DEBUG:on stmt: $const4.1 = const(int, 0)
2020-06-11 12:04:57,798:DEBUG:on stmt: $6compare_op.2 = repeats < $const4.1
2020-06-11 12:04:57,798:DEBUG:on stmt: branch $6compare_op.2, 10, 18
2020-06-11 12:04:57,798:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:04:57,798:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,798:DEBUG:on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,798:DEBUG:on stmt: $const12.1 = const(str, negative dimensions are not allowed)
2020-06-11 12:04:57,798:DEBUG:on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None)
2020-06-11 12:04:57,798:DEBUG:on stmt: raise <class 'ValueError'>('negative dimensions are not allowed')
2020-06-11 12:04:57,798:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:04:57,798:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,798:DEBUG:on stmt: $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,798:DEBUG:on stmt: $20load_method.1 = getattr(value=$18load_global.0, attr=asarray)
2020-06-11 12:04:57,798:DEBUG:on stmt: $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None)
2020-06-11 12:04:57,798:DEBUG:on stmt: asa = $24call_method.3
2020-06-11 12:04:57,798:DEBUG:on stmt: $30load_method.5 = getattr(value=asa, attr=ravel)
2020-06-11 12:04:57,798:DEBUG:on stmt: $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None)
2020-06-11 12:04:57,798:DEBUG:on stmt: aravel = $32call_method.6
2020-06-11 12:04:57,798:DEBUG:on stmt: $38load_attr.8 = getattr(value=aravel, attr=shape)
2020-06-11 12:04:57,798:DEBUG:on stmt: $const40.9 = const(int, 0)
2020-06-11 12:04:57,798:DEBUG:on stmt: $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9)
2020-06-11 12:04:57,798:DEBUG:on stmt: n = $42binary_subscr.10
2020-06-11 12:04:57,798:DEBUG:on stmt: $const48.12 = const(int, 0)
2020-06-11 12:04:57,799:DEBUG:on stmt: $50compare_op.13 = repeats == $const48.12
2020-06-11 12:04:57,799:DEBUG:on stmt: branch $50compare_op.13, 54, 70
2020-06-11 12:04:57,799:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:04:57,799:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,799:DEBUG:on stmt: $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,799:DEBUG:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=empty)
2020-06-11 12:04:57,799:DEBUG:on stmt: $const58.2 = const(int, 0)
2020-06-11 12:04:57,799:DEBUG:on stmt: $62load_attr.4 = getattr(value=asa, attr=dtype)
2020-06-11 12:04:57,799:DEBUG:on stmt: $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None)
2020-06-11 12:04:57,799:DEBUG:on stmt: $68return_value.7 = cast(value=$66call_function_kw.6)
2020-06-11 12:04:57,799:DEBUG:on stmt: return $68return_value.7
2020-06-11 12:04:57,799:DEBUG:==== SSA block analysis pass on 70
2020-06-11 12:04:57,799:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,799:DEBUG:on stmt: $const72.1 = const(int, 1)
2020-06-11 12:04:57,799:DEBUG:on stmt: $74compare_op.2 = repeats == $const72.1
2020-06-11 12:04:57,799:DEBUG:on stmt: branch $74compare_op.2, 78, 88
2020-06-11 12:04:57,799:DEBUG:==== SSA block analysis pass on 78
2020-06-11 12:04:57,799:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,799:DEBUG:on stmt: $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,799:DEBUG:on stmt: $80load_method.1 = getattr(value=$78load_global.0, attr=copy)
2020-06-11 12:04:57,799:DEBUG:on stmt: $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None)
2020-06-11 12:04:57,799:DEBUG:on stmt: $86return_value.4 = cast(value=$84call_method.3)
2020-06-11 12:04:57,799:DEBUG:on stmt: return $86return_value.4
2020-06-11 12:04:57,799:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:04:57,799:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,799:DEBUG:on stmt: $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:57,800:DEBUG:on stmt: $90load_attr.1 = getattr(value=$88load_global.0, attr=empty)
2020-06-11 12:04:57,800:DEBUG:on stmt: $96binary_multiply.4 = n * repeats
2020-06-11 12:04:57,800:DEBUG:on stmt: $100load_attr.6 = getattr(value=asa, attr=dtype)
2020-06-11 12:04:57,800:DEBUG:on stmt: $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None)
2020-06-11 12:04:57,800:DEBUG:on stmt: to_return = $104call_function_kw.8
2020-06-11 12:04:57,800:DEBUG:on stmt: jump 108
2020-06-11 12:04:57,800:DEBUG:==== SSA block analysis pass on 108
2020-06-11 12:04:57,800:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,800:DEBUG:on stmt: $110load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:57,800:DEBUG:on stmt: $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None)
2020-06-11 12:04:57,800:DEBUG:on stmt: $116get_iter.3 = getiter(value=$114call_function.2)
2020-06-11 12:04:57,800:DEBUG:on stmt: $phi118.0 = $116get_iter.3
2020-06-11 12:04:57,800:DEBUG:on stmt: jump 118
2020-06-11 12:04:57,800:DEBUG:==== SSA block analysis pass on 118
2020-06-11 12:04:57,800:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,800:DEBUG:on stmt: $118for_iter.1 = iternext(value=$phi118.0)
2020-06-11 12:04:57,800:DEBUG:on stmt: $118for_iter.2 = pair_first(value=$118for_iter.1)
2020-06-11 12:04:57,800:DEBUG:on stmt: $118for_iter.3 = pair_second(value=$118for_iter.1)
2020-06-11 12:04:57,800:DEBUG:on stmt: $phi120.1 = $118for_iter.2
2020-06-11 12:04:57,800:DEBUG:on stmt: branch $118for_iter.3, 120, 152
2020-06-11 12:04:57,800:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:04:57,800:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,800:DEBUG:on stmt: i = $phi120.1
2020-06-11 12:04:57,800:DEBUG:on stmt: $126binary_subscr.4 = getitem(value=aravel, index=i)
2020-06-11 12:04:57,800:DEBUG:on stmt: $134binary_multiply.8 = i * repeats
2020-06-11 12:04:57,801:DEBUG:on stmt: $const138.10 = const(int, 1)
2020-06-11 12:04:57,801:DEBUG:on stmt: $140binary_add.11 = i + $const138.10
2020-06-11 12:04:57,801:DEBUG:on stmt: $144binary_multiply.13 = $140binary_add.11 * repeats
2020-06-11 12:04:57,801:DEBUG:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
2020-06-11 12:04:57,801:DEBUG:on stmt: $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None)
2020-06-11 12:04:57,801:DEBUG:on stmt: to_return[$146build_slice.15] = $126binary_subscr.4
2020-06-11 12:04:57,801:DEBUG:on stmt: jump 118
2020-06-11 12:04:57,801:DEBUG:==== SSA block analysis pass on 152
2020-06-11 12:04:57,801:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,801:DEBUG:on stmt: jump 154
2020-06-11 12:04:57,801:DEBUG:==== SSA block analysis pass on 154
2020-06-11 12:04:57,801:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd540d10>
2020-06-11 12:04:57,801:DEBUG:on stmt: $156return_value.1 = cast(value=to_return)
2020-06-11 12:04:57,801:DEBUG:on stmt: return $156return_value.1
2020-06-11 12:04:57,802:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_attr.6': [<numba.core.ir.Assign object at 0x7f01cd538e90>],
             '$104call_function_kw.8': [<numba.core.ir.Assign object at 0x7f01cd53b250>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x7f01cd527c10>],
             '$110load_global.0': [<numba.core.ir.Assign object at 0x7f01cd53b310>],
             '$114call_function.2': [<numba.core.ir.Assign object at 0x7f01cd53b510>],
             '$116get_iter.3': [<numba.core.ir.Assign object at 0x7f01cd53b610>],
             '$118for_iter.1': [<numba.core.ir.Assign object at 0x7f01cd53b890>],
             '$118for_iter.2': [<numba.core.ir.Assign object at 0x7f01cd53b950>],
             '$118for_iter.3': [<numba.core.ir.Assign object at 0x7f01cd53ba10>],
             '$126binary_subscr.4': [<numba.core.ir.Assign object at 0x7f01cd53bed0>],
             '$134binary_multiply.8': [<numba.core.ir.Assign object at 0x7f01cd540290>],
             '$140binary_add.11': [<numba.core.ir.Assign object at 0x7f01cd540510>],
             '$144binary_multiply.13': [<numba.core.ir.Assign object at 0x7f01cd5406d0>],
             '$146build_slice.14': [<numba.core.ir.Assign object at 0x7f01cd540810>],
             '$146build_slice.15': [<numba.core.ir.Assign object at 0x7f01cd5408d0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7f01cd527cd0>],
             '$156return_value.1': [<numba.core.ir.Assign object at 0x7f01cd540b50>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x7f01cd527e90>],
             '$20load_method.1': [<numba.core.ir.Assign object at 0x7f01cd5d2ed0>],
             '$24call_method.3': [<numba.core.ir.Assign object at 0x7f01cd5d0ed0>],
             '$30load_method.5': [<numba.core.ir.Assign object at 0x7f01cd527290>],
             '$32call_method.6': [<numba.core.ir.Assign object at 0x7f01cd5270d0>],
             '$38load_attr.8': [<numba.core.ir.Assign object at 0x7f01cd534050>],
             '$42binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01cd59b590>],
             '$50compare_op.13': [<numba.core.ir.Assign object at 0x7f01cd5345d0>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x7f01cd5346d0>],
             '$56load_attr.1': [<numba.core.ir.Assign object at 0x7f01cd5347d0>],
             '$62load_attr.4': [<numba.core.ir.Assign object at 0x7f01cd534a90>],
             '$66call_function_kw.6': [<numba.core.ir.Assign object at 0x7f01cd534e10>],
             '$68return_value.7': [<numba.core.ir.Assign object at 0x7f01cd534e50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd5277d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd5381d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f01cd538390>],
             '$80load_method.1': [<numba.core.ir.Assign object at 0x7f01cd538490>],
             '$84call_method.3': [<numba.core.ir.Assign object at 0x7f01cd538650>],
             '$86return_value.4': [<numba.core.ir.Assign object at 0x7f01cd538710>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x7f01cd5388d0>],
             '$90load_attr.1': [<numba.core.ir.Assign object at 0x7f01cd538a10>],
             '$96binary_multiply.4': [<numba.core.ir.Assign object at 0x7f01cd538c90>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f01cd527a90>],
             '$const138.10': [<numba.core.ir.Assign object at 0x7f01cd540410>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f01cd527b50>],
             '$const40.9': [<numba.core.ir.Assign object at 0x7f01cd534150>],
             '$const48.12': [<numba.core.ir.Assign object at 0x7f01cd5344d0>],
             '$const58.2': [<numba.core.ir.Assign object at 0x7f01cd5348d0>],
             '$const72.1': [<numba.core.ir.Assign object at 0x7f01cd5380d0>],
             '$phi118.0': [<numba.core.ir.Assign object at 0x7f01cd53b3d0>],
             '$phi120.1': [<numba.core.ir.Assign object at 0x7f01cd53ba90>],
             'a': [<numba.core.ir.Assign object at 0x7f01cd5274d0>],
             'aravel': [<numba.core.ir.Assign object at 0x7f01cd527110>],
             'asa': [<numba.core.ir.Assign object at 0x7f01cd5e2f90>],
             'i': [<numba.core.ir.Assign object at 0x7f01cd53bc50>],
             'n': [<numba.core.ir.Assign object at 0x7f01cd534310>],
             'repeats': [<numba.core.ir.Assign object at 0x7f01cd527650>],
             'to_return': [<numba.core.ir.Assign object at 0x7f01cd53b110>]})
2020-06-11 12:04:57,802:DEBUG:SSA violators set()
2020-06-11 12:04:57,802:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,803:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise <class 'ValueError'>('negative dimensions are not allowed') []
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:04:57,803:DEBUG:================================================================================
2020-06-11 12:04:57,807:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3864)
           2	LOAD_FAST(arg=0, lineno=3864)
           4	RETURN_VALUE(arg=None, lineno=3864)
2020-06-11 12:04:57,807:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,807:DEBUG:stack: []
2020-06-11 12:04:57,807:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3864)
2020-06-11 12:04:57,807:DEBUG:stack []
2020-06-11 12:04:57,807:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3864)
2020-06-11 12:04:57,807:DEBUG:stack []
2020-06-11 12:04:57,807:DEBUG:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=3864)
2020-06-11 12:04:57,807:DEBUG:stack ['$a2.0']
2020-06-11 12:04:57,807:DEBUG:end state. edges=[]
2020-06-11 12:04:57,807:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,807:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:57,807:DEBUG:defmap: {}
2020-06-11 12:04:57,807:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,808:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,808:DEBUG:keep phismap: {}
2020-06-11 12:04:57,808:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:57,808:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,808:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,808:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:57,809:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,809:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:57,810:DEBUG:================================================================================
2020-06-11 12:04:57,810:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,810:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd59b850>
2020-06-11 12:04:57,810:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:57,810:DEBUG:on stmt: dtype = arg(1, name=dtype)
2020-06-11 12:04:57,810:DEBUG:on stmt: $4return_value.1 = cast(value=a)
2020-06-11 12:04:57,810:DEBUG:on stmt: return $4return_value.1
2020-06-11 12:04:57,810:DEBUG:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f01cd4c0b90>],
             'a': [<numba.core.ir.Assign object at 0x7f01cd4c08d0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f01cd4c0a10>]})
2020-06-11 12:04:57,810:DEBUG:SSA violators set()
2020-06-11 12:04:57,810:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,810:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:57,810:DEBUG:================================================================================
2020-06-11 12:04:57,855:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1740)
           2	LOAD_FAST(arg=0, lineno=1740)
           4	LOAD_METHOD(arg=0, lineno=1740)
           6	LOAD_FAST(arg=0, lineno=1740)
           8	LOAD_ATTR(arg=1, lineno=1740)
          10	CALL_METHOD(arg=1, lineno=1740)
          12	RETURN_VALUE(arg=None, lineno=1740)
2020-06-11 12:04:57,855:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,855:DEBUG:stack: []
2020-06-11 12:04:57,855:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1740)
2020-06-11 12:04:57,855:DEBUG:stack []
2020-06-11 12:04:57,856:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack []
2020-06-11 12:04:57,856:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack ['$ary2.0']
2020-06-11 12:04:57,856:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack ['$4load_method.1']
2020-06-11 12:04:57,856:DEBUG:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack ['$4load_method.1', '$ary6.2']
2020-06-11 12:04:57,856:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack ['$4load_method.1', '$8load_attr.3']
2020-06-11 12:04:57,856:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1740)
2020-06-11 12:04:57,856:DEBUG:stack ['$10call_method.4']
2020-06-11 12:04:57,856:DEBUG:end state. edges=[]
2020-06-11 12:04:57,856:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,856:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:57,856:DEBUG:defmap: {}
2020-06-11 12:04:57,856:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,856:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:57,856:DEBUG:keep phismap: {}
2020-06-11 12:04:57,857:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:57,857:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,857:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,857:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:04:57,859:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,859:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:04:57,859:DEBUG:================================================================================
2020-06-11 12:04:57,859:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,859:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd40a850>
2020-06-11 12:04:57,859:DEBUG:on stmt: ary = arg(0, name=ary)
2020-06-11 12:04:57,859:DEBUG:on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2020-06-11 12:04:57,859:DEBUG:on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2020-06-11 12:04:57,860:DEBUG:on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None)
2020-06-11 12:04:57,860:DEBUG:on stmt: $12return_value.5 = cast(value=$10call_method.4)
2020-06-11 12:04:57,860:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:04:57,860:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f01cd4062d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f01cd406390>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f01cd400f10>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f01cd406110>],
             'ary': [<numba.core.ir.Assign object at 0x7f01cd400d10>]})
2020-06-11 12:04:57,860:DEBUG:SSA violators set()
2020-06-11 12:04:57,860:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,860:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:04:57,860:DEBUG:================================================================================
2020-06-11 12:04:57,868:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1602)
           2	LOAD_CONST(arg=1, lineno=1602)
           4	STORE_FAST(arg=2, lineno=1602)
           6	LOAD_CONST(arg=2, lineno=1603)
           8	STORE_FAST(arg=3, lineno=1603)
          10	SETUP_LOOP(arg=50, lineno=1604)
          12	LOAD_GLOBAL(arg=0, lineno=1604)
          14	LOAD_FAST(arg=1, lineno=1604)
          16	CALL_FUNCTION(arg=1, lineno=1604)
          18	GET_ITER(arg=None, lineno=1604)
>         20	FOR_ITER(arg=38, lineno=1604)
          22	UNPACK_SEQUENCE(arg=2, lineno=1604)
          24	STORE_FAST(arg=4, lineno=1604)
          26	STORE_FAST(arg=5, lineno=1604)
          28	LOAD_FAST(arg=5, lineno=1605)
          30	LOAD_CONST(arg=1, lineno=1605)
          32	COMPARE_OP(arg=0, lineno=1605)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1605)
          36	LOAD_FAST(arg=2, lineno=1606)
          38	LOAD_CONST(arg=2, lineno=1606)
          40	INPLACE_ADD(arg=None, lineno=1606)
          42	STORE_FAST(arg=2, lineno=1606)
          44	LOAD_FAST(arg=4, lineno=1607)
          46	STORE_FAST(arg=6, lineno=1607)
          48	JUMP_ABSOLUTE(arg=20, lineno=1607)
>         50	LOAD_FAST(arg=3, lineno=1609)
          52	LOAD_FAST(arg=5, lineno=1609)
          54	INPLACE_MULTIPLY(arg=None, lineno=1609)
          56	STORE_FAST(arg=3, lineno=1609)
          58	JUMP_ABSOLUTE(arg=20, lineno=1609)
>         60	POP_BLOCK(arg=None, lineno=1609)
>         62	LOAD_FAST(arg=2, lineno=1611)
          64	LOAD_CONST(arg=1, lineno=1611)
          66	COMPARE_OP(arg=2, lineno=1611)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1611)
          70	LOAD_FAST(arg=0, lineno=1612)
          72	LOAD_FAST(arg=3, lineno=1612)
          74	COMPARE_OP(arg=3, lineno=1612)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1612)
          78	LOAD_GLOBAL(arg=1, lineno=1613)
          80	LOAD_CONST(arg=3, lineno=1613)
          82	CALL_FUNCTION(arg=1, lineno=1613)
          84	RAISE_VARARGS(arg=1, lineno=1613)
          86	JUMP_FORWARD(arg=80, lineno=1613)
>         88	LOAD_FAST(arg=2, lineno=1615)
          90	LOAD_CONST(arg=2, lineno=1615)
          92	COMPARE_OP(arg=2, lineno=1615)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1615)
          96	LOAD_FAST(arg=3, lineno=1617)
          98	LOAD_CONST(arg=1, lineno=1617)
         100	COMPARE_OP(arg=2, lineno=1617)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1617)
         104	LOAD_CONST(arg=1, lineno=1618)
         106	STORE_FAST(arg=7, lineno=1618)
         108	LOAD_FAST(arg=0, lineno=1619)
         110	LOAD_CONST(arg=1, lineno=1619)
         112	COMPARE_OP(arg=2, lineno=1619)
         114	STORE_FAST(arg=8, lineno=1619)
         116	JUMP_FORWARD(arg=20, lineno=1619)
>        118	LOAD_FAST(arg=0, lineno=1621)
         120	LOAD_FAST(arg=3, lineno=1621)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
         124	STORE_FAST(arg=7, lineno=1621)
         126	LOAD_FAST(arg=0, lineno=1622)
         128	LOAD_FAST(arg=3, lineno=1622)
         130	BINARY_MODULO(arg=None, lineno=1622)
         132	LOAD_CONST(arg=1, lineno=1622)
         134	COMPARE_OP(arg=2, lineno=1622)
         136	STORE_FAST(arg=8, lineno=1622)
>        138	LOAD_FAST(arg=8, lineno=1623)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1623)
         142	LOAD_GLOBAL(arg=1, lineno=1624)
         144	LOAD_CONST(arg=3, lineno=1624)
         146	CALL_FUNCTION(arg=1, lineno=1624)
         148	RAISE_VARARGS(arg=1, lineno=1624)
>        150	LOAD_FAST(arg=7, lineno=1625)
         152	LOAD_FAST(arg=1, lineno=1625)
         154	LOAD_FAST(arg=6, lineno=1625)
         156	STORE_SUBSCR(arg=None, lineno=1625)
         158	JUMP_FORWARD(arg=8, lineno=1625)
>        160	LOAD_GLOBAL(arg=1, lineno=1628)
         162	LOAD_CONST(arg=4, lineno=1628)
         164	CALL_FUNCTION(arg=1, lineno=1628)
         166	RAISE_VARARGS(arg=1, lineno=1628)
>        168	LOAD_CONST(arg=0, lineno=1628)
         170	RETURN_VALUE(arg=None, lineno=1628)
2020-06-11 12:04:57,868:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:57,868:DEBUG:stack: []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1602)
2020-06-11 12:04:57,868:DEBUG:stack []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1602)
2020-06-11 12:04:57,868:DEBUG:stack []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1602)
2020-06-11 12:04:57,868:DEBUG:stack ['$const2.0']
2020-06-11 12:04:57,868:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1603)
2020-06-11 12:04:57,868:DEBUG:stack []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1603)
2020-06-11 12:04:57,868:DEBUG:stack ['$const6.1']
2020-06-11 12:04:57,868:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,868:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:04:57,868:DEBUG:stack: []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1604)
2020-06-11 12:04:57,868:DEBUG:stack []
2020-06-11 12:04:57,868:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1604)
2020-06-11 12:04:57,869:DEBUG:stack []
2020-06-11 12:04:57,869:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1604)
2020-06-11 12:04:57,869:DEBUG:stack ['$12load_global.0']
2020-06-11 12:04:57,869:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1604)
2020-06-11 12:04:57,869:DEBUG:stack ['$12load_global.0', '$shape14.1']
2020-06-11 12:04:57,869:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=1604)
2020-06-11 12:04:57,869:DEBUG:stack ['$16call_function.2']
2020-06-11 12:04:57,869:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,869:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:57,869:DEBUG:stack: ['$phi20.0']
2020-06-11 12:04:57,869:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1604)
2020-06-11 12:04:57,869:DEBUG:stack ['$phi20.0']
2020-06-11 12:04:57,869:DEBUG:end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,869:DEBUG:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:04:57,869:DEBUG:stack: []
2020-06-11 12:04:57,869:DEBUG:dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1609)
2020-06-11 12:04:57,869:DEBUG:stack []
2020-06-11 12:04:57,869:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,869:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
2020-06-11 12:04:57,869:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1604)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1604)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1604)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$22unpack_sequence.3']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1605)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1605)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$s28.5']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1605)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$s28.5', '$const30.6']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1605)
2020-06-11 12:04:57,870:DEBUG:stack ['$phi22.0', '$32compare_op.7']
2020-06-11 12:04:57,870:DEBUG:end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,870:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
2020-06-11 12:04:57,870:DEBUG:stack: []
2020-06-11 12:04:57,870:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1611)
2020-06-11 12:04:57,870:DEBUG:stack []
2020-06-11 12:04:57,870:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1611)
2020-06-11 12:04:57,870:DEBUG:stack ['$num_neg_value62.0']
2020-06-11 12:04:57,870:DEBUG:dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1611)
2020-06-11 12:04:57,870:DEBUG:stack ['$num_neg_value62.0', '$const64.1']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1611)
2020-06-11 12:04:57,871:DEBUG:stack ['$66compare_op.2']
2020-06-11 12:04:57,871:DEBUG:end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,871:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:04:57,871:DEBUG:stack: ['$phi36.0']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1606)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1606)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0', '$num_neg_value36.1']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1606)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1606)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0', '$40inplace_add.3']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1607)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1607)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0', '$ax44.4']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1607)
2020-06-11 12:04:57,871:DEBUG:stack ['$phi36.0']
2020-06-11 12:04:57,871:DEBUG:end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,871:DEBUG:pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:57,871:DEBUG:stack: ['$phi50.0']
2020-06-11 12:04:57,871:DEBUG:dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1609)
2020-06-11 12:04:57,872:DEBUG:stack ['$phi50.0']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1609)
2020-06-11 12:04:57,872:DEBUG:stack ['$phi50.0', '$known_size50.1']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1609)
2020-06-11 12:04:57,872:DEBUG:stack ['$phi50.0', '$known_size50.1', '$s52.2']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1609)
2020-06-11 12:04:57,872:DEBUG:stack ['$phi50.0', '$54inplace_multiply.3']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1609)
2020-06-11 12:04:57,872:DEBUG:stack ['$phi50.0']
2020-06-11 12:04:57,872:DEBUG:end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:57,872:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:57,872:DEBUG:stack: []
2020-06-11 12:04:57,872:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1612)
2020-06-11 12:04:57,872:DEBUG:stack []
2020-06-11 12:04:57,872:DEBUG:dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1612)
2020-06-11 12:04:57,872:DEBUG:stack ['$origsize70.0']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1612)
2020-06-11 12:04:57,872:DEBUG:stack ['$origsize70.0', '$known_size72.1']
2020-06-11 12:04:57,872:DEBUG:dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1612)
2020-06-11 12:04:57,872:DEBUG:stack ['$74compare_op.2']
2020-06-11 12:04:57,872:DEBUG:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,872:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2020-06-11 12:04:57,873:DEBUG:stack: []
2020-06-11 12:04:57,873:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1615)
2020-06-11 12:04:57,873:DEBUG:stack []
2020-06-11 12:04:57,873:DEBUG:dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1615)
2020-06-11 12:04:57,873:DEBUG:stack ['$num_neg_value88.0']
2020-06-11 12:04:57,873:DEBUG:dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1615)
2020-06-11 12:04:57,873:DEBUG:stack ['$num_neg_value88.0', '$const90.1']
2020-06-11 12:04:57,873:DEBUG:dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1615)
2020-06-11 12:04:57,873:DEBUG:stack ['$92compare_op.2']
2020-06-11 12:04:57,873:DEBUG:end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,873:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:04:57,873:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:04:57,873:DEBUG:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:04:57,873:DEBUG:stack: []
2020-06-11 12:04:57,873:DEBUG:dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1613)
2020-06-11 12:04:57,873:DEBUG:stack []
2020-06-11 12:04:57,873:DEBUG:dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1613)
2020-06-11 12:04:57,873:DEBUG:stack ['$78load_global.0']
2020-06-11 12:04:57,873:DEBUG:dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1613)
2020-06-11 12:04:57,873:DEBUG:stack ['$78load_global.0', '$const80.1']
2020-06-11 12:04:57,873:DEBUG:dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1613)
2020-06-11 12:04:57,873:DEBUG:stack ['$82call_function.2']
2020-06-11 12:04:57,873:DEBUG:end state. edges=[]
2020-06-11 12:04:57,874:DEBUG:pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:04:57,874:DEBUG:stack: []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1628)
2020-06-11 12:04:57,874:DEBUG:stack []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1628)
2020-06-11 12:04:57,874:DEBUG:stack ['$const168.0']
2020-06-11 12:04:57,874:DEBUG:end state. edges=[]
2020-06-11 12:04:57,874:DEBUG:pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:04:57,874:DEBUG:stack: []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1617)
2020-06-11 12:04:57,874:DEBUG:stack []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1617)
2020-06-11 12:04:57,874:DEBUG:stack ['$known_size96.0']
2020-06-11 12:04:57,874:DEBUG:dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1617)
2020-06-11 12:04:57,874:DEBUG:stack ['$known_size96.0', '$const98.1']
2020-06-11 12:04:57,874:DEBUG:dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1617)
2020-06-11 12:04:57,874:DEBUG:stack ['$100compare_op.2']
2020-06-11 12:04:57,874:DEBUG:end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,874:DEBUG:pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2020-06-11 12:04:57,874:DEBUG:stack: []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1628)
2020-06-11 12:04:57,874:DEBUG:stack []
2020-06-11 12:04:57,874:DEBUG:dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1628)
2020-06-11 12:04:57,874:DEBUG:stack ['$160load_global.0']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1628)
2020-06-11 12:04:57,875:DEBUG:stack ['$160load_global.0', '$const162.1']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1628)
2020-06-11 12:04:57,875:DEBUG:stack ['$164call_function.2']
2020-06-11 12:04:57,875:DEBUG:end state. edges=[]
2020-06-11 12:04:57,875:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2020-06-11 12:04:57,875:DEBUG:stack: []
2020-06-11 12:04:57,875:DEBUG:dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1618)
2020-06-11 12:04:57,875:DEBUG:stack []
2020-06-11 12:04:57,875:DEBUG:dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1618)
2020-06-11 12:04:57,875:DEBUG:stack ['$const104.0']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1619)
2020-06-11 12:04:57,875:DEBUG:stack []
2020-06-11 12:04:57,875:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1619)
2020-06-11 12:04:57,875:DEBUG:stack ['$origsize108.1']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1619)
2020-06-11 12:04:57,875:DEBUG:stack ['$origsize108.1', '$const110.2']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1619)
2020-06-11 12:04:57,875:DEBUG:stack ['$112compare_op.3']
2020-06-11 12:04:57,875:DEBUG:dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1619)
2020-06-11 12:04:57,875:DEBUG:stack []
2020-06-11 12:04:57,875:DEBUG:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,875:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2020-06-11 12:04:57,876:DEBUG:stack: []
2020-06-11 12:04:57,876:DEBUG:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1621)
2020-06-11 12:04:57,876:DEBUG:stack []
2020-06-11 12:04:57,876:DEBUG:dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1621)
2020-06-11 12:04:57,876:DEBUG:stack ['$origsize118.0']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
2020-06-11 12:04:57,876:DEBUG:stack ['$origsize118.0', '$known_size120.1']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1621)
2020-06-11 12:04:57,876:DEBUG:stack ['$122binary_floor_divide.2']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack []
2020-06-11 12:04:57,876:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack ['$origsize126.3']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack ['$origsize126.3', '$known_size128.4']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack ['$130binary_modulo.5']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack ['$130binary_modulo.5', '$const132.6']
2020-06-11 12:04:57,876:DEBUG:dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1622)
2020-06-11 12:04:57,876:DEBUG:stack ['$134compare_op.7']
2020-06-11 12:04:57,876:DEBUG:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,876:DEBUG:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2020-06-11 12:04:57,876:DEBUG:stack: []
2020-06-11 12:04:57,877:DEBUG:dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1623)
2020-06-11 12:04:57,877:DEBUG:stack []
2020-06-11 12:04:57,877:DEBUG:dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1623)
2020-06-11 12:04:57,877:DEBUG:stack ['$ok138.0']
2020-06-11 12:04:57,877:DEBUG:end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,877:DEBUG:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:04:57,877:DEBUG:pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:04:57,877:DEBUG:stack: []
2020-06-11 12:04:57,877:DEBUG:dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1624)
2020-06-11 12:04:57,877:DEBUG:stack []
2020-06-11 12:04:57,877:DEBUG:dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1624)
2020-06-11 12:04:57,877:DEBUG:stack ['$142load_global.0']
2020-06-11 12:04:57,877:DEBUG:dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1624)
2020-06-11 12:04:57,877:DEBUG:stack ['$142load_global.0', '$const144.1']
2020-06-11 12:04:57,877:DEBUG:dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1624)
2020-06-11 12:04:57,877:DEBUG:stack ['$146call_function.2']
2020-06-11 12:04:57,877:DEBUG:end state. edges=[]
2020-06-11 12:04:57,877:DEBUG:pending: deque([State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:04:57,877:DEBUG:stack: []
2020-06-11 12:04:57,877:DEBUG:dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1625)
2020-06-11 12:04:57,877:DEBUG:stack []
2020-06-11 12:04:57,878:DEBUG:dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1625)
2020-06-11 12:04:57,878:DEBUG:stack ['$inferred150.0']
2020-06-11 12:04:57,878:DEBUG:dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1625)
2020-06-11 12:04:57,878:DEBUG:stack ['$inferred150.0', '$shape152.1']
2020-06-11 12:04:57,878:DEBUG:dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1625)
2020-06-11 12:04:57,878:DEBUG:stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
2020-06-11 12:04:57,878:DEBUG:dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1625)
2020-06-11 12:04:57,878:DEBUG:stack []
2020-06-11 12:04:57,878:DEBUG:end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:57,878:DEBUG:pending: deque([State(pc_initial=168 nstack_initial=0)])
2020-06-11 12:04:57,878:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:57,878:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
2020-06-11 12:04:57,879:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:04:57,879:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:04:57,879:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:57,879:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:57,879:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:57,880:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:04:57,880:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:04:57,880:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
2020-06-11 12:04:57,880:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,881:DEBUG:block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:57,883:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size ['$122binary_floor_divide.2', 'known_size', 'origsize']
    inferred = $122binary_floor_divide.2     ['$122binary_floor_divide.2', 'inferred']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok = $134compare_op.7                    ['$134compare_op.7', 'ok']
    jump 138                                 []
label 138:
    branch ok, 150, 142                      ['ok']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

2020-06-11 12:04:57,897:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:57,898:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 169                                 []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 169                                 []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size ['$122binary_floor_divide.2', 'known_size', 'origsize']
    inferred = $122binary_floor_divide.2     ['$122binary_floor_divide.2', 'inferred']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok = $134compare_op.7                    ['$134compare_op.7', 'ok']
    jump 138                                 []
label 138:
    branch ok, 150, 142                      ['ok']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise <class 'ValueError'>('multiple negative shape values') []
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']
label 169:
    jump 20                                  []

2020-06-11 12:04:57,898:DEBUG:================================================================================
2020-06-11 12:04:57,898:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:57,898:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,898:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,898:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,898:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,898:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,898:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,899:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,899:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,899:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:04:57,899:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,899:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,899:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,899:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,899:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,899:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,899:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:04:57,899:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,899:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,899:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,899:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,899:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,899:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,899:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:04:57,899:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,899:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,899:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,899:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,899:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,899:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,899:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,899:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,899:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:04:57,900:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,900:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,900:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,900:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:04:57,900:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,900:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 50
2020-06-11 12:04:57,900:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,900:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,900:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,900:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 60
2020-06-11 12:04:57,900:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,900:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:04:57,900:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,900:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,900:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,900:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 70
2020-06-11 12:04:57,900:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,900:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,900:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,900:DEBUG:==== SSA block analysis pass on 78
2020-06-11 12:04:57,901:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,901:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,901:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,901:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,901:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,901:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:04:57,901:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,901:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,901:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,901:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,901:DEBUG:==== SSA block analysis pass on 96
2020-06-11 12:04:57,901:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,901:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,901:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,901:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,901:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:04:57,901:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,901:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,901:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,901:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,901:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,901:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,901:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,901:DEBUG:==== SSA block analysis pass on 118
2020-06-11 12:04:57,901:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,901:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,901:DEBUG:on stmt: inferred = $122binary_floor_divide.2
2020-06-11 12:04:57,901:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,902:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,902:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,902:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,902:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,902:DEBUG:==== SSA block analysis pass on 138
2020-06-11 12:04:57,902:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,902:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,902:DEBUG:==== SSA block analysis pass on 142
2020-06-11 12:04:57,902:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,902:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,902:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,902:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,902:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,902:DEBUG:==== SSA block analysis pass on 150
2020-06-11 12:04:57,902:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,902:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:04:57,902:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,902:DEBUG:==== SSA block analysis pass on 160
2020-06-11 12:04:57,902:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,902:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,902:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,902:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,902:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,902:DEBUG:==== SSA block analysis pass on 168
2020-06-11 12:04:57,902:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,903:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,903:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,903:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,903:DEBUG:==== SSA block analysis pass on 169
2020-06-11 12:04:57,903:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,903:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,903:DEBUG:defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd362cd0>],
             '$112compare_op.3': [<numba.core.ir.Assign object at 0x7f01cd366250>],
             '$122binary_floor_divide.2': [<numba.core.ir.Assign object at 0x7f01cd3666d0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f01cd3da490>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f01cd366a10>],
             '$134compare_op.7': [<numba.core.ir.Assign object at 0x7f01cd366bd0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f01cd366e90>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f01cd36a110>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f01cd36a650>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f01cd36a850>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f01cd3da650>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f01cd36ab10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f01cd3da710>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f01cd3da950>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f01cd3daa10>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f01cd3daad0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f01cd3dae50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f01cd3daf10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f01cd3dad50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f01cd3dd210>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f01cd3dd750>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f01cd3ddc90>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd362150>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd362490>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f01cd362610>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f01cd362850>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f01cd3b1990>],
             '$const104.0': [<numba.core.ir.Assign object at 0x7f01cd362e90>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f01cd366150>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f01cd366ad0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f01cd366f90>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f01cd36a710>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f01cd36aa10>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f01cd3b8f90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f01cd3dd290>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f01cd3dd610>],
             '$const6.1': [<numba.core.ir.Assign object at 0x7f01cd3da190>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f01cd362050>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f01cd362710>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f01cd3b89d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f01cd362bd0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f01cd3da550>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f01cd3dab50>],
             'ax': [<numba.core.ir.Assign object at 0x7f01cd3daf90>],
             'inferred': [<numba.core.ir.Assign object at 0x7f01cd362f50>,
                          <numba.core.ir.Assign object at 0x7f01cd366310>],
             'known_size': [<numba.core.ir.Assign object at 0x7f01cd3da290>,
                            <numba.core.ir.Assign object at 0x7f01cd3dd950>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f01cd3dd990>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f01cd3da090>,
                               <numba.core.ir.Assign object at 0x7f01cd3dd190>],
             'ok': [<numba.core.ir.Assign object at 0x7f01cd366350>,
                    <numba.core.ir.Assign object at 0x7f01cd366750>],
             'origsize': [<numba.core.ir.Assign object at 0x7f01cd3b8f10>],
             's': [<numba.core.ir.Assign object at 0x7f01cd3dd110>],
             'shape': [<numba.core.ir.Assign object at 0x7f01cd3b8e50>]})
2020-06-11 12:04:57,903:DEBUG:SSA violators {'inferred', 'num_neg_value', 'ok', 'known_size'}
2020-06-11 12:04:57,903:DEBUG:Fix SSA violator on var inferred
2020-06-11 12:04:57,903:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,904:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,904:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,904:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,904:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,904:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,904:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,904:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,904:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,904:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,904:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,904:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,904:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,904:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,904:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,904:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,904:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,904:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,904:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,904:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,904:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,904:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,904:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,904:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,904:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,904:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,904:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,905:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,905:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,905:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,905:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,905:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,905:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,905:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,905:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,905:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,905:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,905:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:04:57,905:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,905:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,905:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,905:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,905:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,905:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,905:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,905:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,905:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,905:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,905:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,905:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,905:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,905:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,905:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,906:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,906:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,906:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,906:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,906:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,906:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,906:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,906:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,906:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,906:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,906:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,906:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,906:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,906:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,906:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,906:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,906:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,906:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,906:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,906:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,906:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,906:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,906:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,906:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,906:DEBUG:first assign: inferred
2020-06-11 12:04:57,906:DEBUG:replaced with: inferred = $const104.0
2020-06-11 12:04:57,907:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,907:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,907:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,907:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,907:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,907:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,907:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,907:DEBUG:on stmt: inferred = $122binary_floor_divide.2
2020-06-11 12:04:57,907:DEBUG:replaced with: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,907:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,907:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,907:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,907:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,907:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,907:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,907:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,907:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,907:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,907:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,907:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,907:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,907:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,907:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,907:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,907:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,907:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:04:57,908:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,908:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,908:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,908:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,908:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,908:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,908:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,908:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,908:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,908:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,908:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,908:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,908:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,908:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd3f9d10>
2020-06-11 12:04:57,908:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,908:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f01cd385190>],
             118: [<numba.core.ir.Assign object at 0x7f01cd385810>]})
2020-06-11 12:04:57,909:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,909:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,909:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,909:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,909:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,909:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,909:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,909:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,909:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,909:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,909:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,909:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,909:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,909:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,909:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,909:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,910:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,910:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,910:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,910:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,910:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,910:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,910:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,910:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,910:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,910:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,910:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,910:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,910:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,910:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,910:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,910:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,910:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,910:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,910:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,910:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,910:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,910:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:04:57,910:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,911:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,911:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,911:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,911:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,911:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,911:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,911:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,911:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,911:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,911:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,911:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,911:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,911:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,911:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,911:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,911:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,911:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,911:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,911:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,911:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,911:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,911:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,911:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,911:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,912:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,912:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,912:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,912:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,912:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,912:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,912:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,912:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,912:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,912:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,912:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,912:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,912:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,912:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,912:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,912:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,912:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,912:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,912:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,912:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,912:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,912:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,912:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,912:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,913:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,913:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,913:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,913:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,913:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,913:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,913:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,913:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,913:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,913:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,913:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,913:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,913:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,913:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,913:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:04:57,913:DEBUG:find_def var='inferred' stmt=shape[neg_ax] = inferred
2020-06-11 12:04:57,913:DEBUG:find_def_from_top label 150
2020-06-11 12:04:57,913:DEBUG:idom 138 from label 150
2020-06-11 12:04:57,913:DEBUG:find_def_from_bottom label 138
2020-06-11 12:04:57,913:DEBUG:find_def_from_top label 138
2020-06-11 12:04:57,913:DEBUG:insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2020-06-11 12:04:57,913:DEBUG:find_def_from_bottom label 104
2020-06-11 12:04:57,913:DEBUG:incoming_def inferred = $const104.0
2020-06-11 12:04:57,913:DEBUG:find_def_from_bottom label 118
2020-06-11 12:04:57,914:DEBUG:incoming_def inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,914:DEBUG:replaced with: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,914:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,914:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,914:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,914:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,914:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,914:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,914:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,914:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,914:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,914:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,914:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,914:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,914:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,914:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd366450>
2020-06-11 12:04:57,914:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,914:DEBUG:Fix SSA violator on var num_neg_value
2020-06-11 12:04:57,914:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,914:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,914:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,914:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,915:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,915:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,915:DEBUG:first assign: num_neg_value
2020-06-11 12:04:57,915:DEBUG:replaced with: num_neg_value = $const2.0
2020-06-11 12:04:57,915:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,915:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,915:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,915:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,915:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,915:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,915:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,915:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,915:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,915:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,915:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,915:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,915:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,915:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,915:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,915:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,915:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,915:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,915:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,915:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,915:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,915:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,915:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,916:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,916:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,916:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,916:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,916:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,916:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,916:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,916:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:04:57,916:DEBUG:replaced with: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,916:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,916:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,916:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,916:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,916:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,916:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,916:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,916:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,916:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,916:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,916:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,916:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,917:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,917:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,917:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,917:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,917:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,917:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,917:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,917:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,917:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,917:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,917:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,917:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,917:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,917:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,917:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,917:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,917:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,917:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,917:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,917:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,917:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,917:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,918:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,918:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,918:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,918:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,918:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,918:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,918:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,918:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,918:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,918:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,918:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,918:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,918:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,918:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,918:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,918:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,918:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,918:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,918:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,918:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,918:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,918:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,919:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,919:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,919:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,919:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,919:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,919:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,919:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,919:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,919:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,919:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385490>
2020-06-11 12:04:57,919:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,919:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01cd3851d0>],
             36: [<numba.core.ir.Assign object at 0x7f01cd3855d0>]})
2020-06-11 12:04:57,920:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,920:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,920:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,920:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,920:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,920:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,920:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,920:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,920:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,920:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,920:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,920:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,920:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,920:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,920:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,920:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,920:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,920:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,920:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,920:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,920:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,921:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,921:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,921:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,921:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,921:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,921:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,921:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,921:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,921:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,921:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,921:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,921:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,921:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,921:DEBUG:find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,921:DEBUG:find_def_from_top label 36
2020-06-11 12:04:57,921:DEBUG:idom 22 from label 36
2020-06-11 12:04:57,921:DEBUG:find_def_from_bottom label 22
2020-06-11 12:04:57,921:DEBUG:find_def_from_top label 22
2020-06-11 12:04:57,921:DEBUG:idom 20 from label 22
2020-06-11 12:04:57,921:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,921:DEBUG:find_def_from_top label 20
2020-06-11 12:04:57,921:DEBUG:insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2020-06-11 12:04:57,921:DEBUG:find_def_from_bottom label 169
2020-06-11 12:04:57,921:DEBUG:find_def_from_top label 169
2020-06-11 12:04:57,921:DEBUG:insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 50
2020-06-11 12:04:57,922:DEBUG:find_def_from_top label 50
2020-06-11 12:04:57,922:DEBUG:idom 22 from label 50
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 22
2020-06-11 12:04:57,922:DEBUG:find_def_from_top label 22
2020-06-11 12:04:57,922:DEBUG:idom 20 from label 22
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,922:DEBUG:incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:57,922:DEBUG:incoming_def num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,922:DEBUG:incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 10
2020-06-11 12:04:57,922:DEBUG:find_def_from_top label 10
2020-06-11 12:04:57,922:DEBUG:idom 0 from label 10
2020-06-11 12:04:57,922:DEBUG:find_def_from_bottom label 0
2020-06-11 12:04:57,922:DEBUG:incoming_def num_neg_value = $const2.0
2020-06-11 12:04:57,922:DEBUG:replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,922:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,922:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,922:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,922:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,922:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,922:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,922:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,922:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,923:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,923:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,923:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,923:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,923:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,923:DEBUG:find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:04:57,923:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,923:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,923:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,923:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,923:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,923:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,923:DEBUG:replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:04:57,923:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,923:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,923:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,923:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,923:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,923:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,923:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,923:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,924:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,924:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,924:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,924:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,924:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,924:DEBUG:find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:04:57,924:DEBUG:find_def_from_top label 88
2020-06-11 12:04:57,924:DEBUG:idom 62 from label 88
2020-06-11 12:04:57,924:DEBUG:find_def_from_bottom label 62
2020-06-11 12:04:57,924:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,924:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,924:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,924:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,924:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,924:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,924:DEBUG:replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:04:57,924:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,924:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,924:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,924:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,924:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,924:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,924:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,924:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,924:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,925:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,925:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,925:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,925:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,925:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,925:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,925:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,925:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,925:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,925:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,925:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,925:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,925:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,925:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,925:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,925:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,925:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,925:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,925:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,925:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,925:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,925:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,925:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,925:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,925:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,926:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,926:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,926:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,926:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,926:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,926:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,926:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,926:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,926:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,926:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,926:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,926:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,926:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,926:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,926:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,926:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,926:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,926:DEBUG:Fix SSA violator on var ok
2020-06-11 12:04:57,926:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,926:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,926:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,926:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,926:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,926:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,927:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,927:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,927:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,927:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,927:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,927:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,927:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,927:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,927:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,927:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,927:DEBUG:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10])
2020-06-11 12:04:57,927:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,927:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,927:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,927:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,927:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,927:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,927:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,927:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,927:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,927:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,927:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,928:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,928:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,928:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,928:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,928:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,928:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,928:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,928:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,928:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,928:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,928:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,928:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,928:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,928:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,928:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,928:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,928:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,928:DEBUG:on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:04:57,928:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,928:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,928:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,929:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,929:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,929:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,929:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,929:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,929:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,929:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,929:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,929:DEBUG:on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:04:57,929:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,929:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,929:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,929:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,929:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,929:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,929:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,929:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,929:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,929:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,929:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,929:DEBUG:first assign: ok
2020-06-11 12:04:57,929:DEBUG:replaced with: ok = $112compare_op.3
2020-06-11 12:04:57,930:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,930:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,930:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,930:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,930:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,930:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,930:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,930:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,930:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:04:57,930:DEBUG:replaced with: ok.1 = $134compare_op.7
2020-06-11 12:04:57,930:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,930:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,930:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,930:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,930:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,930:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,930:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,930:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,930:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,930:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,930:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,930:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,930:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,930:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,930:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,930:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,931:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,931:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,931:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,931:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,931:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,931:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,931:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,931:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,931:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,931:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,931:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,931:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd366450>
2020-06-11 12:04:57,931:DEBUG:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,931:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,931:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f01cd385550>],
             118: [<numba.core.ir.Assign object at 0x7f01cd385750>]})
2020-06-11 12:04:57,932:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,932:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,932:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,932:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,932:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,932:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,932:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,932:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,932:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,932:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,932:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,932:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,932:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,932:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,932:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,933:DEBUG:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10])
2020-06-11 12:04:57,933:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,933:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,933:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,933:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,933:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,933:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,933:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,933:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,933:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,933:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,933:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,933:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,933:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,933:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,933:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,933:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,933:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,933:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,933:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,933:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,933:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,933:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,934:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,934:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,934:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,934:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,934:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,934:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,934:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,934:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,934:DEBUG:on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:04:57,934:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,934:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,934:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,934:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,934:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,934:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,934:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,934:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,934:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,935:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,935:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,935:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,935:DEBUG:on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:04:57,935:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,935:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,935:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,935:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,935:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,935:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,935:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,935:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,935:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,935:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,935:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,935:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,935:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,935:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,935:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,935:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,935:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,935:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,935:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,935:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,935:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,936:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:04:57,936:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,936:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,936:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,936:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,936:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:04:57,936:DEBUG:find_def var='ok' stmt=branch ok, 150, 142
2020-06-11 12:04:57,936:DEBUG:find_def_from_top label 138
2020-06-11 12:04:57,936:DEBUG:insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2020-06-11 12:04:57,936:DEBUG:find_def_from_bottom label 104
2020-06-11 12:04:57,936:DEBUG:incoming_def ok = $112compare_op.3
2020-06-11 12:04:57,936:DEBUG:find_def_from_bottom label 118
2020-06-11 12:04:57,936:DEBUG:incoming_def ok.1 = $134compare_op.7
2020-06-11 12:04:57,936:DEBUG:replaced with: branch ok.2, 150, 142
2020-06-11 12:04:57,936:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,936:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,936:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,936:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,936:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,936:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,936:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,937:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,937:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,937:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,937:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,937:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,937:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,937:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,937:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,937:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,937:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,937:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,937:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,937:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,937:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,937:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,937:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd3b8390>
2020-06-11 12:04:57,937:DEBUG:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,937:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,937:DEBUG:Fix SSA violator on var known_size
2020-06-11 12:04:57,937:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,937:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,937:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,937:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,938:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,938:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,938:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,938:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,938:DEBUG:first assign: known_size
2020-06-11 12:04:57,938:DEBUG:replaced with: known_size = $const6.1
2020-06-11 12:04:57,938:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,938:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,938:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,938:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,938:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,938:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,938:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,938:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,938:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,938:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,938:DEBUG:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10])
2020-06-11 12:04:57,938:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,938:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,938:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,938:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,938:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,938:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,938:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,938:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,938:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,939:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,939:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,939:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,939:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,939:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,939:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,939:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,939:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,939:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,939:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,939:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,939:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,939:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,939:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,939:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,939:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,939:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:04:57,939:DEBUG:replaced with: known_size.1 = $54inplace_multiply.3
2020-06-11 12:04:57,939:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,939:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,939:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,939:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,939:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,939:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,939:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,939:DEBUG:on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:04:57,940:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,940:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,940:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,940:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,940:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,940:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,940:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,940:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,940:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,940:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,940:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,940:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,940:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,940:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,940:DEBUG:on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:04:57,940:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,940:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,940:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,940:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,940:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,940:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,940:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,940:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,940:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,940:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,940:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,940:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,940:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,941:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,941:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,941:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,941:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,941:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,941:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,941:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,941:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,941:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:04:57,941:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,941:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,941:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,941:DEBUG:on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,941:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,941:DEBUG:on stmt: branch ok.2, 150, 142
2020-06-11 12:04:57,941:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,941:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,941:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,941:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,941:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,941:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,941:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,941:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,941:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,941:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,941:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,941:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,942:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,942:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,942:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,942:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,942:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,942:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,942:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,942:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,942:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,942:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,942:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd385e10>
2020-06-11 12:04:57,942:DEBUG:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,942:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,942:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01cd385450>],
             50: [<numba.core.ir.Assign object at 0x7f01cd385b50>]})
2020-06-11 12:04:57,943:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:57,943:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,943:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:04:57,943:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:04:57,943:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:04:57,943:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:04:57,943:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:04:57,943:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:04:57,943:DEBUG:on stmt: jump 10
2020-06-11 12:04:57,943:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:57,943:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,943:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:04:57,943:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:04:57,943:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:57,943:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:57,943:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,943:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:04:57,943:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,943:DEBUG:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10])
2020-06-11 12:04:57,943:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:57,943:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:57,943:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:57,944:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:57,944:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:04:57,944:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:04:57,944:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,944:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:04:57,944:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:04:57,944:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:04:57,944:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:04:57,944:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:04:57,944:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:04:57,944:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:04:57,944:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:04:57,944:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:57,944:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,944:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:04:57,944:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,944:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:04:57,944:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:04:57,944:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,944:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:04:57,944:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,944:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,944:DEBUG:find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,944:DEBUG:find_def_from_top label 50
2020-06-11 12:04:57,944:DEBUG:idom 22 from label 50
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 22
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 22
2020-06-11 12:04:57,945:DEBUG:idom 20 from label 22
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 20
2020-06-11 12:04:57,945:DEBUG:insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 169
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 169
2020-06-11 12:04:57,945:DEBUG:insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 50
2020-06-11 12:04:57,945:DEBUG:incoming_def known_size.1 = $54inplace_multiply.3
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 36
2020-06-11 12:04:57,945:DEBUG:idom 22 from label 36
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 22
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 22
2020-06-11 12:04:57,945:DEBUG:idom 20 from label 22
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,945:DEBUG:incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
2020-06-11 12:04:57,945:DEBUG:incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 10
2020-06-11 12:04:57,945:DEBUG:find_def_from_top label 10
2020-06-11 12:04:57,945:DEBUG:idom 0 from label 10
2020-06-11 12:04:57,945:DEBUG:find_def_from_bottom label 0
2020-06-11 12:04:57,945:DEBUG:incoming_def known_size = $const6.1
2020-06-11 12:04:57,945:DEBUG:replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:57,945:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:04:57,946:DEBUG:on stmt: jump 169
2020-06-11 12:04:57,946:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:57,946:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,946:DEBUG:on stmt: jump 62
2020-06-11 12:04:57,946:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:04:57,946:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,946:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:04:57,946:DEBUG:on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:04:57,946:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:04:57,946:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:04:57,946:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,946:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,946:DEBUG:find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
2020-06-11 12:04:57,946:DEBUG:find_def_from_top label 70
2020-06-11 12:04:57,946:DEBUG:idom 62 from label 70
2020-06-11 12:04:57,946:DEBUG:find_def_from_bottom label 62
2020-06-11 12:04:57,946:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,946:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,946:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,946:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,946:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,946:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,946:DEBUG:replaced with: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:04:57,946:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:04:57,947:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:04:57,947:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,947:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,947:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,947:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:04:57,947:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,947:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:57,947:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,947:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:57,947:DEBUG:on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:04:57,947:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:04:57,947:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:57,947:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,947:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:04:57,947:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,947:DEBUG:find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
2020-06-11 12:04:57,947:DEBUG:find_def_from_top label 96
2020-06-11 12:04:57,947:DEBUG:idom 88 from label 96
2020-06-11 12:04:57,947:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:57,947:DEBUG:find_def_from_top label 88
2020-06-11 12:04:57,947:DEBUG:idom 62 from label 88
2020-06-11 12:04:57,947:DEBUG:find_def_from_bottom label 62
2020-06-11 12:04:57,947:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,947:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,947:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,947:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,948:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,948:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,948:DEBUG:replaced with: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:04:57,948:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:04:57,948:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:57,948:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,948:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:04:57,948:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:04:57,948:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:04:57,948:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:04:57,948:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:04:57,948:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,948:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:04:57,948:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,948:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,948:DEBUG:find_def var='known_size' stmt=$122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:04:57,948:DEBUG:find_def_from_top label 118
2020-06-11 12:04:57,948:DEBUG:idom 96 from label 118
2020-06-11 12:04:57,948:DEBUG:find_def_from_bottom label 96
2020-06-11 12:04:57,948:DEBUG:find_def_from_top label 96
2020-06-11 12:04:57,948:DEBUG:idom 88 from label 96
2020-06-11 12:04:57,948:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:57,948:DEBUG:find_def_from_top label 88
2020-06-11 12:04:57,948:DEBUG:idom 62 from label 88
2020-06-11 12:04:57,948:DEBUG:find_def_from_bottom label 62
2020-06-11 12:04:57,948:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,949:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,949:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,949:DEBUG:replaced with: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:04:57,949:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:04:57,949:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,949:DEBUG:find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 118
2020-06-11 12:04:57,949:DEBUG:idom 96 from label 118
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 96
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 96
2020-06-11 12:04:57,949:DEBUG:idom 88 from label 96
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 88
2020-06-11 12:04:57,949:DEBUG:idom 62 from label 88
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 62
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 62
2020-06-11 12:04:57,949:DEBUG:idom 60 from label 62
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:57,949:DEBUG:find_def_from_top label 60
2020-06-11 12:04:57,949:DEBUG:idom 20 from label 60
2020-06-11 12:04:57,949:DEBUG:find_def_from_bottom label 20
2020-06-11 12:04:57,949:DEBUG:replaced with: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:04:57,949:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:04:57,949:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:04:57,949:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:04:57,950:DEBUG:on stmt: jump 138
2020-06-11 12:04:57,950:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:04:57,950:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,950:DEBUG:on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,950:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:04:57,950:DEBUG:on stmt: branch ok.2, 150, 142
2020-06-11 12:04:57,950:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:04:57,950:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,950:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,950:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:04:57,950:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:04:57,950:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:04:57,950:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:04:57,950:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,950:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:04:57,950:DEBUG:on stmt: jump 168
2020-06-11 12:04:57,950:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:04:57,950:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,950:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:57,950:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:04:57,950:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:04:57,950:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:04:57,950:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:04:57,951:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,951:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:04:57,951:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:04:57,951:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:04:57,951:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:04:57,951:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd385e10>
2020-06-11 12:04:57,951:DEBUG:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:04:57,951:DEBUG:on stmt: jump 20
2020-06-11 12:04:57,951:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:57,952:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10]) ['known_size', 'known_size.2', 'known_size.3']
    num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10]) ['num_neg_value', 'num_neg_value.2', 'num_neg_value.3']
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value.2']
    num_neg_value.1 = $40inplace_add.3       ['$40inplace_add.3', 'num_neg_value.1']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 169                                 []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size.2', 's']
    known_size.1 = $54inplace_multiply.3     ['$54inplace_multiply.3', 'known_size.1']
    jump 169                                 []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value.2 == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value.2']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size.2 ['$74compare_op.2', 'known_size.2', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value.2 == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value.2']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size.2 == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size.2']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size.2 ['$122binary_floor_divide.2', 'known_size.2', 'origsize']
    inferred.1 = $122binary_floor_divide.2   ['$122binary_floor_divide.2', 'inferred.1']
    $130binary_modulo.5 = origsize % known_size.2 ['$130binary_modulo.5', 'known_size.2', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok.1 = $134compare_op.7                  ['$134compare_op.7', 'ok.1']
    jump 138                                 []
label 138:
    ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118]) ['ok', 'ok.1', 'ok.2']
    inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118]) ['inferred', 'inferred.1', 'inferred.2']
    branch ok.2, 150, 142                    ['ok.2']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 150:
    shape[neg_ax] = inferred.2               ['inferred.2', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise <class 'ValueError'>('multiple negative shape values') []
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']
label 169:
    known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36]) ['known_size.1', 'known_size.2', 'known_size.3']
    num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36]) ['num_neg_value.1', 'num_neg_value.2', 'num_neg_value.3']
    jump 20                                  []

2020-06-11 12:04:57,952:DEBUG:================================================================================
2020-06-11 12:04:58,241:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2781)
           2	LOAD_GLOBAL(arg=0, lineno=2781)
           4	LOAD_FAST(arg=1, lineno=2781)
           6	CALL_FUNCTION(arg=1, lineno=2781)
           8	LOAD_METHOD(arg=1, lineno=2781)
          10	CALL_METHOD(arg=0, lineno=2781)
          12	STORE_FAST(arg=3, lineno=2781)
          14	LOAD_DEREF(arg=0, lineno=2782)
          16	LOAD_FAST(arg=0, lineno=2782)
          18	LOAD_FAST(arg=3, lineno=2782)
          20	CALL_FUNCTION(arg=2, lineno=2782)
          22	POP_TOP(arg=None, lineno=2782)
          24	LOAD_GLOBAL(arg=2, lineno=2783)
          26	LOAD_FAST(arg=0, lineno=2783)
          28	LOAD_FAST(arg=1, lineno=2783)
          30	LOAD_FAST(arg=2, lineno=2783)
          32	CALL_FUNCTION(arg=3, lineno=2783)
          34	POP_TOP(arg=None, lineno=2783)
          36	LOAD_CONST(arg=0, lineno=2783)
          38	RETURN_VALUE(arg=None, lineno=2783)
2020-06-11 12:04:58,241:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,241:DEBUG:stack: []
2020-06-11 12:04:58,242:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack []
2020-06-11 12:04:58,242:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack []
2020-06-11 12:04:58,242:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack ['$2load_global.0', '$val4.1']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack ['$6call_function.2']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack ['$8load_method.3']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=2781)
2020-06-11 12:04:58,242:DEBUG:stack ['$10call_method.4']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=2782)
2020-06-11 12:04:58,242:DEBUG:stack []
2020-06-11 12:04:58,242:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2782)
2020-06-11 12:04:58,242:DEBUG:stack ['$14load_deref.5']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=2782)
2020-06-11 12:04:58,242:DEBUG:stack ['$14load_deref.5', '$a16.6']
2020-06-11 12:04:58,242:DEBUG:dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=2782)
2020-06-11 12:04:58,242:DEBUG:stack ['$14load_deref.5', '$a16.6', '$tmpval18.7']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=22, inst=POP_TOP(arg=None, lineno=2782)
2020-06-11 12:04:58,243:DEBUG:stack ['$20call_function.8']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack []
2020-06-11 12:04:58,243:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$24load_global.9']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$24load_global.9', '$a26.10']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$24load_global.9', '$a26.10', '$val28.11']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=3, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$24load_global.9', '$a26.10', '$val28.11', '$wrap30.12']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=34, inst=POP_TOP(arg=None, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$32call_function.13']
2020-06-11 12:04:58,243:DEBUG:dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack []
2020-06-11 12:04:58,243:DEBUG:dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=2783)
2020-06-11 12:04:58,243:DEBUG:stack ['$const36.14']
2020-06-11 12:04:58,243:DEBUG:end state. edges=[]
2020-06-11 12:04:58,243:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,243:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,244:DEBUG:defmap: {}
2020-06-11 12:04:58,244:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,244:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,244:DEBUG:keep phismap: {}
2020-06-11 12:04:58,244:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,244:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,244:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val4.1'}), (6, {'func': '$2load_global.0', 'args': ['$val4.1'], 'res': '$6call_function.2'}), (8, {'item': '$6call_function.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'res': '$a16.6'}), (18, {'res': '$tmpval18.7'}), (20, {'func': '$14load_deref.5', 'args': ['$a16.6', '$tmpval18.7'], 'res': '$20call_function.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$a26.10'}), (28, {'res': '$val28.11'}), (30, {'res': '$wrap30.12'}), (32, {'func': '$24load_global.9', 'args': ['$a26.10', '$val28.11', '$wrap30.12'], 'res': '$32call_function.13'}), (36, {'res': '$const36.14'}), (38, {'retval': '$const36.14', 'castval': '$38return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,244:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7f01cd8083b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7f01cd808170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7f01cd7fbe60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:04:58,248:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,249:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7f01cd8083b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7f01cd808170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7f01cd7fbe60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:04:58,249:DEBUG:================================================================================
2020-06-11 12:04:58,249:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,249:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd422250>
2020-06-11 12:04:58,249:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,249:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:04:58,249:DEBUG:on stmt: wrap = arg(2, name=wrap)
2020-06-11 12:04:58,249:DEBUG:on stmt: $2load_global.0 = global(_asarray: <function _asarray at 0x7f01cd8083b0>)
2020-06-11 12:04:58,249:DEBUG:on stmt: $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:04:58,249:DEBUG:on stmt: $8load_method.3 = getattr(value=$6call_function.2, attr=flatten)
2020-06-11 12:04:58,249:DEBUG:on stmt: $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None)
2020-06-11 12:04:58,249:DEBUG:on stmt: tmpval = $10call_method.4
2020-06-11 12:04:58,249:DEBUG:on stmt: $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7f01cd808170>)
2020-06-11 12:04:58,249:DEBUG:on stmt: $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:04:58,249:DEBUG:on stmt: $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7f01cd7fbe60>)
2020-06-11 12:04:58,249:DEBUG:on stmt: $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:04:58,249:DEBUG:on stmt: $const36.14 = const(NoneType, None)
2020-06-11 12:04:58,249:DEBUG:on stmt: $38return_value.15 = cast(value=$const36.14)
2020-06-11 12:04:58,249:DEBUG:on stmt: return $38return_value.15
2020-06-11 12:04:58,250:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f01c763fa50>],
             '$14load_deref.5': [<numba.core.ir.Assign object at 0x7f01c763fbd0>],
             '$20call_function.8': [<numba.core.ir.Assign object at 0x7f01c763fe90>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x7f01c763ff50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c763f5d0>],
             '$32call_function.13': [<numba.core.ir.Assign object at 0x7f01c7643350>],
             '$38return_value.15': [<numba.core.ir.Assign object at 0x7f01c7643510>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f01c763f810>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f01c763f910>],
             '$const36.14': [<numba.core.ir.Assign object at 0x7f01c76433d0>],
             'a': [<numba.core.ir.Assign object at 0x7f01c763f250>],
             'tmpval': [<numba.core.ir.Assign object at 0x7f01c763fad0>],
             'val': [<numba.core.ir.Assign object at 0x7f01c763f390>],
             'wrap': [<numba.core.ir.Assign object at 0x7f01c763f450>]})
2020-06-11 12:04:58,250:DEBUG:SSA violators set()
2020-06-11 12:04:58,250:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,250:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7f01cd8083b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7f01cd808170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7f01cd7fbe60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:04:58,250:DEBUG:================================================================================
2020-06-11 12:04:58,252:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2763)
           2	LOAD_GLOBAL(arg=0, lineno=2763)
           4	LOAD_ATTR(arg=1, lineno=2763)
           6	LOAD_FAST(arg=0, lineno=2763)
           8	BUILD_LIST(arg=1, lineno=2763)
          10	LOAD_DEREF(arg=0, lineno=2763)
          12	LOAD_CONST(arg=1, lineno=2763)
          14	CALL_FUNCTION_KW(arg=2, lineno=2763)
          16	RETURN_VALUE(arg=None, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,252:DEBUG:stack: []
2020-06-11 12:04:58,252:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack []
2020-06-11 12:04:58,252:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack []
2020-06-11 12:04:58,252:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=8, inst=BUILD_LIST(arg=1, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$4load_attr.1', '$x6.2']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$4load_attr.1', '$8build_list.3']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$4load_attr.1', '$8build_list.3', '$10load_deref.4']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$4load_attr.1', '$8build_list.3', '$10load_deref.4', '$const12.5']
2020-06-11 12:04:58,252:DEBUG:dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=2763)
2020-06-11 12:04:58,252:DEBUG:stack ['$14call_function_kw.6']
2020-06-11 12:04:58,253:DEBUG:end state. edges=[]
2020-06-11 12:04:58,253:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,253:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,253:DEBUG:defmap: {}
2020-06-11 12:04:58,253:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,253:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,253:DEBUG:keep phismap: {}
2020-06-11 12:04:58,253:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,253:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,253:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$x6.2'}), (8, {'items': ['$x6.2'], 'res': '$8build_list.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8build_list.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'retval': '$14call_function_kw.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,254:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,255:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,256:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,256:DEBUG:================================================================================
2020-06-11 12:04:58,256:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,256:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c763c7d0>
2020-06-11 12:04:58,256:DEBUG:on stmt: x = arg(0, name=x)
2020-06-11 12:04:58,256:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,256:DEBUG:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=array)
2020-06-11 12:04:58,256:DEBUG:on stmt: $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)])
2020-06-11 12:04:58,256:DEBUG:on stmt: $10load_deref.4 = freevar(ty: int64)
2020-06-11 12:04:58,256:DEBUG:on stmt: $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None)
2020-06-11 12:04:58,256:DEBUG:on stmt: $16return_value.7 = cast(value=$14call_function_kw.6)
2020-06-11 12:04:58,256:DEBUG:on stmt: return $16return_value.7
2020-06-11 12:04:58,256:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x7f01c760d250>],
             '$14call_function_kw.6': [<numba.core.ir.Assign object at 0x7f01c760aa10>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7f01c760a690>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c760add0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c760aed0>],
             '$8build_list.3': [<numba.core.ir.Assign object at 0x7f01c760d150>],
             'x': [<numba.core.ir.Assign object at 0x7f01c760ad10>]})
2020-06-11 12:04:58,256:DEBUG:SSA violators set()
2020-06-11 12:04:58,256:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,257:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,257:DEBUG:================================================================================
2020-06-11 12:04:58,283:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2737)
           2	LOAD_GLOBAL(arg=0, lineno=2737)
           4	LOAD_METHOD(arg=1, lineno=2737)
           6	LOAD_FAST(arg=0, lineno=2737)
           8	LOAD_ATTR(arg=2, lineno=2737)
          10	CALL_METHOD(arg=1, lineno=2737)
          12	STORE_FAST(arg=2, lineno=2737)
          14	LOAD_FAST(arg=2, lineno=2738)
          16	LOAD_ATTR(arg=3, lineno=2738)
          18	STORE_FAST(arg=3, lineno=2738)
          20	LOAD_FAST(arg=2, lineno=2739)
          22	LOAD_ATTR(arg=4, lineno=2739)
          24	STORE_FAST(arg=4, lineno=2739)
          26	LOAD_FAST(arg=1, lineno=2742)
          28	LOAD_GLOBAL(arg=0, lineno=2742)
          30	LOAD_METHOD(arg=5, lineno=2742)
          32	LOAD_FAST(arg=1, lineno=2742)
          34	CALL_METHOD(arg=1, lineno=2742)
          36	BINARY_SUBSCR(arg=None, lineno=2742)
          38	STORE_FAST(arg=5, lineno=2742)
          40	LOAD_GLOBAL(arg=0, lineno=2743)
          42	LOAD_METHOD(arg=6, lineno=2743)
          44	LOAD_FAST(arg=5, lineno=2743)
          46	LOAD_FAST(arg=3, lineno=2743)
          48	COMPARE_OP(arg=0, lineno=2743)
          50	CALL_METHOD(arg=1, lineno=2743)
          52	POP_JUMP_IF_TRUE(arg=68, lineno=2743)
          54	LOAD_GLOBAL(arg=0, lineno=2743)
          56	LOAD_METHOD(arg=6, lineno=2743)
          58	LOAD_FAST(arg=5, lineno=2743)
          60	LOAD_FAST(arg=4, lineno=2743)
          62	COMPARE_OP(arg=4, lineno=2743)
          64	CALL_METHOD(arg=1, lineno=2743)
          66	POP_JUMP_IF_FALSE(arg=76, lineno=2743)
>         68	LOAD_GLOBAL(arg=7, lineno=2744)
          70	LOAD_CONST(arg=1, lineno=2744)
          72	CALL_FUNCTION(arg=1, lineno=2744)
          74	RAISE_VARARGS(arg=1, lineno=2744)
>         76	LOAD_CONST(arg=0, lineno=2744)
          78	RETURN_VALUE(arg=None, lineno=2744)
2020-06-11 12:04:58,283:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,283:DEBUG:stack: []
2020-06-11 12:04:58,283:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2737)
2020-06-11 12:04:58,283:DEBUG:stack []
2020-06-11 12:04:58,283:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2737)
2020-06-11 12:04:58,283:DEBUG:stack []
2020-06-11 12:04:58,283:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2737)
2020-06-11 12:04:58,283:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,283:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2737)
2020-06-11 12:04:58,283:DEBUG:stack ['$4load_method.1']
2020-06-11 12:04:58,283:DEBUG:dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=2737)
2020-06-11 12:04:58,283:DEBUG:stack ['$4load_method.1', '$a6.2']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2737)
2020-06-11 12:04:58,284:DEBUG:stack ['$4load_method.1', '$8load_attr.3']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=2737)
2020-06-11 12:04:58,284:DEBUG:stack ['$10call_method.4']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2738)
2020-06-11 12:04:58,284:DEBUG:stack []
2020-06-11 12:04:58,284:DEBUG:dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=2738)
2020-06-11 12:04:58,284:DEBUG:stack ['$finfo14.5']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=18, inst=STORE_FAST(arg=3, lineno=2738)
2020-06-11 12:04:58,284:DEBUG:stack ['$16load_attr.6']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2739)
2020-06-11 12:04:58,284:DEBUG:stack []
2020-06-11 12:04:58,284:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2739)
2020-06-11 12:04:58,284:DEBUG:stack ['$finfo20.7']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=2739)
2020-06-11 12:04:58,284:DEBUG:stack ['$22load_attr.8']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:04:58,284:DEBUG:stack []
2020-06-11 12:04:58,284:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=0, lineno=2742)
2020-06-11 12:04:58,284:DEBUG:stack ['$val26.9']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=30, inst=LOAD_METHOD(arg=5, lineno=2742)
2020-06-11 12:04:58,284:DEBUG:stack ['$val26.9', '$28load_global.10']
2020-06-11 12:04:58,284:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:04:58,285:DEBUG:stack ['$val26.9', '$30load_method.11']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=2742)
2020-06-11 12:04:58,285:DEBUG:stack ['$val26.9', '$30load_method.11', '$val32.12']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=2742)
2020-06-11 12:04:58,285:DEBUG:stack ['$val26.9', '$34call_method.13']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=38, inst=STORE_FAST(arg=5, lineno=2742)
2020-06-11 12:04:58,285:DEBUG:stack ['$36binary_subscr.14']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=40, inst=LOAD_GLOBAL(arg=0, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack []
2020-06-11 12:04:58,285:DEBUG:dispatch pc=42, inst=LOAD_METHOD(arg=6, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$40load_global.15']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$42load_method.16']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$42load_method.16', '$finite_vals44.17']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=0, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$42load_method.16', '$finite_vals44.17', '$v_min46.18']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$42load_method.16', '$48compare_op.19']
2020-06-11 12:04:58,285:DEBUG:dispatch pc=52, inst=POP_JUMP_IF_TRUE(arg=68, lineno=2743)
2020-06-11 12:04:58,285:DEBUG:stack ['$50call_method.20']
2020-06-11 12:04:58,285:DEBUG:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,285:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2020-06-11 12:04:58,286:DEBUG:stack: []
2020-06-11 12:04:58,286:DEBUG:dispatch pc=54, inst=LOAD_GLOBAL(arg=0, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack []
2020-06-11 12:04:58,286:DEBUG:dispatch pc=56, inst=LOAD_METHOD(arg=6, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$54load_global.0']
2020-06-11 12:04:58,286:DEBUG:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$56load_method.1']
2020-06-11 12:04:58,286:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$56load_method.1', '$finite_vals58.2']
2020-06-11 12:04:58,286:DEBUG:dispatch pc=62, inst=COMPARE_OP(arg=4, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$56load_method.1', '$finite_vals58.2', '$v_max60.3']
2020-06-11 12:04:58,286:DEBUG:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$56load_method.1', '$62compare_op.4']
2020-06-11 12:04:58,286:DEBUG:dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=76, lineno=2743)
2020-06-11 12:04:58,286:DEBUG:stack ['$64call_method.5']
2020-06-11 12:04:58,286:DEBUG:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,286:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:04:58,286:DEBUG:stack: []
2020-06-11 12:04:58,286:DEBUG:dispatch pc=68, inst=LOAD_GLOBAL(arg=7, lineno=2744)
2020-06-11 12:04:58,286:DEBUG:stack []
2020-06-11 12:04:58,286:DEBUG:dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=2744)
2020-06-11 12:04:58,287:DEBUG:stack ['$68load_global.0']
2020-06-11 12:04:58,287:DEBUG:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=2744)
2020-06-11 12:04:58,287:DEBUG:stack ['$68load_global.0', '$const70.1']
2020-06-11 12:04:58,287:DEBUG:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=2744)
2020-06-11 12:04:58,287:DEBUG:stack ['$72call_function.2']
2020-06-11 12:04:58,287:DEBUG:end state. edges=[]
2020-06-11 12:04:58,287:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:04:58,287:DEBUG:pending: deque([State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:04:58,287:DEBUG:stack: []
2020-06-11 12:04:58,287:DEBUG:dispatch pc=76, inst=LOAD_CONST(arg=0, lineno=2744)
2020-06-11 12:04:58,287:DEBUG:stack []
2020-06-11 12:04:58,287:DEBUG:dispatch pc=78, inst=RETURN_VALUE(arg=None, lineno=2744)
2020-06-11 12:04:58,287:DEBUG:stack ['$const76.0']
2020-06-11 12:04:58,287:DEBUG:end state. edges=[]
2020-06-11 12:04:58,287:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,287:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set()})
2020-06-11 12:04:58,287:DEBUG:defmap: {}
2020-06-11 12:04:58,287:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,288:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,288:DEBUG:keep phismap: {}
2020-06-11 12:04:58,288:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,288:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,288:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'item': '$a6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$finfo14.5'}), (16, {'item': '$finfo14.5', 'res': '$16load_attr.6'}), (18, {'value': '$16load_attr.6'}), (20, {'res': '$finfo20.7'}), (22, {'item': '$finfo20.7', 'res': '$22load_attr.8'}), (24, {'value': '$22load_attr.8'}), (26, {'res': '$val26.9'}), (28, {'res': '$28load_global.10'}), (30, {'item': '$28load_global.10', 'res': '$30load_method.11'}), (32, {'res': '$val32.12'}), (34, {'func': '$30load_method.11', 'args': ['$val32.12'], 'res': '$34call_method.13'}), (36, {'index': '$34call_method.13', 'target': '$val26.9', 'res': '$36binary_subscr.14'}), (38, {'value': '$36binary_subscr.14'}), (40, {'res': '$40load_global.15'}), (42, {'item': '$40load_global.15', 'res': '$42load_method.16'}), (44, {'res': '$finite_vals44.17'}), (46, {'res': '$v_min46.18'}), (48, {'lhs': '$finite_vals44.17', 'rhs': '$v_min46.18', 'res': '$48compare_op.19'}), (50, {'func': '$42load_method.16', 'args': ['$48compare_op.19'], 'res': '$50call_method.20'}), (52, {'pred': '$50call_method.20'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 68: ()})
2020-06-11 12:04:58,288:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'item': '$54load_global.0', 'res': '$56load_method.1'}), (58, {'res': '$finite_vals58.2'}), (60, {'res': '$v_max60.3'}), (62, {'lhs': '$finite_vals58.2', 'rhs': '$v_max60.3', 'res': '$62compare_op.4'}), (64, {'func': '$56load_method.1', 'args': ['$62compare_op.4'], 'res': '$64call_method.5'}), (66, {'pred': '$64call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 76: ()})
2020-06-11 12:04:58,288:DEBUG:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,288:DEBUG:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$const76.0'}), (78, {'retval': '$const76.0', 'castval': '$78return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,289:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:04:58,294:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,295:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise <class 'ValueError'>('Unable to safely conform val to a.dtype') []
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:04:58,295:DEBUG:================================================================================
2020-06-11 12:04:58,295:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,295:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75dee50>
2020-06-11 12:04:58,295:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,295:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:04:58,295:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,295:DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=finfo)
2020-06-11 12:04:58,295:DEBUG:on stmt: $8load_attr.3 = getattr(value=a, attr=dtype)
2020-06-11 12:04:58,295:DEBUG:on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None)
2020-06-11 12:04:58,295:DEBUG:on stmt: finfo = $10call_method.4
2020-06-11 12:04:58,295:DEBUG:on stmt: $16load_attr.6 = getattr(value=finfo, attr=min)
2020-06-11 12:04:58,295:DEBUG:on stmt: v_min = $16load_attr.6
2020-06-11 12:04:58,295:DEBUG:on stmt: $22load_attr.8 = getattr(value=finfo, attr=max)
2020-06-11 12:04:58,295:DEBUG:on stmt: v_max = $22load_attr.8
2020-06-11 12:04:58,295:DEBUG:on stmt: $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,295:DEBUG:on stmt: $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite)
2020-06-11 12:04:58,295:DEBUG:on stmt: $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None)
2020-06-11 12:04:58,295:DEBUG:on stmt: $36binary_subscr.14 = getitem(value=val, index=$34call_method.13)
2020-06-11 12:04:58,295:DEBUG:on stmt: finite_vals = $36binary_subscr.14
2020-06-11 12:04:58,296:DEBUG:on stmt: $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,296:DEBUG:on stmt: $42load_method.16 = getattr(value=$40load_global.15, attr=any)
2020-06-11 12:04:58,296:DEBUG:on stmt: $48compare_op.19 = finite_vals < v_min
2020-06-11 12:04:58,296:DEBUG:on stmt: $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None)
2020-06-11 12:04:58,296:DEBUG:on stmt: branch $50call_method.20, 68, 54
2020-06-11 12:04:58,296:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:04:58,296:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75dee50>
2020-06-11 12:04:58,296:DEBUG:on stmt: $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,296:DEBUG:on stmt: $56load_method.1 = getattr(value=$54load_global.0, attr=any)
2020-06-11 12:04:58,296:DEBUG:on stmt: $62compare_op.4 = finite_vals > v_max
2020-06-11 12:04:58,296:DEBUG:on stmt: $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None)
2020-06-11 12:04:58,296:DEBUG:on stmt: branch $64call_method.5, 68, 76
2020-06-11 12:04:58,296:DEBUG:==== SSA block analysis pass on 68
2020-06-11 12:04:58,296:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75dee50>
2020-06-11 12:04:58,296:DEBUG:on stmt: $68load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:58,296:DEBUG:on stmt: $const70.1 = const(str, Unable to safely conform val to a.dtype)
2020-06-11 12:04:58,296:DEBUG:on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None)
2020-06-11 12:04:58,296:DEBUG:on stmt: raise <class 'ValueError'>('Unable to safely conform val to a.dtype')
2020-06-11 12:04:58,296:DEBUG:==== SSA block analysis pass on 76
2020-06-11 12:04:58,296:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75dee50>
2020-06-11 12:04:58,296:DEBUG:on stmt: $const76.0 = const(NoneType, None)
2020-06-11 12:04:58,296:DEBUG:on stmt: $78return_value.1 = cast(value=$const76.0)
2020-06-11 12:04:58,296:DEBUG:on stmt: return $78return_value.1
2020-06-11 12:04:58,297:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f01c75da090>],
             '$16load_attr.6': [<numba.core.ir.Assign object at 0x7f01c75da290>],
             '$22load_attr.8': [<numba.core.ir.Assign object at 0x7f01c75da510>],
             '$28load_global.10': [<numba.core.ir.Assign object at 0x7f01c75da790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c75d4a90>],
             '$30load_method.11': [<numba.core.ir.Assign object at 0x7f01c75da890>],
             '$34call_method.13': [<numba.core.ir.Assign object at 0x7f01c75daa50>],
             '$36binary_subscr.14': [<numba.core.ir.Assign object at 0x7f01c75dab10>],
             '$40load_global.15': [<numba.core.ir.Assign object at 0x7f01c75dacd0>],
             '$42load_method.16': [<numba.core.ir.Assign object at 0x7f01c75dae10>],
             '$48compare_op.19': [<numba.core.ir.Assign object at 0x7f01c75de090>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f01c75d4c90>],
             '$50call_method.20': [<numba.core.ir.Assign object at 0x7f01c75de1d0>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x7f01c75d4d50>],
             '$56load_method.1': [<numba.core.ir.Assign object at 0x7f01c75de310>],
             '$62compare_op.4': [<numba.core.ir.Assign object at 0x7f01c75de550>],
             '$64call_method.5': [<numba.core.ir.Assign object at 0x7f01c75de6d0>],
             '$68load_global.0': [<numba.core.ir.Assign object at 0x7f01c75de7d0>],
             '$72call_function.2': [<numba.core.ir.Assign object at 0x7f01c75dea10>],
             '$78return_value.1': [<numba.core.ir.Assign object at 0x7f01c75ded10>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f01c75d4ed0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f01c75de8d0>],
             '$const76.0': [<numba.core.ir.Assign object at 0x7f01c75debd0>],
             'a': [<numba.core.ir.Assign object at 0x7f01c75d48d0>],
             'finfo': [<numba.core.ir.Assign object at 0x7f01c75da110>],
             'finite_vals': [<numba.core.ir.Assign object at 0x7f01c75dabd0>],
             'v_max': [<numba.core.ir.Assign object at 0x7f01c75da5d0>],
             'v_min': [<numba.core.ir.Assign object at 0x7f01c75da350>],
             'val': [<numba.core.ir.Assign object at 0x7f01c75d4b10>]})
2020-06-11 12:04:58,297:DEBUG:SSA violators set()
2020-06-11 12:04:58,297:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,297:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise <class 'ValueError'>('Unable to safely conform val to a.dtype') []
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:04:58,297:DEBUG:================================================================================
2020-06-11 12:04:58,300:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3658)
           2	LOAD_DEREF(arg=0, lineno=3658)
           4	LOAD_DEREF(arg=1, lineno=3658)
           6	CALL_FUNCTION_EX(arg=0, lineno=3658)
           8	RETURN_VALUE(arg=None, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,300:DEBUG:stack: []
2020-06-11 12:04:58,300:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:stack []
2020-06-11 12:04:58,300:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:stack []
2020-06-11 12:04:58,300:DEBUG:dispatch pc=4, inst=LOAD_DEREF(arg=1, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:04:58,300:DEBUG:dispatch pc=6, inst=CALL_FUNCTION_EX(arg=0, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:stack ['$2load_deref.0', '$4load_deref.1']
2020-06-11 12:04:58,300:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3658)
2020-06-11 12:04:58,300:DEBUG:stack ['$6call_function_ex.2']
2020-06-11 12:04:58,300:DEBUG:end state. edges=[]
2020-06-11 12:04:58,300:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,300:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,300:DEBUG:defmap: {}
2020-06-11 12:04:58,300:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,300:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,301:DEBUG:keep phismap: {}
2020-06-11 12:04:58,301:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,301:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,301:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_deref.1'}), (6, {'func': '$2load_deref.0', 'vararg': '$4load_deref.1', 'res': '$6call_function_ex.2'}), (8, {'retval': '$6call_function_ex.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,301:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,303:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,303:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,303:DEBUG:================================================================================
2020-06-11 12:04:58,303:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,303:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75ebe90>
2020-06-11 12:04:58,303:DEBUG:on stmt: arg = arg(0, name=arg)
2020-06-11 12:04:58,303:DEBUG:on stmt: $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>)
2020-06-11 12:04:58,303:DEBUG:on stmt: $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64))
2020-06-11 12:04:58,303:DEBUG:on stmt: $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1)
2020-06-11 12:04:58,303:DEBUG:on stmt: $8return_value.3 = cast(value=$6call_function_ex.2)
2020-06-11 12:04:58,303:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:58,303:DEBUG:defs defaultdict(<class 'list'>,
            {'$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c75eeb10>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x7f01c75eec10>],
             '$6call_function_ex.2': [<numba.core.ir.Assign object at 0x7f01c75eecd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c75e6f50>],
             'arg': [<numba.core.ir.Assign object at 0x7f01c75eea50>]})
2020-06-11 12:04:58,303:DEBUG:SSA violators set()
2020-06-11 12:04:58,304:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,304:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,304:DEBUG:================================================================================
2020-06-11 12:04:58,329:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=651)
           2	SETUP_LOOP(arg=30, lineno=651)
           4	LOAD_GLOBAL(arg=0, lineno=651)
           6	LOAD_METHOD(arg=1, lineno=651)
           8	LOAD_FAST(arg=0, lineno=651)
          10	CALL_METHOD(arg=1, lineno=651)
          12	GET_ITER(arg=None, lineno=651)
>         14	FOR_ITER(arg=16, lineno=651)
          16	STORE_FAST(arg=1, lineno=651)
          18	LOAD_FAST(arg=1, lineno=652)
          20	LOAD_METHOD(arg=2, lineno=652)
          22	CALL_METHOD(arg=0, lineno=652)
          24	POP_JUMP_IF_FALSE(arg=14, lineno=652)
          26	LOAD_CONST(arg=1, lineno=653)
          28	RETURN_VALUE(arg=None, lineno=653)
          30	JUMP_ABSOLUTE(arg=14, lineno=653)
>         32	POP_BLOCK(arg=None, lineno=653)
>         34	LOAD_CONST(arg=2, lineno=654)
          36	RETURN_VALUE(arg=None, lineno=654)
2020-06-11 12:04:58,329:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,329:DEBUG:stack: []
2020-06-11 12:04:58,329:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack []
2020-06-11 12:04:58,329:DEBUG:end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,329:DEBUG:pending: deque([State(pc_initial=2 nstack_initial=0)])
2020-06-11 12:04:58,329:DEBUG:stack: []
2020-06-11 12:04:58,329:DEBUG:dispatch pc=2, inst=SETUP_LOOP(arg=30, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack []
2020-06-11 12:04:58,329:DEBUG:dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack []
2020-06-11 12:04:58,329:DEBUG:dispatch pc=6, inst=LOAD_METHOD(arg=1, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack ['$4load_global.0']
2020-06-11 12:04:58,329:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack ['$6load_method.1']
2020-06-11 12:04:58,329:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=651)
2020-06-11 12:04:58,329:DEBUG:stack ['$6load_method.1', '$a8.2']
2020-06-11 12:04:58,330:DEBUG:dispatch pc=12, inst=GET_ITER(arg=None, lineno=651)
2020-06-11 12:04:58,330:DEBUG:stack ['$10call_method.3']
2020-06-11 12:04:58,330:DEBUG:end state. edges=[Edge(pc=14, stack=('$12get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,330:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:58,330:DEBUG:stack: ['$phi14.0']
2020-06-11 12:04:58,330:DEBUG:dispatch pc=14, inst=FOR_ITER(arg=16, lineno=651)
2020-06-11 12:04:58,330:DEBUG:stack ['$phi14.0']
2020-06-11 12:04:58,330:DEBUG:end state. edges=[Edge(pc=32, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,330:DEBUG:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
2020-06-11 12:04:58,330:DEBUG:stack: []
2020-06-11 12:04:58,330:DEBUG:dispatch pc=32, inst=POP_BLOCK(arg=None, lineno=653)
2020-06-11 12:04:58,330:DEBUG:stack []
2020-06-11 12:04:58,330:DEBUG:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,330:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=2), State(pc_initial=34 nstack_initial=0)])
2020-06-11 12:04:58,330:DEBUG:stack: ['$phi16.0', '$phi16.1']
2020-06-11 12:04:58,330:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=1, lineno=651)
2020-06-11 12:04:58,330:DEBUG:stack ['$phi16.0', '$phi16.1']
2020-06-11 12:04:58,330:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=652)
2020-06-11 12:04:58,330:DEBUG:stack ['$phi16.0']
2020-06-11 12:04:58,330:DEBUG:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=652)
2020-06-11 12:04:58,330:DEBUG:stack ['$phi16.0', '$v18.2']
2020-06-11 12:04:58,331:DEBUG:dispatch pc=22, inst=CALL_METHOD(arg=0, lineno=652)
2020-06-11 12:04:58,331:DEBUG:stack ['$phi16.0', '$20load_method.3']
2020-06-11 12:04:58,331:DEBUG:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=14, lineno=652)
2020-06-11 12:04:58,331:DEBUG:stack ['$phi16.0', '$22call_method.4']
2020-06-11 12:04:58,331:DEBUG:end state. edges=[Edge(pc=26, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,331:DEBUG:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=26 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:58,331:DEBUG:stack: []
2020-06-11 12:04:58,331:DEBUG:dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=654)
2020-06-11 12:04:58,331:DEBUG:stack []
2020-06-11 12:04:58,331:DEBUG:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=654)
2020-06-11 12:04:58,331:DEBUG:stack ['$const34.0']
2020-06-11 12:04:58,331:DEBUG:end state. edges=[]
2020-06-11 12:04:58,331:DEBUG:pending: deque([State(pc_initial=26 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:58,331:DEBUG:stack: ['$phi26.0']
2020-06-11 12:04:58,331:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=653)
2020-06-11 12:04:58,331:DEBUG:stack ['$phi26.0']
2020-06-11 12:04:58,331:DEBUG:dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=653)
2020-06-11 12:04:58,331:DEBUG:stack ['$phi26.0', '$const26.1']
2020-06-11 12:04:58,331:DEBUG:end state. edges=[]
2020-06-11 12:04:58,331:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:58,332:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,332:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=26 nstack_initial=1): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set()})
2020-06-11 12:04:58,332:DEBUG:defmap: {'$phi14.0': State(pc_initial=2 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
2020-06-11 12:04:58,332:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
2020-06-11 12:04:58,332:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:04:58,332:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:04:58,333:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:04:58,333:DEBUG:keep phismap: {'$phi14.0': {('$12get_iter.4', State(pc_initial=2 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
2020-06-11 12:04:58,333:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi14.0': '$12get_iter.4'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
2020-06-11 12:04:58,333:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'item': '$4load_global.0', 'res': '$6load_method.1'}), (8, {'res': '$a8.2'}), (10, {'func': '$6load_method.1', 'args': ['$a8.2'], 'res': '$10call_method.3'}), (12, {'value': '$10call_method.3', 'res': '$12get_iter.4'})), outgoing_phis={'$phi14.0': '$12get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.4',)})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: (), 16: ('$phi14.0', '$14for_iter.2')})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$v18.2'}), (20, {'item': '$v18.2', 'res': '$20load_method.3'}), (22, {'func': '$20load_method.3', 'args': [], 'res': '$22call_method.4'}), (24, {'pred': '$22call_method.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={26: ('$phi16.0',), 14: ('$phi16.0',)})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'res': '$const26.1'}), (28, {'retval': '$const26.1', 'castval': '$28return_value.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={34: ()})
2020-06-11 12:04:58,333:DEBUG:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,334:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:04:58,340:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,340:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:04:58,340:DEBUG:================================================================================
2020-06-11 12:04:58,340:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,340:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,340:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,340:DEBUG:on stmt: jump 2
2020-06-11 12:04:58,341:DEBUG:==== SSA block analysis pass on 2
2020-06-11 12:04:58,341:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,341:DEBUG:on stmt: $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:58,341:DEBUG:on stmt: $6load_method.1 = getattr(value=$4load_global.0, attr=nditer)
2020-06-11 12:04:58,341:DEBUG:on stmt: $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None)
2020-06-11 12:04:58,341:DEBUG:on stmt: $12get_iter.4 = getiter(value=$10call_method.3)
2020-06-11 12:04:58,341:DEBUG:on stmt: $phi14.0 = $12get_iter.4
2020-06-11 12:04:58,341:DEBUG:on stmt: jump 14
2020-06-11 12:04:58,341:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:04:58,341:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,341:DEBUG:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
2020-06-11 12:04:58,341:DEBUG:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
2020-06-11 12:04:58,341:DEBUG:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
2020-06-11 12:04:58,341:DEBUG:on stmt: $phi16.1 = $14for_iter.2
2020-06-11 12:04:58,341:DEBUG:on stmt: branch $14for_iter.3, 16, 32
2020-06-11 12:04:58,341:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:04:58,341:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,341:DEBUG:on stmt: v = $phi16.1
2020-06-11 12:04:58,341:DEBUG:on stmt: $20load_method.3 = getattr(value=v, attr=item)
2020-06-11 12:04:58,341:DEBUG:on stmt: $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None)
2020-06-11 12:04:58,341:DEBUG:on stmt: branch $22call_method.4, 26, 14
2020-06-11 12:04:58,341:DEBUG:==== SSA block analysis pass on 26
2020-06-11 12:04:58,341:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,341:DEBUG:on stmt: $const26.1 = const(bool, True)
2020-06-11 12:04:58,342:DEBUG:on stmt: $28return_value.2 = cast(value=$const26.1)
2020-06-11 12:04:58,342:DEBUG:on stmt: return $28return_value.2
2020-06-11 12:04:58,342:DEBUG:==== SSA block analysis pass on 32
2020-06-11 12:04:58,342:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,342:DEBUG:on stmt: jump 34
2020-06-11 12:04:58,342:DEBUG:==== SSA block analysis pass on 34
2020-06-11 12:04:58,342:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a290>
2020-06-11 12:04:58,342:DEBUG:on stmt: $const34.0 = const(bool, False)
2020-06-11 12:04:58,342:DEBUG:on stmt: $36return_value.1 = cast(value=$const34.0)
2020-06-11 12:04:58,342:DEBUG:on stmt: return $36return_value.1
2020-06-11 12:04:58,342:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.3': [<numba.core.ir.Assign object at 0x7f01c74f82d0>],
             '$12get_iter.4': [<numba.core.ir.Assign object at 0x7f01c74f83d0>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x7f01c74f8610>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x7f01c74f86d0>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x7f01c74f8790>],
             '$20load_method.3': [<numba.core.ir.Assign object at 0x7f01c74f8bd0>],
             '$22call_method.4': [<numba.core.ir.Assign object at 0x7f01c74f8cd0>],
             '$28return_value.2': [<numba.core.ir.Assign object at 0x7f01c74f8f90>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7f01c7501350>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x7f01c7573f50>],
             '$6load_method.1': [<numba.core.ir.Assign object at 0x7f01c74f8090>],
             '$const26.1': [<numba.core.ir.Assign object at 0x7f01c74f8e50>],
             '$const34.0': [<numba.core.ir.Assign object at 0x7f01c7501250>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x7f01c74f8410>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x7f01c74f8810>],
             'a': [<numba.core.ir.Assign object at 0x7f01c7573d10>],
             'v': [<numba.core.ir.Assign object at 0x7f01c74f89d0>]})
2020-06-11 12:04:58,342:DEBUG:SSA violators set()
2020-06-11 12:04:58,342:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,343:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:04:58,343:DEBUG:================================================================================
2020-06-11 12:04:58,353:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2716)
           2	LOAD_GLOBAL(arg=0, lineno=2716)
           4	LOAD_FAST(arg=0, lineno=2716)
           6	CALL_FUNCTION(arg=1, lineno=2716)
           8	STORE_FAST(arg=2, lineno=2716)
          10	SETUP_LOOP(arg=52, lineno=2717)
          12	LOAD_GLOBAL(arg=1, lineno=2717)
          14	LOAD_FAST(arg=2, lineno=2717)
          16	CALL_FUNCTION(arg=1, lineno=2717)
          18	GET_ITER(arg=None, lineno=2717)
>         20	FOR_ITER(arg=40, lineno=2717)
          22	STORE_FAST(arg=3, lineno=2717)
          24	LOAD_FAST(arg=0, lineno=2718)
          26	LOAD_FAST(arg=3, lineno=2718)
          28	BINARY_SUBSCR(arg=None, lineno=2718)
          30	LOAD_FAST(arg=1, lineno=2718)
          32	LOAD_GLOBAL(arg=0, lineno=2718)
          34	LOAD_FAST(arg=1, lineno=2718)
          36	CALL_FUNCTION(arg=1, lineno=2718)
          38	LOAD_FAST(arg=2, lineno=2718)
          40	BINARY_SUBTRACT(arg=None, lineno=2718)
          42	LOAD_FAST(arg=3, lineno=2718)
          44	BINARY_ADD(arg=None, lineno=2718)
          46	BINARY_SUBSCR(arg=None, lineno=2718)
          48	COMPARE_OP(arg=3, lineno=2718)
          50	POP_JUMP_IF_FALSE(arg=20, lineno=2718)
          52	LOAD_GLOBAL(arg=2, lineno=2719)
          54	LOAD_CONST(arg=1, lineno=2719)
          56	CALL_FUNCTION(arg=1, lineno=2719)
          58	RAISE_VARARGS(arg=1, lineno=2719)
          60	JUMP_ABSOLUTE(arg=20, lineno=2719)
>         62	POP_BLOCK(arg=None, lineno=2719)
>         64	LOAD_CONST(arg=0, lineno=2719)
          66	RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:04:58,353:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,353:DEBUG:stack: []
2020-06-11 12:04:58,353:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2716)
2020-06-11 12:04:58,353:DEBUG:stack []
2020-06-11 12:04:58,353:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2716)
2020-06-11 12:04:58,353:DEBUG:stack []
2020-06-11 12:04:58,353:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2716)
2020-06-11 12:04:58,353:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,354:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2716)
2020-06-11 12:04:58,354:DEBUG:stack ['$2load_global.0', '$shape4.1']
2020-06-11 12:04:58,354:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2716)
2020-06-11 12:04:58,354:DEBUG:stack ['$6call_function.2']
2020-06-11 12:04:58,354:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,354:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:04:58,354:DEBUG:stack: []
2020-06-11 12:04:58,354:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=52, lineno=2717)
2020-06-11 12:04:58,354:DEBUG:stack []
2020-06-11 12:04:58,354:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=2717)
2020-06-11 12:04:58,354:DEBUG:stack []
2020-06-11 12:04:58,354:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2717)
2020-06-11 12:04:58,354:DEBUG:stack ['$12load_global.0']
2020-06-11 12:04:58,354:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=2717)
2020-06-11 12:04:58,354:DEBUG:stack ['$12load_global.0', '$n14.1']
2020-06-11 12:04:58,354:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=2717)
2020-06-11 12:04:58,354:DEBUG:stack ['$16call_function.2']
2020-06-11 12:04:58,354:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,354:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:58,355:DEBUG:stack: ['$phi20.0']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=40, lineno=2717)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi20.0']
2020-06-11 12:04:58,355:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,355:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:04:58,355:DEBUG:stack: []
2020-06-11 12:04:58,355:DEBUG:dispatch pc=62, inst=POP_BLOCK(arg=None, lineno=2719)
2020-06-11 12:04:58,355:DEBUG:stack []
2020-06-11 12:04:58,355:DEBUG:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,355:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=64 nstack_initial=0)])
2020-06-11 12:04:58,355:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=22, inst=STORE_FAST(arg=3, lineno=2717)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=2718)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi22.0']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi22.0', '$shape24.2']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi22.0', '$shape24.2', '$i26.3']
2020-06-11 12:04:58,355:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:04:58,355:DEBUG:stack ['$phi22.0', '$28binary_subscr.4']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6', '$main_shape34.7']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8', '$n38.9']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10', '$i42.11']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$44binary_add.12']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=3, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$46binary_subscr.13']
2020-06-11 12:04:58,356:DEBUG:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=20, lineno=2718)
2020-06-11 12:04:58,356:DEBUG:stack ['$phi22.0', '$48compare_op.14']
2020-06-11 12:04:58,356:DEBUG:end state. edges=[Edge(pc=52, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,356:DEBUG:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:58,356:DEBUG:stack: []
2020-06-11 12:04:58,357:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack []
2020-06-11 12:04:58,357:DEBUG:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack ['$const64.0']
2020-06-11 12:04:58,357:DEBUG:end state. edges=[]
2020-06-11 12:04:58,357:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:58,357:DEBUG:stack: ['$phi52.0']
2020-06-11 12:04:58,357:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack ['$phi52.0']
2020-06-11 12:04:58,357:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack ['$phi52.0', '$52load_global.1']
2020-06-11 12:04:58,357:DEBUG:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack ['$phi52.0', '$52load_global.1', '$const54.2']
2020-06-11 12:04:58,357:DEBUG:dispatch pc=58, inst=RAISE_VARARGS(arg=1, lineno=2719)
2020-06-11 12:04:58,357:DEBUG:stack ['$phi52.0', '$56call_function.3']
2020-06-11 12:04:58,357:DEBUG:end state. edges=[]
2020-06-11 12:04:58,357:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:04:58,357:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,357:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=52 nstack_initial=1): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2020-06-11 12:04:58,358:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:04:58,358:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:04:58,358:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:58,358:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:58,358:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:04:58,358:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:04:58,359:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:04:58,359:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$n14.1'}), (16, {'func': '$12load_global.0', 'args': ['$n14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$shape24.2'}), (26, {'res': '$i26.3'}), (28, {'index': '$i26.3', 'target': '$shape24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$main_shape30.5'}), (32, {'res': '$32load_global.6'}), (34, {'res': '$main_shape34.7'}), (36, {'func': '$32load_global.6', 'args': ['$main_shape34.7'], 'res': '$36call_function.8'}), (38, {'res': '$n38.9'}), (40, {'lhs': '$36call_function.8', 'rhs': '$n38.9', 'res': '$40binary_subtract.10'}), (42, {'res': '$i42.11'}), (44, {'lhs': '$40binary_subtract.10', 'rhs': '$i42.11', 'res': '$44binary_add.12'}), (46, {'index': '$44binary_add.12', 'target': '$main_shape30.5', 'res': '$46binary_subscr.13'}), (48, {'lhs': '$28binary_subscr.4', 'rhs': '$46binary_subscr.13', 'res': '$48compare_op.14'}), (50, {'pred': '$48compare_op.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: ('$phi22.0',), 20: ('$phi22.0',)})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.1'}), (54, {'res': '$const54.2'}), (56, {'func': '$52load_global.1', 'args': ['$const54.2'], 'res': '$56call_function.3'}), (58, {'exc': '$56call_function.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ()})
2020-06-11 12:04:58,359:DEBUG:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,360:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2716)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'shape']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = call $32load_global.6(main_shape, func=$32load_global.6, args=[Var(main_shape, arrayobj.py:2716)], kws=(), vararg=None) ['$32load_global.6', '$36call_function.8', 'main_shape']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise $56call_function.3                 ['$56call_function.3']
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:04:58,366:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,366:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 1)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 1)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:04:58,366:DEBUG:================================================================================
2020-06-11 12:04:58,366:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,366:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,366:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:04:58,366:DEBUG:on stmt: main_shape = arg(1, name=main_shape)
2020-06-11 12:04:58,367:DEBUG:on stmt: $2load_global.0 = global(len: <built-in function len>)
2020-06-11 12:04:58,367:DEBUG:on stmt: $6call_function.2 = const(int, 1)
2020-06-11 12:04:58,367:DEBUG:on stmt: n = $6call_function.2
2020-06-11 12:04:58,367:DEBUG:on stmt: jump 10
2020-06-11 12:04:58,367:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:04:58,367:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,367:DEBUG:on stmt: $12load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:58,367:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None)
2020-06-11 12:04:58,367:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:04:58,367:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:04:58,367:DEBUG:on stmt: jump 20
2020-06-11 12:04:58,367:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:04:58,367:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,367:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:04:58,367:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:04:58,367:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:04:58,367:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:04:58,367:DEBUG:on stmt: branch $20for_iter.3, 22, 62
2020-06-11 12:04:58,367:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:04:58,367:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,367:DEBUG:on stmt: i = $phi22.1
2020-06-11 12:04:58,367:DEBUG:on stmt: $28binary_subscr.4 = getitem(value=shape, index=i)
2020-06-11 12:04:58,367:DEBUG:on stmt: $32load_global.6 = global(len: <built-in function len>)
2020-06-11 12:04:58,367:DEBUG:on stmt: $36call_function.8 = const(int, 1)
2020-06-11 12:04:58,367:DEBUG:on stmt: $40binary_subtract.10 = $36call_function.8 - n
2020-06-11 12:04:58,367:DEBUG:on stmt: $44binary_add.12 = $40binary_subtract.10 + i
2020-06-11 12:04:58,368:DEBUG:on stmt: $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12)
2020-06-11 12:04:58,368:DEBUG:on stmt: $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13
2020-06-11 12:04:58,368:DEBUG:on stmt: branch $48compare_op.14, 52, 20
2020-06-11 12:04:58,368:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:04:58,368:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,368:DEBUG:on stmt: $52load_global.1 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:58,368:DEBUG:on stmt: $const54.2 = const(str, nditer(): operands could not be broadcast together)
2020-06-11 12:04:58,368:DEBUG:on stmt: $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None)
2020-06-11 12:04:58,368:DEBUG:on stmt: raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2020-06-11 12:04:58,368:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:04:58,368:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,368:DEBUG:on stmt: jump 64
2020-06-11 12:04:58,368:DEBUG:==== SSA block analysis pass on 64
2020-06-11 12:04:58,368:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75aba10>
2020-06-11 12:04:58,368:DEBUG:on stmt: $const64.0 = const(NoneType, None)
2020-06-11 12:04:58,368:DEBUG:on stmt: $66return_value.1 = cast(value=$const64.0)
2020-06-11 12:04:58,368:DEBUG:on stmt: return $66return_value.1
2020-06-11 12:04:58,368:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_global.0': [<numba.core.ir.Assign object at 0x7f01c7594d10>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f01c7594f10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f01c7594fd0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f01c7599210>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f01c75992d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f01c7599390>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x7f01c7599850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c75947d0>],
             '$32load_global.6': [<numba.core.ir.Assign object at 0x7f01c7599b10>],
             '$36call_function.8': [<numba.core.ir.Assign object at 0x7f01c7599d10>],
             '$40binary_subtract.10': [<numba.core.ir.Assign object at 0x7f01c7599e50>],
             '$44binary_add.12': [<numba.core.ir.Assign object at 0x7f01c7599910>],
             '$46binary_subscr.13': [<numba.core.ir.Assign object at 0x7f01c7586190>],
             '$48compare_op.14': [<numba.core.ir.Assign object at 0x7f01c7586110>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x7f01c7599150>],
             '$56call_function.3': [<numba.core.ir.Assign object at 0x7f01c75866d0>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7f01c7586b90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f01c7594890>],
             '$const54.2': [<numba.core.ir.Assign object at 0x7f01c7586310>],
             '$const64.0': [<numba.core.ir.Assign object at 0x7f01c7586a90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f01c7594710>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f01c7599410>],
             'i': [<numba.core.ir.Assign object at 0x7f01c75995d0>],
             'main_shape': [<numba.core.ir.Assign object at 0x7f01c7594ad0>],
             'n': [<numba.core.ir.Assign object at 0x7f01c7594bd0>],
             'shape': [<numba.core.ir.Assign object at 0x7f01c7594910>]})
2020-06-11 12:04:58,368:DEBUG:SSA violators set()
2020-06-11 12:04:58,369:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,369:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 1)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 1)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:04:58,369:DEBUG:================================================================================
2020-06-11 12:04:58,459:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2737)
           6	CALL_FUNCTION(arg=1, lineno=2737)
           8	RETURN_VALUE(arg=None, lineno=2737)
2020-06-11 12:04:58,459:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,459:DEBUG:stack: []
2020-06-11 12:04:58,459:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:04:58,459:DEBUG:stack []
2020-06-11 12:04:58,459:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:04:58,459:DEBUG:stack []
2020-06-11 12:04:58,459:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2737)
2020-06-11 12:04:58,459:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,459:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2737)
2020-06-11 12:04:58,459:DEBUG:stack ['$2load_global.0', '$val_14.1']
2020-06-11 12:04:58,459:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2737)
2020-06-11 12:04:58,459:DEBUG:stack ['$6call_function.2']
2020-06-11 12:04:58,459:DEBUG:end state. edges=[]
2020-06-11 12:04:58,460:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,460:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,460:DEBUG:defmap: {}
2020-06-11 12:04:58,460:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,460:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,460:DEBUG:keep phismap: {}
2020-06-11 12:04:58,460:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,460:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,460:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val_14.1'}), (6, {'func': '$2load_global.0', 'args': ['$val_14.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,460:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bcfb5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,462:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,462:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bcfb5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,462:DEBUG:================================================================================
2020-06-11 12:04:58,462:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,462:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7447f10>
2020-06-11 12:04:58,462:DEBUG:on stmt: val_1 = arg(0, name=val_1)
2020-06-11 12:04:58,462:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bcfb5: <ufunc 'isfinite'>)
2020-06-11 12:04:58,462:DEBUG:on stmt: $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None)
2020-06-11 12:04:58,462:DEBUG:on stmt: $8return_value.3 = cast(value=$6call_function.2)
2020-06-11 12:04:58,462:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:58,462:DEBUG:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c7440e50>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f01c7440d90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c7440290>],
             'val_1': [<numba.core.ir.Assign object at 0x7f01c74b1710>]})
2020-06-11 12:04:58,463:DEBUG:SSA violators set()
2020-06-11 12:04:58,463:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,463:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bcfb5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,463:DEBUG:================================================================================
2020-06-11 12:04:58,472:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=201)
           2	LOAD_FAST(arg=0, lineno=201)
           4	LOAD_FAST(arg=2, lineno=201)
           6	COMPARE_OP(arg=4, lineno=201)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=201)
          10	LOAD_CONST(arg=1, lineno=204)
          12	RETURN_VALUE(arg=None, lineno=204)
>         14	LOAD_CONST(arg=1, lineno=206)
          16	STORE_FAST(arg=4, lineno=206)
          18	LOAD_FAST(arg=2, lineno=207)
          20	LOAD_FAST(arg=0, lineno=207)
          22	BINARY_SUBTRACT(arg=None, lineno=207)
          24	STORE_FAST(arg=5, lineno=207)
          26	SETUP_LOOP(arg=96, lineno=208)
>         28	LOAD_FAST(arg=4, lineno=208)
          30	LOAD_FAST(arg=0, lineno=208)
          32	COMPARE_OP(arg=0, lineno=208)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=208)
          36	LOAD_FAST(arg=1, lineno=209)
          38	LOAD_FAST(arg=4, lineno=209)
          40	BINARY_SUBSCR(arg=None, lineno=209)
          42	STORE_FAST(arg=6, lineno=209)
          44	LOAD_FAST(arg=3, lineno=210)
          46	LOAD_FAST(arg=5, lineno=210)
          48	BINARY_SUBSCR(arg=None, lineno=210)
          50	STORE_FAST(arg=7, lineno=210)
          52	LOAD_FAST(arg=7, lineno=213)
          54	LOAD_CONST(arg=2, lineno=213)
          56	COMPARE_OP(arg=3, lineno=213)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=213)
          60	LOAD_FAST(arg=6, lineno=217)
          62	LOAD_FAST(arg=7, lineno=217)
          64	COMPARE_OP(arg=3, lineno=217)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=217)
          68	LOAD_FAST(arg=6, lineno=217)
          70	LOAD_CONST(arg=2, lineno=217)
          72	COMPARE_OP(arg=3, lineno=217)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=217)
          76	LOAD_FAST(arg=5, lineno=218)
          78	LOAD_CONST(arg=2, lineno=218)
          80	BINARY_ADD(arg=None, lineno=218)
          82	UNARY_NEGATIVE(arg=None, lineno=218)
          84	RETURN_VALUE(arg=None, lineno=218)
          86	JUMP_FORWARD(arg=16, lineno=218)
>         88	LOAD_FAST(arg=6, lineno=219)
          90	LOAD_CONST(arg=2, lineno=219)
          92	COMPARE_OP(arg=3, lineno=219)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=219)
          96	LOAD_FAST(arg=6, lineno=221)
          98	LOAD_FAST(arg=3, lineno=221)
         100	LOAD_FAST(arg=5, lineno=221)
         102	STORE_SUBSCR(arg=None, lineno=221)
>        104	LOAD_FAST(arg=4, lineno=222)
         106	LOAD_CONST(arg=2, lineno=222)
         108	INPLACE_ADD(arg=None, lineno=222)
         110	STORE_FAST(arg=4, lineno=222)
         112	LOAD_FAST(arg=5, lineno=223)
         114	LOAD_CONST(arg=2, lineno=223)
         116	INPLACE_ADD(arg=None, lineno=223)
         118	STORE_FAST(arg=5, lineno=223)
         120	JUMP_ABSOLUTE(arg=28, lineno=223)
>        122	POP_BLOCK(arg=None, lineno=223)
>        124	LOAD_FAST(arg=5, lineno=224)
         126	RETURN_VALUE(arg=None, lineno=224)
2020-06-11 12:04:58,473:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,473:DEBUG:stack: []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=201)
2020-06-11 12:04:58,473:DEBUG:stack []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=201)
2020-06-11 12:04:58,473:DEBUG:stack []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=201)
2020-06-11 12:04:58,473:DEBUG:stack ['$src_ndim2.0']
2020-06-11 12:04:58,473:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=201)
2020-06-11 12:04:58,473:DEBUG:stack ['$src_ndim2.0', '$dest_ndim4.1']
2020-06-11 12:04:58,473:DEBUG:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=201)
2020-06-11 12:04:58,473:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:04:58,473:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,473:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:04:58,473:DEBUG:stack: []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=204)
2020-06-11 12:04:58,473:DEBUG:stack []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=204)
2020-06-11 12:04:58,473:DEBUG:stack ['$const10.0']
2020-06-11 12:04:58,473:DEBUG:end state. edges=[]
2020-06-11 12:04:58,473:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:04:58,473:DEBUG:stack: []
2020-06-11 12:04:58,473:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=206)
2020-06-11 12:04:58,474:DEBUG:stack []
2020-06-11 12:04:58,474:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=4, lineno=206)
2020-06-11 12:04:58,474:DEBUG:stack ['$const14.0']
2020-06-11 12:04:58,474:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=207)
2020-06-11 12:04:58,474:DEBUG:stack []
2020-06-11 12:04:58,474:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=207)
2020-06-11 12:04:58,474:DEBUG:stack ['$dest_ndim18.1']
2020-06-11 12:04:58,474:DEBUG:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=207)
2020-06-11 12:04:58,474:DEBUG:stack ['$dest_ndim18.1', '$src_ndim20.2']
2020-06-11 12:04:58,474:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=207)
2020-06-11 12:04:58,474:DEBUG:stack ['$22binary_subtract.3']
2020-06-11 12:04:58,474:DEBUG:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,474:DEBUG:pending: deque([State(pc_initial=26 nstack_initial=0)])
2020-06-11 12:04:58,474:DEBUG:stack: []
2020-06-11 12:04:58,474:DEBUG:dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=208)
2020-06-11 12:04:58,474:DEBUG:stack []
2020-06-11 12:04:58,474:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,474:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:04:58,474:DEBUG:stack: []
2020-06-11 12:04:58,474:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=208)
2020-06-11 12:04:58,474:DEBUG:stack []
2020-06-11 12:04:58,475:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=208)
2020-06-11 12:04:58,475:DEBUG:stack ['$src_index28.0']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=208)
2020-06-11 12:04:58,475:DEBUG:stack ['$src_index28.0', '$src_ndim30.1']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=208)
2020-06-11 12:04:58,475:DEBUG:stack ['$32compare_op.2']
2020-06-11 12:04:58,475:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,475:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2020-06-11 12:04:58,475:DEBUG:stack: []
2020-06-11 12:04:58,475:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=209)
2020-06-11 12:04:58,475:DEBUG:stack []
2020-06-11 12:04:58,475:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=209)
2020-06-11 12:04:58,475:DEBUG:stack ['$src_shape36.0']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=209)
2020-06-11 12:04:58,475:DEBUG:stack ['$src_shape36.0', '$src_index38.1']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=42, inst=STORE_FAST(arg=6, lineno=209)
2020-06-11 12:04:58,475:DEBUG:stack ['$40binary_subscr.2']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=210)
2020-06-11 12:04:58,475:DEBUG:stack []
2020-06-11 12:04:58,475:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=210)
2020-06-11 12:04:58,475:DEBUG:stack ['$dest_shape44.3']
2020-06-11 12:04:58,475:DEBUG:dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=210)
2020-06-11 12:04:58,475:DEBUG:stack ['$dest_shape44.3', '$dest_index46.4']
2020-06-11 12:04:58,476:DEBUG:dispatch pc=50, inst=STORE_FAST(arg=7, lineno=210)
2020-06-11 12:04:58,476:DEBUG:stack ['$48binary_subscr.5']
2020-06-11 12:04:58,476:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=213)
2020-06-11 12:04:58,476:DEBUG:stack []
2020-06-11 12:04:58,476:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=213)
2020-06-11 12:04:58,476:DEBUG:stack ['$dest_dim_size52.6']
2020-06-11 12:04:58,476:DEBUG:dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=213)
2020-06-11 12:04:58,476:DEBUG:stack ['$dest_dim_size52.6', '$const54.7']
2020-06-11 12:04:58,476:DEBUG:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=213)
2020-06-11 12:04:58,476:DEBUG:stack ['$56compare_op.8']
2020-06-11 12:04:58,476:DEBUG:end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,476:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:04:58,476:DEBUG:stack: []
2020-06-11 12:04:58,476:DEBUG:dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=223)
2020-06-11 12:04:58,476:DEBUG:stack []
2020-06-11 12:04:58,476:DEBUG:end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,476:DEBUG:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2020-06-11 12:04:58,476:DEBUG:stack: []
2020-06-11 12:04:58,476:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=217)
2020-06-11 12:04:58,476:DEBUG:stack []
2020-06-11 12:04:58,476:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=217)
2020-06-11 12:04:58,476:DEBUG:stack ['$src_dim_size60.0']
2020-06-11 12:04:58,476:DEBUG:dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=217)
2020-06-11 12:04:58,477:DEBUG:stack ['$src_dim_size60.0', '$dest_dim_size62.1']
2020-06-11 12:04:58,477:DEBUG:dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=217)
2020-06-11 12:04:58,477:DEBUG:stack ['$64compare_op.2']
2020-06-11 12:04:58,477:DEBUG:end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,477:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,477:DEBUG:stack: []
2020-06-11 12:04:58,477:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=219)
2020-06-11 12:04:58,477:DEBUG:stack []
2020-06-11 12:04:58,477:DEBUG:dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=219)
2020-06-11 12:04:58,477:DEBUG:stack ['$src_dim_size88.0']
2020-06-11 12:04:58,477:DEBUG:dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=219)
2020-06-11 12:04:58,477:DEBUG:stack ['$src_dim_size88.0', '$const90.1']
2020-06-11 12:04:58,477:DEBUG:dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=219)
2020-06-11 12:04:58,477:DEBUG:stack ['$92compare_op.2']
2020-06-11 12:04:58,477:DEBUG:end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,477:DEBUG:pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,477:DEBUG:stack: []
2020-06-11 12:04:58,477:DEBUG:dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=224)
2020-06-11 12:04:58,477:DEBUG:stack []
2020-06-11 12:04:58,477:DEBUG:dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=224)
2020-06-11 12:04:58,477:DEBUG:stack ['$dest_index124.0']
2020-06-11 12:04:58,477:DEBUG:end state. edges=[]
2020-06-11 12:04:58,478:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,478:DEBUG:stack: []
2020-06-11 12:04:58,478:DEBUG:dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=217)
2020-06-11 12:04:58,478:DEBUG:stack []
2020-06-11 12:04:58,478:DEBUG:dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=217)
2020-06-11 12:04:58,478:DEBUG:stack ['$src_dim_size68.0']
2020-06-11 12:04:58,478:DEBUG:dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=217)
2020-06-11 12:04:58,478:DEBUG:stack ['$src_dim_size68.0', '$const70.1']
2020-06-11 12:04:58,478:DEBUG:dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=217)
2020-06-11 12:04:58,478:DEBUG:stack ['$72compare_op.2']
2020-06-11 12:04:58,478:DEBUG:end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,478:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,478:DEBUG:stack: []
2020-06-11 12:04:58,478:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=222)
2020-06-11 12:04:58,478:DEBUG:stack []
2020-06-11 12:04:58,478:DEBUG:dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=222)
2020-06-11 12:04:58,478:DEBUG:stack ['$src_index104.0']
2020-06-11 12:04:58,478:DEBUG:dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=222)
2020-06-11 12:04:58,478:DEBUG:stack ['$src_index104.0', '$const106.1']
2020-06-11 12:04:58,478:DEBUG:dispatch pc=110, inst=STORE_FAST(arg=4, lineno=222)
2020-06-11 12:04:58,478:DEBUG:stack ['$108inplace_add.2']
2020-06-11 12:04:58,478:DEBUG:dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=223)
2020-06-11 12:04:58,478:DEBUG:stack []
2020-06-11 12:04:58,479:DEBUG:dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=223)
2020-06-11 12:04:58,479:DEBUG:stack ['$dest_index112.3']
2020-06-11 12:04:58,479:DEBUG:dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=223)
2020-06-11 12:04:58,479:DEBUG:stack ['$dest_index112.3', '$const114.4']
2020-06-11 12:04:58,479:DEBUG:dispatch pc=118, inst=STORE_FAST(arg=5, lineno=223)
2020-06-11 12:04:58,479:DEBUG:stack ['$116inplace_add.5']
2020-06-11 12:04:58,479:DEBUG:dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=223)
2020-06-11 12:04:58,479:DEBUG:stack []
2020-06-11 12:04:58,479:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,479:DEBUG:pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:04:58,479:DEBUG:stack: []
2020-06-11 12:04:58,479:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=221)
2020-06-11 12:04:58,479:DEBUG:stack []
2020-06-11 12:04:58,479:DEBUG:dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=221)
2020-06-11 12:04:58,479:DEBUG:stack ['$src_dim_size96.0']
2020-06-11 12:04:58,479:DEBUG:dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=221)
2020-06-11 12:04:58,479:DEBUG:stack ['$src_dim_size96.0', '$dest_shape98.1']
2020-06-11 12:04:58,479:DEBUG:dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=221)
2020-06-11 12:04:58,479:DEBUG:stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
2020-06-11 12:04:58,479:DEBUG:end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,479:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,479:DEBUG:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,480:DEBUG:stack: []
2020-06-11 12:04:58,480:DEBUG:dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=218)
2020-06-11 12:04:58,480:DEBUG:stack []
2020-06-11 12:04:58,480:DEBUG:dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=218)
2020-06-11 12:04:58,480:DEBUG:stack ['$dest_index76.0']
2020-06-11 12:04:58,480:DEBUG:dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=218)
2020-06-11 12:04:58,480:DEBUG:stack ['$dest_index76.0', '$const78.1']
2020-06-11 12:04:58,480:DEBUG:dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=218)
2020-06-11 12:04:58,480:DEBUG:stack ['$80binary_add.2']
2020-06-11 12:04:58,480:DEBUG:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=218)
2020-06-11 12:04:58,480:DEBUG:stack ['$82unary_negative.3']
2020-06-11 12:04:58,480:DEBUG:end state. edges=[]
2020-06-11 12:04:58,480:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,480:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,480:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:04:58,480:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,481:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
2020-06-11 12:04:58,481:DEBUG:defmap: {}
2020-06-11 12:04:58,481:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,481:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,481:DEBUG:keep phismap: {}
2020-06-11 12:04:58,481:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,481:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
2020-06-11 12:04:58,481:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
2020-06-11 12:04:58,482:DEBUG:block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,483:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index) ['$40binary_subscr.2', 'src_index', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index) ['$48binary_subscr.5', 'dest_index', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:04:58,493:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,494:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index) ['$40binary_subscr.2', 'src_index', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index) ['$48binary_subscr.5', 'dest_index', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:04:58,494:DEBUG:================================================================================
2020-06-11 12:04:58,494:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,494:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,494:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:04:58,494:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:04:58,494:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:04:58,494:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:04:58,494:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:04:58,494:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:04:58,494:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:04:58,494:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,494:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:04:58,494:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:04:58,494:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:04:58,494:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:04:58,494:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,494:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:04:58,494:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:04:58,494:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:04:58,494:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,494:DEBUG:on stmt: jump 26
2020-06-11 12:04:58,494:DEBUG:==== SSA block analysis pass on 26
2020-06-11 12:04:58,494:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,494:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,495:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:04:58,495:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,495:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:04:58,495:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:04:58,495:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:04:58,495:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,495:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:04:58,495:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:04:58,495:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,495:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:04:58,495:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:04:58,495:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:04:58,495:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:04:58,495:DEBUG:==== SSA block analysis pass on 60
2020-06-11 12:04:58,495:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,495:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:04:58,495:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:04:58,495:DEBUG:==== SSA block analysis pass on 68
2020-06-11 12:04:58,495:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,495:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:04:58,495:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:04:58,495:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:04:58,495:DEBUG:==== SSA block analysis pass on 76
2020-06-11 12:04:58,495:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,495:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:04:58,495:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,496:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:04:58,496:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:04:58,496:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:04:58,496:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:04:58,496:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,496:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:58,496:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:04:58,496:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:04:58,496:DEBUG:==== SSA block analysis pass on 96
2020-06-11 12:04:58,496:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,496:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,496:DEBUG:on stmt: jump 104
2020-06-11 12:04:58,496:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:04:58,496:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,496:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:04:58,496:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,496:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:04:58,496:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:04:58,496:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,496:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:04:58,496:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,496:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:04:58,496:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,496:DEBUG:on stmt: jump 124
2020-06-11 12:04:58,496:DEBUG:==== SSA block analysis pass on 124
2020-06-11 12:04:58,496:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7400890>
2020-06-11 12:04:58,496:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,496:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:04:58,497:DEBUG:defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f01c745c0d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f01c74526d0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f01c7452f90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f01c744b310>],
             '$22binary_subtract.3': [<numba.core.ir.Assign object at 0x7f01c744be10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f01c744b390>],
             '$40binary_subscr.2': [<numba.core.ir.Assign object at 0x7f01c7446ed0>],
             '$48binary_subscr.5': [<numba.core.ir.Assign object at 0x7f01c7446a90>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f01c7446450>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f01c7446690>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01c744f110>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f01c7451090>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f01c7451990>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f01c7451690>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f01c7451a90>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f01c7452850>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f01c744b650>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f01c7440510>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f01c7452810>],
             '$const14.0': [<numba.core.ir.Assign object at 0x7f01c744b590>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f01c7446350>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f01c7451b10>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f01c74517d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f01c7452a90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f01c7446b10>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f01c744be50>,
                            <numba.core.ir.Assign object at 0x7f01c745c050>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f01c744f9d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f01c744ff10>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f01c7446f50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f01c744b6d0>,
                           <numba.core.ir.Assign object at 0x7f01c7446cd0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f01c744f1d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f01c744fc10>]})
2020-06-11 12:04:58,497:DEBUG:SSA violators {'src_index', 'dest_index'}
2020-06-11 12:04:58,497:DEBUG:Fix SSA violator on var src_index
2020-06-11 12:04:58,497:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,497:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,497:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:04:58,497:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:04:58,497:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:04:58,497:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:04:58,497:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:04:58,497:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:04:58,497:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:58,497:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,497:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:04:58,498:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:04:58,498:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:04:58,498:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:04:58,498:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,498:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:04:58,498:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:04:58,498:DEBUG:first assign: src_index
2020-06-11 12:04:58,498:DEBUG:replaced with: src_index = $const14.0
2020-06-11 12:04:58,498:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:04:58,498:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,498:DEBUG:on stmt: jump 26
2020-06-11 12:04:58,498:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:04:58,498:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,498:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,498:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:04:58,498:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,498:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:04:58,498:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:04:58,498:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:58,498:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,498:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:04:58,498:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:04:58,498:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,498:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:04:58,498:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:04:58,498:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:04:58,498:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:04:58,499:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:58,499:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,499:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:04:58,499:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:04:58,499:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:04:58,499:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,499:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:04:58,499:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:04:58,499:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:04:58,499:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:04:58,499:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,499:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:04:58,499:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,499:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:04:58,499:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:04:58,499:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:04:58,499:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:58,499:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,499:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:58,499:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:04:58,499:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:04:58,499:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:58,499:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,499:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,499:DEBUG:on stmt: jump 104
2020-06-11 12:04:58,500:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:58,500:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,500:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:04:58,500:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,500:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:04:58,500:DEBUG:replaced with: src_index.1 = $108inplace_add.2
2020-06-11 12:04:58,500:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:04:58,500:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,500:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:04:58,500:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,500:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:58,500:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,500:DEBUG:on stmt: jump 124
2020-06-11 12:04:58,500:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:04:58,500:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7452dd0>
2020-06-11 12:04:58,500:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,500:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:04:58,500:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f01c74405d0>],
             104: [<numba.core.ir.Assign object at 0x7f01c7447f10>]})
2020-06-11 12:04:58,501:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,501:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,501:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:04:58,501:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:04:58,501:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:04:58,501:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:04:58,501:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:04:58,501:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:04:58,501:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:58,501:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,501:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:04:58,501:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:04:58,501:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:04:58,501:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:04:58,501:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,501:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:04:58,501:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:04:58,501:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:04:58,501:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,501:DEBUG:on stmt: jump 26
2020-06-11 12:04:58,502:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:04:58,502:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,502:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,502:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:04:58,502:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,502:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:04:58,502:DEBUG:find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
2020-06-11 12:04:58,502:DEBUG:find_def_from_top label 28
2020-06-11 12:04:58,502:DEBUG:insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
2020-06-11 12:04:58,502:DEBUG:find_def_from_bottom label 104
2020-06-11 12:04:58,502:DEBUG:incoming_def src_index.1 = $108inplace_add.2
2020-06-11 12:04:58,502:DEBUG:find_def_from_bottom label 26
2020-06-11 12:04:58,502:DEBUG:find_def_from_top label 26
2020-06-11 12:04:58,502:DEBUG:idom 14 from label 26
2020-06-11 12:04:58,502:DEBUG:find_def_from_bottom label 14
2020-06-11 12:04:58,502:DEBUG:incoming_def src_index = $const14.0
2020-06-11 12:04:58,502:DEBUG:replaced with: $32compare_op.2 = src_index.2 < src_ndim
2020-06-11 12:04:58,502:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:04:58,502:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:58,502:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,502:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:04:58,502:DEBUG:find_def var='src_index' stmt=$40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:04:58,502:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,502:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,503:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,503:DEBUG:replaced with: $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2)
2020-06-11 12:04:58,503:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:04:58,503:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,503:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:04:58,503:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:04:58,503:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:04:58,503:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:04:58,503:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:58,503:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,503:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:04:58,503:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:04:58,503:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:04:58,503:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,503:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:04:58,503:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:04:58,503:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:04:58,503:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:04:58,503:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,503:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:04:58,503:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,503:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:04:58,503:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:04:58,503:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:04:58,504:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:58,504:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,504:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:58,504:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:04:58,504:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:04:58,504:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:58,504:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,504:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,504:DEBUG:on stmt: jump 104
2020-06-11 12:04:58,504:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:58,504:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,504:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:04:58,504:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,504:DEBUG:find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,504:DEBUG:find_def_from_top label 104
2020-06-11 12:04:58,504:DEBUG:idom 36 from label 104
2020-06-11 12:04:58,504:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,504:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,504:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,504:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,504:DEBUG:replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,504:DEBUG:on stmt: src_index.1 = $108inplace_add.2
2020-06-11 12:04:58,504:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:04:58,504:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,504:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:04:58,505:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,505:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:58,505:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,505:DEBUG:on stmt: jump 124
2020-06-11 12:04:58,505:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:04:58,505:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400550>
2020-06-11 12:04:58,505:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,505:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:04:58,505:DEBUG:Fix SSA violator on var dest_index
2020-06-11 12:04:58,505:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,505:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,505:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:04:58,505:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:04:58,505:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:04:58,505:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:04:58,505:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:04:58,505:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:04:58,505:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:58,505:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,505:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:04:58,505:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:04:58,505:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:04:58,505:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:04:58,505:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,506:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:04:58,506:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:04:58,506:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:04:58,506:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,506:DEBUG:first assign: dest_index
2020-06-11 12:04:58,506:DEBUG:replaced with: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,506:DEBUG:on stmt: jump 26
2020-06-11 12:04:58,506:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:04:58,506:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,506:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,506:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:04:58,506:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,506:DEBUG:on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:222), Var(src_index, npyimpl.py:206)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,506:DEBUG:on stmt: $32compare_op.2 = src_index.2 < src_ndim
2020-06-11 12:04:58,506:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:04:58,506:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:58,506:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,506:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2)
2020-06-11 12:04:58,506:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:04:58,506:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,506:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:04:58,506:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:04:58,506:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:04:58,506:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:04:58,506:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:58,506:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,507:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:04:58,507:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:04:58,507:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:04:58,507:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,507:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:04:58,507:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:04:58,507:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:04:58,507:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:04:58,507:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,507:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:04:58,507:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,507:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:04:58,507:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:04:58,507:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:04:58,507:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:58,507:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,507:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:58,507:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:04:58,507:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:04:58,507:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:58,507:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,507:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,507:DEBUG:on stmt: jump 104
2020-06-11 12:04:58,507:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:58,507:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,508:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:04:58,508:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,508:DEBUG:on stmt: src_index.1 = $108inplace_add.2
2020-06-11 12:04:58,508:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:04:58,508:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,508:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:04:58,508:DEBUG:replaced with: dest_index.1 = $116inplace_add.5
2020-06-11 12:04:58,508:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,508:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:58,508:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,508:DEBUG:on stmt: jump 124
2020-06-11 12:04:58,508:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:04:58,508:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7447490>
2020-06-11 12:04:58,508:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,508:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:04:58,508:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f01c7447b10>],
             104: [<numba.core.ir.Assign object at 0x7f01c747b650>]})
2020-06-11 12:04:58,509:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,509:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,509:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:04:58,509:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:04:58,509:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:04:58,509:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:04:58,509:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:04:58,509:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:04:58,509:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:04:58,509:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,509:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:04:58,509:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:04:58,509:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:04:58,509:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:04:58,509:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,509:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:04:58,509:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:04:58,509:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:04:58,509:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:04:58,509:DEBUG:on stmt: jump 26
2020-06-11 12:04:58,509:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:04:58,509:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,509:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,509:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:04:58,510:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,510:DEBUG:on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:222), Var(src_index, npyimpl.py:206)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,510:DEBUG:on stmt: $32compare_op.2 = src_index.2 < src_ndim
2020-06-11 12:04:58,510:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:04:58,510:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:58,510:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,510:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2)
2020-06-11 12:04:58,510:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:04:58,510:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,510:DEBUG:find_def var='dest_index' stmt=$48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:04:58,510:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,510:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,510:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,510:DEBUG:find_def_from_top label 28
2020-06-11 12:04:58,510:DEBUG:insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
2020-06-11 12:04:58,510:DEBUG:find_def_from_bottom label 104
2020-06-11 12:04:58,510:DEBUG:incoming_def dest_index.1 = $116inplace_add.5
2020-06-11 12:04:58,510:DEBUG:find_def_from_bottom label 26
2020-06-11 12:04:58,510:DEBUG:find_def_from_top label 26
2020-06-11 12:04:58,510:DEBUG:idom 14 from label 26
2020-06-11 12:04:58,510:DEBUG:find_def_from_bottom label 14
2020-06-11 12:04:58,510:DEBUG:incoming_def dest_index = $22binary_subtract.3
2020-06-11 12:04:58,510:DEBUG:replaced with: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2)
2020-06-11 12:04:58,511:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:04:58,511:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:04:58,511:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:04:58,511:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:04:58,511:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:04:58,511:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,511:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:04:58,511:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:04:58,511:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:04:58,511:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,511:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:04:58,511:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:04:58,511:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:04:58,511:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:04:58,511:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,511:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:04:58,511:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,511:DEBUG:find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
2020-06-11 12:04:58,511:DEBUG:find_def_from_top label 76
2020-06-11 12:04:58,511:DEBUG:idom 68 from label 76
2020-06-11 12:04:58,511:DEBUG:find_def_from_bottom label 68
2020-06-11 12:04:58,511:DEBUG:find_def_from_top label 68
2020-06-11 12:04:58,511:DEBUG:idom 60 from label 68
2020-06-11 12:04:58,511:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:58,511:DEBUG:find_def_from_top label 60
2020-06-11 12:04:58,511:DEBUG:idom 36 from label 60
2020-06-11 12:04:58,511:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,512:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,512:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,512:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,512:DEBUG:replaced with: $80binary_add.2 = dest_index.2 + $const78.1
2020-06-11 12:04:58,512:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:04:58,512:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:04:58,512:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:04:58,512:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:04:58,512:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,512:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:04:58,512:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:04:58,512:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:04:58,512:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:04:58,512:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,512:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,512:DEBUG:find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2020-06-11 12:04:58,512:DEBUG:find_def_from_top label 96
2020-06-11 12:04:58,512:DEBUG:idom 88 from label 96
2020-06-11 12:04:58,512:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:58,512:DEBUG:find_def_from_top label 88
2020-06-11 12:04:58,512:DEBUG:idom 36 from label 88
2020-06-11 12:04:58,512:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,512:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,512:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,512:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,513:DEBUG:replaced with: dest_shape[dest_index.2] = src_dim_size
2020-06-11 12:04:58,513:DEBUG:on stmt: jump 104
2020-06-11 12:04:58,513:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:04:58,513:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,513:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:04:58,513:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,513:DEBUG:on stmt: src_index.1 = $108inplace_add.2
2020-06-11 12:04:58,513:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:04:58,513:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,513:DEBUG:find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,513:DEBUG:find_def_from_top label 104
2020-06-11 12:04:58,513:DEBUG:insert phi node dest_index.3 = phi(incoming_values=[], incoming_blocks=[]) at 104
2020-06-11 12:04:58,513:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:58,513:DEBUG:find_def_from_top label 88
2020-06-11 12:04:58,513:DEBUG:idom 36 from label 88
2020-06-11 12:04:58,513:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,513:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,513:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,513:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,513:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,513:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:58,513:DEBUG:find_def_from_top label 60
2020-06-11 12:04:58,513:DEBUG:idom 36 from label 60
2020-06-11 12:04:58,513:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,513:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,513:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,514:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 96
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 96
2020-06-11 12:04:58,514:DEBUG:idom 88 from label 96
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 88
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 88
2020-06-11 12:04:58,514:DEBUG:idom 36 from label 88
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,514:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,514:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 68
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 68
2020-06-11 12:04:58,514:DEBUG:idom 60 from label 68
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 60
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 60
2020-06-11 12:04:58,514:DEBUG:idom 36 from label 60
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 36
2020-06-11 12:04:58,514:DEBUG:find_def_from_top label 36
2020-06-11 12:04:58,514:DEBUG:idom 28 from label 36
2020-06-11 12:04:58,514:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,514:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:04:58,514:DEBUG:replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:58,514:DEBUG:on stmt: dest_index.1 = $116inplace_add.5
2020-06-11 12:04:58,514:DEBUG:on stmt: jump 28
2020-06-11 12:04:58,514:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:58,515:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,515:DEBUG:on stmt: jump 124
2020-06-11 12:04:58,515:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:04:58,515:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7400510>
2020-06-11 12:04:58,515:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,515:DEBUG:find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
2020-06-11 12:04:58,515:DEBUG:find_def_from_top label 124
2020-06-11 12:04:58,515:DEBUG:idom 122 from label 124
2020-06-11 12:04:58,515:DEBUG:find_def_from_bottom label 122
2020-06-11 12:04:58,515:DEBUG:find_def_from_top label 122
2020-06-11 12:04:58,515:DEBUG:idom 28 from label 122
2020-06-11 12:04:58,515:DEBUG:find_def_from_bottom label 28
2020-06-11 12:04:58,515:DEBUG:replaced with: $126return_value.1 = cast(value=dest_index.2)
2020-06-11 12:04:58,515:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:04:58,515:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,516:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26]) ['dest_index', 'dest_index.1', 'dest_index.2']
    src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:222), Var(src_index, npyimpl.py:206)], incoming_blocks=[104, 26]) ['src_index', 'src_index.1', 'src_index.2']
    $32compare_op.2 = src_index.2 < src_ndim ['$32compare_op.2', 'src_index.2', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2) ['$40binary_subscr.2', 'src_index.2', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2) ['$48binary_subscr.5', 'dest_index.2', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index.2 + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index.2']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index.2] = src_dim_size  ['dest_index.2', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    dest_index.3 = phi(incoming_values=[Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209)], incoming_blocks=[88, 60, 96, 68]) ['dest_index.2', 'dest_index.2', 'dest_index.2', 'dest_index.2', 'dest_index.3']
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index.2']
    src_index.1 = $108inplace_add.2          ['$108inplace_add.2', 'src_index.1']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index.3']
    dest_index.1 = $116inplace_add.5         ['$116inplace_add.5', 'dest_index.1']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index.2) ['$126return_value.1', 'dest_index.2']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:04:58,516:DEBUG:================================================================================
2020-06-11 12:04:58,576:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2742)
           2	LOAD_FAST(arg=0, lineno=2742)
           4	LOAD_FAST(arg=1, lineno=2742)
           6	COMPARE_OP(arg=0, lineno=2742)
           8	RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:04:58,576:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,576:DEBUG:stack: []
2020-06-11 12:04:58,576:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2742)
2020-06-11 12:04:58,576:DEBUG:stack []
2020-06-11 12:04:58,577:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2742)
2020-06-11 12:04:58,577:DEBUG:stack []
2020-06-11 12:04:58,577:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:04:58,577:DEBUG:stack ['$finite_vals_12.0']
2020-06-11 12:04:58,577:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=2742)
2020-06-11 12:04:58,577:DEBUG:stack ['$finite_vals_12.0', '$v_min_14.1']
2020-06-11 12:04:58,577:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:04:58,577:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:04:58,577:DEBUG:end state. edges=[]
2020-06-11 12:04:58,577:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,577:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,577:DEBUG:defmap: {}
2020-06-11 12:04:58,577:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,577:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,577:DEBUG:keep phismap: {}
2020-06-11 12:04:58,577:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,577:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,577:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$finite_vals_12.0'}), (4, {'res': '$v_min_14.1'}), (6, {'lhs': '$finite_vals_12.0', 'rhs': '$v_min_14.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,578:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,579:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,579:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,579:DEBUG:================================================================================
2020-06-11 12:04:58,579:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,580:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c73a0ed0>
2020-06-11 12:04:58,580:DEBUG:on stmt: finite_vals_1 = arg(0, name=finite_vals_1)
2020-06-11 12:04:58,580:DEBUG:on stmt: v_min_1 = arg(1, name=v_min_1)
2020-06-11 12:04:58,580:DEBUG:on stmt: $6compare_op.2 = finite_vals_1 < v_min_1
2020-06-11 12:04:58,580:DEBUG:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2020-06-11 12:04:58,580:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:58,580:DEBUG:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01c73a04d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c73a0610>],
             'finite_vals_1': [<numba.core.ir.Assign object at 0x7f01c73a0150>],
             'v_min_1': [<numba.core.ir.Assign object at 0x7f01c73a0210>]})
2020-06-11 12:04:58,580:DEBUG:SSA violators set()
2020-06-11 12:04:58,580:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,580:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,580:DEBUG:================================================================================
2020-06-11 12:04:58,598:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2742)
           2	LOAD_FAST(arg=0, lineno=2742)
           4	LOAD_FAST(arg=1, lineno=2742)
           6	COMPARE_OP(arg=4, lineno=2742)
           8	RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,598:DEBUG:stack: []
2020-06-11 12:04:58,598:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:stack []
2020-06-11 12:04:58,598:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:stack []
2020-06-11 12:04:58,598:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:stack ['$finite_vals_22.0']
2020-06-11 12:04:58,598:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:stack ['$finite_vals_22.0', '$v_max_14.1']
2020-06-11 12:04:58,598:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:04:58,598:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:04:58,598:DEBUG:end state. edges=[]
2020-06-11 12:04:58,598:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,598:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,599:DEBUG:defmap: {}
2020-06-11 12:04:58,599:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,599:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,599:DEBUG:keep phismap: {}
2020-06-11 12:04:58,599:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,599:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,599:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$finite_vals_22.0'}), (4, {'res': '$v_max_14.1'}), (6, {'lhs': '$finite_vals_22.0', 'rhs': '$v_max_14.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,599:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,601:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,601:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,601:DEBUG:================================================================================
2020-06-11 12:04:58,601:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,601:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7402150>
2020-06-11 12:04:58,601:DEBUG:on stmt: finite_vals_2 = arg(0, name=finite_vals_2)
2020-06-11 12:04:58,601:DEBUG:on stmt: v_max_1 = arg(1, name=v_max_1)
2020-06-11 12:04:58,601:DEBUG:on stmt: $6compare_op.2 = finite_vals_2 > v_max_1
2020-06-11 12:04:58,601:DEBUG:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2020-06-11 12:04:58,601:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:58,601:DEBUG:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01c7422c10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c7422a10>],
             'finite_vals_2': [<numba.core.ir.Assign object at 0x7f01c7422650>],
             'v_max_1': [<numba.core.ir.Assign object at 0x7f01c7422750>]})
2020-06-11 12:04:58,602:DEBUG:SSA violators set()
2020-06-11 12:04:58,602:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,602:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:58,602:DEBUG:================================================================================
2020-06-11 12:04:58,697:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2706)
           2	LOAD_GLOBAL(arg=0, lineno=2706)
           4	LOAD_FAST(arg=0, lineno=2706)
           6	LOAD_FAST(arg=2, lineno=2706)
           8	CALL_FUNCTION(arg=2, lineno=2706)
          10	UNPACK_SEQUENCE(arg=2, lineno=2706)
          12	STORE_FAST(arg=3, lineno=2706)
          14	STORE_FAST(arg=4, lineno=2706)
          16	SETUP_LOOP(arg=30, lineno=2708)
          18	LOAD_GLOBAL(arg=1, lineno=2708)
          20	LOAD_CONST(arg=1, lineno=2708)
          22	LOAD_FAST(arg=3, lineno=2708)
          24	LOAD_FAST(arg=4, lineno=2708)
          26	CALL_FUNCTION(arg=3, lineno=2708)
          28	GET_ITER(arg=None, lineno=2708)
>         30	FOR_ITER(arg=14, lineno=2708)
          32	STORE_FAST(arg=5, lineno=2708)
          34	LOAD_FAST(arg=1, lineno=2709)
          36	LOAD_FAST(arg=0, lineno=2709)
          38	LOAD_ATTR(arg=2, lineno=2709)
          40	LOAD_FAST(arg=5, lineno=2709)
          42	STORE_SUBSCR(arg=None, lineno=2709)
          44	JUMP_ABSOLUTE(arg=30, lineno=2709)
>         46	POP_BLOCK(arg=None, lineno=2709)
>         48	LOAD_CONST(arg=0, lineno=2709)
          50	RETURN_VALUE(arg=None, lineno=2709)
2020-06-11 12:04:58,697:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,697:DEBUG:stack: []
2020-06-11 12:04:58,697:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2706)
2020-06-11 12:04:58,697:DEBUG:stack []
2020-06-11 12:04:58,698:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack []
2020-06-11 12:04:58,698:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:58,698:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$2load_global.0', '$a4.1']
2020-06-11 12:04:58,698:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$2load_global.0', '$a4.1', '$wrap6.2']
2020-06-11 12:04:58,698:DEBUG:dispatch pc=10, inst=UNPACK_SEQUENCE(arg=2, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$8call_function.3']
2020-06-11 12:04:58,698:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$10unpack_sequence.5', '$10unpack_sequence.4']
2020-06-11 12:04:58,698:DEBUG:dispatch pc=14, inst=STORE_FAST(arg=4, lineno=2706)
2020-06-11 12:04:58,698:DEBUG:stack ['$10unpack_sequence.5']
2020-06-11 12:04:58,698:DEBUG:end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,698:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=0)])
2020-06-11 12:04:58,698:DEBUG:stack: []
2020-06-11 12:04:58,698:DEBUG:dispatch pc=16, inst=SETUP_LOOP(arg=30, lineno=2708)
2020-06-11 12:04:58,698:DEBUG:stack []
2020-06-11 12:04:58,699:DEBUG:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack []
2020-06-11 12:04:58,699:DEBUG:dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$18load_global.0']
2020-06-11 12:04:58,699:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$18load_global.0', '$const20.1']
2020-06-11 12:04:58,699:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=4, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$18load_global.0', '$const20.1', '$end22.2']
2020-06-11 12:04:58,699:DEBUG:dispatch pc=26, inst=CALL_FUNCTION(arg=3, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$18load_global.0', '$const20.1', '$end22.2', '$step24.3']
2020-06-11 12:04:58,699:DEBUG:dispatch pc=28, inst=GET_ITER(arg=None, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$26call_function.4']
2020-06-11 12:04:58,699:DEBUG:end state. edges=[Edge(pc=30, stack=('$28get_iter.5',), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,699:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:04:58,699:DEBUG:stack: ['$phi30.0']
2020-06-11 12:04:58,699:DEBUG:dispatch pc=30, inst=FOR_ITER(arg=14, lineno=2708)
2020-06-11 12:04:58,699:DEBUG:stack ['$phi30.0']
2020-06-11 12:04:58,699:DEBUG:end state. edges=[Edge(pc=46, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,699:DEBUG:pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2020-06-11 12:04:58,699:DEBUG:stack: []
2020-06-11 12:04:58,699:DEBUG:dispatch pc=46, inst=POP_BLOCK(arg=None, lineno=2709)
2020-06-11 12:04:58,699:DEBUG:stack []
2020-06-11 12:04:58,700:DEBUG:end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,700:DEBUG:pending: deque([State(pc_initial=32 nstack_initial=2), State(pc_initial=48 nstack_initial=0)])
2020-06-11 12:04:58,700:DEBUG:stack: ['$phi32.0', '$phi32.1']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=5, lineno=2708)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0', '$phi32.1']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0', '$val34.2']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=38, inst=LOAD_ATTR(arg=2, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0', '$val34.2', '$a36.3']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0', '$val34.2', '$38load_attr.4']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0', '$val34.2', '$38load_attr.4', '$i40.5']
2020-06-11 12:04:58,700:DEBUG:dispatch pc=44, inst=JUMP_ABSOLUTE(arg=30, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack ['$phi32.0']
2020-06-11 12:04:58,700:DEBUG:end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:58,700:DEBUG:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:04:58,700:DEBUG:stack: []
2020-06-11 12:04:58,700:DEBUG:dispatch pc=48, inst=LOAD_CONST(arg=0, lineno=2709)
2020-06-11 12:04:58,700:DEBUG:stack []
2020-06-11 12:04:58,700:DEBUG:dispatch pc=50, inst=RETURN_VALUE(arg=None, lineno=2709)
2020-06-11 12:04:58,701:DEBUG:stack ['$const48.0']
2020-06-11 12:04:58,701:DEBUG:end state. edges=[]
2020-06-11 12:04:58,701:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:04:58,701:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,701:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set()})
2020-06-11 12:04:58,701:DEBUG:defmap: {'$phi30.0': State(pc_initial=16 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2020-06-11 12:04:58,701:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:04:58,701:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:04:58,702:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:04:58,702:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:04:58,702:DEBUG:keep phismap: {'$phi30.0': {('$28get_iter.5', State(pc_initial=16 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2020-06-11 12:04:58,702:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=16 nstack_initial=0): {'$phi30.0': '$28get_iter.5'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2020-06-11 12:04:58,702:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,702:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$wrap6.2'}), (8, {'func': '$2load_global.0', 'args': ['$a4.1', '$wrap6.2'], 'res': '$8call_function.3'}), (10, {'iterable': '$8call_function.3', 'stores': ['$10unpack_sequence.4', '$10unpack_sequence.5'], 'tupleobj': '$10unpack_sequence.6'}), (12, {'value': '$10unpack_sequence.4'}), (14, {'value': '$10unpack_sequence.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ()})
2020-06-11 12:04:58,702:DEBUG:block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'res': '$const20.1'}), (22, {'res': '$end22.2'}), (24, {'res': '$step24.3'}), (26, {'func': '$18load_global.0', 'args': ['$const20.1', '$end22.2', '$step24.3'], 'res': '$26call_function.4'}), (28, {'value': '$26call_function.4', 'res': '$28get_iter.5'})), outgoing_phis={'$phi30.0': '$28get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.5',)})
2020-06-11 12:04:58,702:DEBUG:block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={46: (), 32: ('$phi30.0', '$30for_iter.2')})
2020-06-11 12:04:58,703:DEBUG:block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$val34.2'}), (36, {'res': '$a36.3'}), (38, {'item': '$a36.3', 'res': '$38load_attr.4'}), (40, {'res': '$i40.5'}), (42, {'target': '$38load_attr.4', 'index': '$i40.5', 'value': '$val34.2'}), (44, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2020-06-11 12:04:58,703:DEBUG:block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={48: ()})
2020-06-11 12:04:58,703:DEBUG:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$const48.0'}), (50, {'retval': '$const48.0', 'castval': '$50return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,704:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7f01cd7fba70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:04:58,709:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,709:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7f01cd7fba70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:04:58,709:DEBUG:================================================================================
2020-06-11 12:04:58,709:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,709:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,709:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,709:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:04:58,709:DEBUG:on stmt: wrap = arg(2, name=wrap)
2020-06-11 12:04:58,709:DEBUG:on stmt: $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7f01cd7fba70>)
2020-06-11 12:04:58,709:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None)
2020-06-11 12:04:58,709:DEBUG:on stmt: $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2)
2020-06-11 12:04:58,709:DEBUG:on stmt: $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None)
2020-06-11 12:04:58,709:DEBUG:on stmt: $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None)
2020-06-11 12:04:58,709:DEBUG:on stmt: end = $10unpack_sequence.4
2020-06-11 12:04:58,710:DEBUG:on stmt: step = $10unpack_sequence.5
2020-06-11 12:04:58,710:DEBUG:on stmt: jump 16
2020-06-11 12:04:58,710:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:04:58,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,710:DEBUG:on stmt: $18load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:58,710:DEBUG:on stmt: $const20.1 = const(int, 0)
2020-06-11 12:04:58,710:DEBUG:on stmt: $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None)
2020-06-11 12:04:58,710:DEBUG:on stmt: $28get_iter.5 = getiter(value=$26call_function.4)
2020-06-11 12:04:58,710:DEBUG:on stmt: $phi30.0 = $28get_iter.5
2020-06-11 12:04:58,710:DEBUG:on stmt: jump 30
2020-06-11 12:04:58,710:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:04:58,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,710:DEBUG:on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2020-06-11 12:04:58,710:DEBUG:on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2020-06-11 12:04:58,710:DEBUG:on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2020-06-11 12:04:58,710:DEBUG:on stmt: $phi32.1 = $30for_iter.2
2020-06-11 12:04:58,710:DEBUG:on stmt: branch $30for_iter.3, 32, 46
2020-06-11 12:04:58,710:DEBUG:==== SSA block analysis pass on 32
2020-06-11 12:04:58,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,710:DEBUG:on stmt: i = $phi32.1
2020-06-11 12:04:58,710:DEBUG:on stmt: $38load_attr.4 = getattr(value=a, attr=flat)
2020-06-11 12:04:58,710:DEBUG:on stmt: $38load_attr.4[i] = val
2020-06-11 12:04:58,710:DEBUG:on stmt: jump 30
2020-06-11 12:04:58,710:DEBUG:==== SSA block analysis pass on 46
2020-06-11 12:04:58,710:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,711:DEBUG:on stmt: jump 48
2020-06-11 12:04:58,711:DEBUG:==== SSA block analysis pass on 48
2020-06-11 12:04:58,711:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c747bad0>
2020-06-11 12:04:58,711:DEBUG:on stmt: $const48.0 = const(NoneType, None)
2020-06-11 12:04:58,711:DEBUG:on stmt: $50return_value.1 = cast(value=$const48.0)
2020-06-11 12:04:58,711:DEBUG:on stmt: return $50return_value.1
2020-06-11 12:04:58,711:DEBUG:defs defaultdict(<class 'list'>,
            {'$10unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f01c72c5e90>],
             '$10unpack_sequence.5': [<numba.core.ir.Assign object at 0x7f01c72c5b10>],
             '$10unpack_sequence.6': [<numba.core.ir.Assign object at 0x7f01c72c5dd0>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x7f01c72d1150>],
             '$26call_function.4': [<numba.core.ir.Assign object at 0x7f01c72d1550>],
             '$28get_iter.5': [<numba.core.ir.Assign object at 0x7f01c72d1650>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c7482bd0>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x7f01c72d1810>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x7f01c72d18d0>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x7f01c72d1990>],
             '$38load_attr.4': [<numba.core.ir.Assign object at 0x7f01c72d1e90>],
             '$50return_value.1': [<numba.core.ir.Assign object at 0x7f01c72d5350>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c72c5fd0>],
             '$const20.1': [<numba.core.ir.Assign object at 0x7f01c72d1290>],
             '$const48.0': [<numba.core.ir.Assign object at 0x7f01c72d5210>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x7f01c72d1590>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x7f01c72d1a10>],
             'a': [<numba.core.ir.Assign object at 0x7f01c7480750>],
             'end': [<numba.core.ir.Assign object at 0x7f01c72c5b50>],
             'i': [<numba.core.ir.Assign object at 0x7f01c72d1bd0>],
             'step': [<numba.core.ir.Assign object at 0x7f01c72d1050>],
             'val': [<numba.core.ir.Assign object at 0x7f01c7480a50>],
             'wrap': [<numba.core.ir.Assign object at 0x7f01c7480790>]})
2020-06-11 12:04:58,711:DEBUG:SSA violators set()
2020-06-11 12:04:58,711:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,711:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7f01cd7fba70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:04:58,711:DEBUG:================================================================================
2020-06-11 12:04:58,714:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2684)
           2	LOAD_FAST(arg=0, lineno=2684)
           4	LOAD_ATTR(arg=0, lineno=2684)
           6	LOAD_CONST(arg=1, lineno=2684)
           8	COMPARE_OP(arg=2, lineno=2684)
          10	POP_JUMP_IF_FALSE(arg=70, lineno=2684)
          12	LOAD_FAST(arg=0, lineno=2685)
          14	LOAD_ATTR(arg=1, lineno=2685)
          16	LOAD_CONST(arg=2, lineno=2685)
          18	BINARY_SUBSCR(arg=None, lineno=2685)
          20	STORE_FAST(arg=2, lineno=2685)
          22	LOAD_FAST(arg=0, lineno=2686)
          24	LOAD_ATTR(arg=1, lineno=2686)
          26	LOAD_CONST(arg=3, lineno=2686)
          28	BINARY_SUBSCR(arg=None, lineno=2686)
          30	STORE_FAST(arg=3, lineno=2686)
          32	LOAD_CONST(arg=3, lineno=2687)
          34	LOAD_FAST(arg=3, lineno=2687)
          36	BINARY_ADD(arg=None, lineno=2687)
          38	STORE_FAST(arg=4, lineno=2687)
          40	LOAD_FAST(arg=1, lineno=2688)
          42	POP_JUMP_IF_FALSE(arg=54, lineno=2688)
          44	LOAD_FAST(arg=3, lineno=2689)
          46	LOAD_FAST(arg=2, lineno=2689)
          48	BINARY_MULTIPLY(arg=None, lineno=2689)
          50	STORE_FAST(arg=5, lineno=2689)
          52	JUMP_ABSOLUTE(arg=144, lineno=2689)
>         54	LOAD_FAST(arg=3, lineno=2691)
          56	LOAD_GLOBAL(arg=2, lineno=2691)
          58	LOAD_FAST(arg=2, lineno=2691)
          60	LOAD_FAST(arg=3, lineno=2691)
          62	CALL_FUNCTION(arg=2, lineno=2691)
          64	BINARY_MULTIPLY(arg=None, lineno=2691)
          66	STORE_FAST(arg=5, lineno=2691)
          68	JUMP_FORWARD(arg=74, lineno=2691)
>         70	LOAD_GLOBAL(arg=3, lineno=2693)
          72	LOAD_METHOD(arg=4, lineno=2693)
          74	LOAD_FAST(arg=0, lineno=2693)
          76	LOAD_ATTR(arg=1, lineno=2693)
          78	CALL_METHOD(arg=1, lineno=2693)
          80	STORE_FAST(arg=6, lineno=2693)
          82	LOAD_GLOBAL(arg=3, lineno=2695)
          84	LOAD_METHOD(arg=5, lineno=2695)
          86	LOAD_GLOBAL(arg=3, lineno=2695)
          88	LOAD_METHOD(arg=6, lineno=2695)
          90	LOAD_FAST(arg=6, lineno=2695)
          92	CALL_METHOD(arg=1, lineno=2695)
          94	LOAD_CONST(arg=2, lineno=2695)
          96	COMPARE_OP(arg=2, lineno=2695)
          98	CALL_METHOD(arg=1, lineno=2695)
         100	POP_JUMP_IF_TRUE(arg=110, lineno=2695)
         102	LOAD_GLOBAL(arg=7, lineno=2696)
         104	LOAD_CONST(arg=4, lineno=2696)
         106	CALL_FUNCTION(arg=1, lineno=2696)
         108	RAISE_VARARGS(arg=1, lineno=2696)
>        110	LOAD_CONST(arg=3, lineno=2698)
         112	LOAD_GLOBAL(arg=3, lineno=2698)
         114	LOAD_METHOD(arg=8, lineno=2698)
         116	LOAD_FAST(arg=6, lineno=2698)
         118	LOAD_CONST(arg=0, lineno=2698)
         120	LOAD_CONST(arg=5, lineno=2698)
         122	BUILD_SLICE(arg=2, lineno=2698)
         124	BINARY_SUBSCR(arg=None, lineno=2698)
         126	CALL_METHOD(arg=1, lineno=2698)
         128	LOAD_METHOD(arg=9, lineno=2698)
         130	CALL_METHOD(arg=0, lineno=2698)
         132	BINARY_ADD(arg=None, lineno=2698)
         134	STORE_FAST(arg=4, lineno=2698)
         136	LOAD_FAST(arg=6, lineno=2699)
         138	LOAD_METHOD(arg=10, lineno=2699)
         140	CALL_METHOD(arg=0, lineno=2699)
         142	STORE_FAST(arg=5, lineno=2699)
>        144	LOAD_FAST(arg=5, lineno=2701)
         146	LOAD_FAST(arg=4, lineno=2701)
         148	BUILD_TUPLE(arg=2, lineno=2701)
         150	RETURN_VALUE(arg=None, lineno=2701)
2020-06-11 12:04:58,714:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,714:DEBUG:stack: []
2020-06-11 12:04:58,714:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack []
2020-06-11 12:04:58,714:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack []
2020-06-11 12:04:58,714:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack ['$a2.0']
2020-06-11 12:04:58,714:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:58,714:DEBUG:dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack ['$4load_attr.1', '$const6.2']
2020-06-11 12:04:58,714:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=70, lineno=2684)
2020-06-11 12:04:58,714:DEBUG:stack ['$8compare_op.3']
2020-06-11 12:04:58,714:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,715:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:04:58,715:DEBUG:stack: []
2020-06-11 12:04:58,715:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2685)
2020-06-11 12:04:58,715:DEBUG:stack []
2020-06-11 12:04:58,715:DEBUG:dispatch pc=14, inst=LOAD_ATTR(arg=1, lineno=2685)
2020-06-11 12:04:58,715:DEBUG:stack ['$a12.0']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=2685)
2020-06-11 12:04:58,715:DEBUG:stack ['$14load_attr.1']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=2685)
2020-06-11 12:04:58,715:DEBUG:stack ['$14load_attr.1', '$const16.2']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=2685)
2020-06-11 12:04:58,715:DEBUG:stack ['$18binary_subscr.3']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2686)
2020-06-11 12:04:58,715:DEBUG:stack []
2020-06-11 12:04:58,715:DEBUG:dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=2686)
2020-06-11 12:04:58,715:DEBUG:stack ['$a22.4']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=2686)
2020-06-11 12:04:58,715:DEBUG:stack ['$24load_attr.5']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2686)
2020-06-11 12:04:58,715:DEBUG:stack ['$24load_attr.5', '$const26.6']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=30, inst=STORE_FAST(arg=3, lineno=2686)
2020-06-11 12:04:58,715:DEBUG:stack ['$28binary_subscr.7']
2020-06-11 12:04:58,715:DEBUG:dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=2687)
2020-06-11 12:04:58,715:DEBUG:stack []
2020-06-11 12:04:58,715:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=2687)
2020-06-11 12:04:58,716:DEBUG:stack ['$const32.8']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=2687)
2020-06-11 12:04:58,716:DEBUG:stack ['$const32.8', '$n34.9']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=38, inst=STORE_FAST(arg=4, lineno=2687)
2020-06-11 12:04:58,716:DEBUG:stack ['$36binary_add.10']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=2688)
2020-06-11 12:04:58,716:DEBUG:stack []
2020-06-11 12:04:58,716:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=54, lineno=2688)
2020-06-11 12:04:58,716:DEBUG:stack ['$wrap40.11']
2020-06-11 12:04:58,716:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,716:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2020-06-11 12:04:58,716:DEBUG:stack: []
2020-06-11 12:04:58,716:DEBUG:dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=2693)
2020-06-11 12:04:58,716:DEBUG:stack []
2020-06-11 12:04:58,716:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=2693)
2020-06-11 12:04:58,716:DEBUG:stack ['$70load_global.0']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=0, lineno=2693)
2020-06-11 12:04:58,716:DEBUG:stack ['$72load_method.1']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=76, inst=LOAD_ATTR(arg=1, lineno=2693)
2020-06-11 12:04:58,716:DEBUG:stack ['$72load_method.1', '$a74.2']
2020-06-11 12:04:58,716:DEBUG:dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=2693)
2020-06-11 12:04:58,716:DEBUG:stack ['$72load_method.1', '$76load_attr.3']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=80, inst=STORE_FAST(arg=6, lineno=2693)
2020-06-11 12:04:58,717:DEBUG:stack ['$78call_method.4']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=82, inst=LOAD_GLOBAL(arg=3, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack []
2020-06-11 12:04:58,717:DEBUG:dispatch pc=84, inst=LOAD_METHOD(arg=5, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$82load_global.5']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=86, inst=LOAD_GLOBAL(arg=3, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=88, inst=LOAD_METHOD(arg=6, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$86load_global.7']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$88load_method.8']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=92, inst=CALL_METHOD(arg=1, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$88load_method.8', '$shape90.9']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$92call_method.10']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$92call_method.10', '$const94.11']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=98, inst=CALL_METHOD(arg=1, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$84load_method.6', '$96compare_op.12']
2020-06-11 12:04:58,717:DEBUG:dispatch pc=100, inst=POP_JUMP_IF_TRUE(arg=110, lineno=2695)
2020-06-11 12:04:58,717:DEBUG:stack ['$98call_method.13']
2020-06-11 12:04:58,717:DEBUG:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,718:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:58,718:DEBUG:stack: []
2020-06-11 12:04:58,718:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=2689)
2020-06-11 12:04:58,718:DEBUG:stack []
2020-06-11 12:04:58,718:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=2689)
2020-06-11 12:04:58,718:DEBUG:stack ['$n44.0']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=2689)
2020-06-11 12:04:58,718:DEBUG:stack ['$n44.0', '$m46.1']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=50, inst=STORE_FAST(arg=5, lineno=2689)
2020-06-11 12:04:58,718:DEBUG:stack ['$48binary_multiply.2']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=52, inst=JUMP_ABSOLUTE(arg=144, lineno=2689)
2020-06-11 12:04:58,718:DEBUG:stack []
2020-06-11 12:04:58,718:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,718:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,718:DEBUG:stack: []
2020-06-11 12:04:58,718:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=2691)
2020-06-11 12:04:58,718:DEBUG:stack []
2020-06-11 12:04:58,718:DEBUG:dispatch pc=56, inst=LOAD_GLOBAL(arg=2, lineno=2691)
2020-06-11 12:04:58,718:DEBUG:stack ['$n54.0']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=2691)
2020-06-11 12:04:58,718:DEBUG:stack ['$n54.0', '$56load_global.1']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=2691)
2020-06-11 12:04:58,718:DEBUG:stack ['$n54.0', '$56load_global.1', '$m58.2']
2020-06-11 12:04:58,718:DEBUG:dispatch pc=62, inst=CALL_FUNCTION(arg=2, lineno=2691)
2020-06-11 12:04:58,718:DEBUG:stack ['$n54.0', '$56load_global.1', '$m58.2', '$n60.3']
2020-06-11 12:04:58,719:DEBUG:dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=2691)
2020-06-11 12:04:58,719:DEBUG:stack ['$n54.0', '$62call_function.4']
2020-06-11 12:04:58,719:DEBUG:dispatch pc=66, inst=STORE_FAST(arg=5, lineno=2691)
2020-06-11 12:04:58,719:DEBUG:stack ['$64binary_multiply.5']
2020-06-11 12:04:58,719:DEBUG:dispatch pc=68, inst=JUMP_FORWARD(arg=74, lineno=2691)
2020-06-11 12:04:58,719:DEBUG:stack []
2020-06-11 12:04:58,719:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,719:DEBUG:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,719:DEBUG:stack: []
2020-06-11 12:04:58,719:DEBUG:dispatch pc=102, inst=LOAD_GLOBAL(arg=7, lineno=2696)
2020-06-11 12:04:58,719:DEBUG:stack []
2020-06-11 12:04:58,719:DEBUG:dispatch pc=104, inst=LOAD_CONST(arg=4, lineno=2696)
2020-06-11 12:04:58,719:DEBUG:stack ['$102load_global.0']
2020-06-11 12:04:58,719:DEBUG:dispatch pc=106, inst=CALL_FUNCTION(arg=1, lineno=2696)
2020-06-11 12:04:58,719:DEBUG:stack ['$102load_global.0', '$const104.1']
2020-06-11 12:04:58,719:DEBUG:dispatch pc=108, inst=RAISE_VARARGS(arg=1, lineno=2696)
2020-06-11 12:04:58,719:DEBUG:stack ['$106call_function.2']
2020-06-11 12:04:58,719:DEBUG:end state. edges=[]
2020-06-11 12:04:58,719:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,719:DEBUG:stack: []
2020-06-11 12:04:58,719:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=2698)
2020-06-11 12:04:58,719:DEBUG:stack []
2020-06-11 12:04:58,719:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=3, lineno=2698)
2020-06-11 12:04:58,719:DEBUG:stack ['$const110.0']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=114, inst=LOAD_METHOD(arg=8, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$112load_global.1']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=116, inst=LOAD_FAST(arg=6, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=120, inst=LOAD_CONST(arg=5, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$const118.4']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=122, inst=BUILD_SLICE(arg=2, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$const118.4', '$const120.5']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=124, inst=BINARY_SUBSCR(arg=None, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$122build_slice.7']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=126, inst=CALL_METHOD(arg=1, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$114load_method.2', '$124binary_subscr.8']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=128, inst=LOAD_METHOD(arg=9, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$126call_method.9']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=130, inst=CALL_METHOD(arg=0, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$128load_method.10']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$const110.0', '$130call_method.11']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=134, inst=STORE_FAST(arg=4, lineno=2698)
2020-06-11 12:04:58,720:DEBUG:stack ['$132binary_add.12']
2020-06-11 12:04:58,720:DEBUG:dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=2699)
2020-06-11 12:04:58,720:DEBUG:stack []
2020-06-11 12:04:58,721:DEBUG:dispatch pc=138, inst=LOAD_METHOD(arg=10, lineno=2699)
2020-06-11 12:04:58,721:DEBUG:stack ['$shape136.13']
2020-06-11 12:04:58,721:DEBUG:dispatch pc=140, inst=CALL_METHOD(arg=0, lineno=2699)
2020-06-11 12:04:58,721:DEBUG:stack ['$138load_method.14']
2020-06-11 12:04:58,721:DEBUG:dispatch pc=142, inst=STORE_FAST(arg=5, lineno=2699)
2020-06-11 12:04:58,721:DEBUG:stack ['$140call_method.15']
2020-06-11 12:04:58,721:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:58,721:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,721:DEBUG:stack: []
2020-06-11 12:04:58,721:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=5, lineno=2701)
2020-06-11 12:04:58,721:DEBUG:stack []
2020-06-11 12:04:58,721:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=4, lineno=2701)
2020-06-11 12:04:58,721:DEBUG:stack ['$end144.0']
2020-06-11 12:04:58,721:DEBUG:dispatch pc=148, inst=BUILD_TUPLE(arg=2, lineno=2701)
2020-06-11 12:04:58,721:DEBUG:stack ['$end144.0', '$step146.1']
2020-06-11 12:04:58,721:DEBUG:dispatch pc=150, inst=RETURN_VALUE(arg=None, lineno=2701)
2020-06-11 12:04:58,721:DEBUG:stack ['$148build_tuple.2']
2020-06-11 12:04:58,721:DEBUG:end state. edges=[]
2020-06-11 12:04:58,721:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,721:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:04:58,722:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,722:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=144 nstack_initial=0): set()})
2020-06-11 12:04:58,722:DEBUG:defmap: {}
2020-06-11 12:04:58,722:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,722:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,722:DEBUG:keep phismap: {}
2020-06-11 12:04:58,722:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,722:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,722:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 70: ()})
2020-06-11 12:04:58,722:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$a12.0'}), (14, {'item': '$a12.0', 'res': '$14load_attr.1'}), (16, {'res': '$const16.2'}), (18, {'index': '$const16.2', 'target': '$14load_attr.1', 'res': '$18binary_subscr.3'}), (20, {'value': '$18binary_subscr.3'}), (22, {'res': '$a22.4'}), (24, {'item': '$a22.4', 'res': '$24load_attr.5'}), (26, {'res': '$const26.6'}), (28, {'index': '$const26.6', 'target': '$24load_attr.5', 'res': '$28binary_subscr.7'}), (30, {'value': '$28binary_subscr.7'}), (32, {'res': '$const32.8'}), (34, {'res': '$n34.9'}), (36, {'lhs': '$const32.8', 'rhs': '$n34.9', 'res': '$36binary_add.10'}), (38, {'value': '$36binary_add.10'}), (40, {'res': '$wrap40.11'}), (42, {'pred': '$wrap40.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 54: ()})
2020-06-11 12:04:58,722:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$n44.0'}), (46, {'res': '$m46.1'}), (48, {'lhs': '$n44.0', 'rhs': '$m46.1', 'res': '$48binary_multiply.2'}), (50, {'value': '$48binary_multiply.2'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:04:58,722:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$n54.0'}), (56, {'res': '$56load_global.1'}), (58, {'res': '$m58.2'}), (60, {'res': '$n60.3'}), (62, {'func': '$56load_global.1', 'args': ['$m58.2', '$n60.3'], 'res': '$62call_function.4'}), (64, {'lhs': '$n54.0', 'rhs': '$62call_function.4', 'res': '$64binary_multiply.5'}), (66, {'value': '$64binary_multiply.5'}), (68, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:04:58,722:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$70load_global.0'}), (72, {'item': '$70load_global.0', 'res': '$72load_method.1'}), (74, {'res': '$a74.2'}), (76, {'item': '$a74.2', 'res': '$76load_attr.3'}), (78, {'func': '$72load_method.1', 'args': ['$76load_attr.3'], 'res': '$78call_method.4'}), (80, {'value': '$78call_method.4'}), (82, {'res': '$82load_global.5'}), (84, {'item': '$82load_global.5', 'res': '$84load_method.6'}), (86, {'res': '$86load_global.7'}), (88, {'item': '$86load_global.7', 'res': '$88load_method.8'}), (90, {'res': '$shape90.9'}), (92, {'func': '$88load_method.8', 'args': ['$shape90.9'], 'res': '$92call_method.10'}), (94, {'res': '$const94.11'}), (96, {'lhs': '$92call_method.10', 'rhs': '$const94.11', 'res': '$96compare_op.12'}), (98, {'func': '$84load_method.6', 'args': ['$96compare_op.12'], 'res': '$98call_method.13'}), (100, {'pred': '$98call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 110: ()})
2020-06-11 12:04:58,723:DEBUG:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'res': '$const104.1'}), (106, {'func': '$102load_global.0', 'args': ['$const104.1'], 'res': '$106call_function.2'}), (108, {'exc': '$106call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,723:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$const110.0'}), (112, {'res': '$112load_global.1'}), (114, {'item': '$112load_global.1', 'res': '$114load_method.2'}), (116, {'res': '$shape116.3'}), (118, {'res': '$const118.4'}), (120, {'res': '$const120.5'}), (122, {'start': '$const118.4', 'stop': '$const120.5', 'step': None, 'res': '$122build_slice.7', 'slicevar': '$122build_slice.6'}), (124, {'index': '$122build_slice.7', 'target': '$shape116.3', 'res': '$124binary_subscr.8'}), (126, {'func': '$114load_method.2', 'args': ['$124binary_subscr.8'], 'res': '$126call_method.9'}), (128, {'item': '$126call_method.9', 'res': '$128load_method.10'}), (130, {'func': '$128load_method.10', 'args': [], 'res': '$130call_method.11'}), (132, {'lhs': '$const110.0', 'rhs': '$130call_method.11', 'res': '$132binary_add.12'}), (134, {'value': '$132binary_add.12'}), (136, {'res': '$shape136.13'}), (138, {'item': '$shape136.13', 'res': '$138load_method.14'}), (140, {'func': '$138load_method.14', 'args': [], 'res': '$140call_method.15'}), (142, {'value': '$140call_method.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:04:58,723:DEBUG:block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=((144, {'res': '$end144.0'}), (146, {'res': '$step146.1'}), (148, {'items': ['$end144.0', '$step146.1'], 'res': '$148build_tuple.2'}), (150, {'retval': '$148build_tuple.2', 'castval': '$150return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,724:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = getattr(value=a, attr=ndim) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    branch $8compare_op.3, 12, 70            ['$8compare_op.3']
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = getitem(value=$14load_attr.1, index=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = getitem(value=$24load_attr.5, index=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end = $64binary_multiply.5               ['$64binary_multiply.5', 'end']
    jump 144                                 []
label 70:
    $70load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$70load_global.0']
    $72load_method.1 = getattr(value=$70load_global.0, attr=array) ['$70load_global.0', '$72load_method.1']
    $76load_attr.3 = getattr(value=a, attr=shape) ['$76load_attr.3', 'a']
    $78call_method.4 = call $72load_method.1($76load_attr.3, func=$72load_method.1, args=[Var($76load_attr.3, arraymath.py:2693)], kws=(), vararg=None) ['$72load_method.1', '$76load_attr.3', '$78call_method.4']
    shape = $78call_method.4                 ['$78call_method.4', 'shape']
    $82load_global.5 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$82load_global.5']
    $84load_method.6 = getattr(value=$82load_global.5, attr=all) ['$82load_global.5', '$84load_method.6']
    $86load_global.7 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$86load_global.7']
    $88load_method.8 = getattr(value=$86load_global.7, attr=diff) ['$86load_global.7', '$88load_method.8']
    $92call_method.10 = call $88load_method.8(shape, func=$88load_method.8, args=[Var(shape, arraymath.py:2693)], kws=(), vararg=None) ['$88load_method.8', '$92call_method.10', 'shape']
    $const94.11 = const(int, 0)              ['$const94.11']
    $96compare_op.12 = $92call_method.10 == $const94.11 ['$92call_method.10', '$96compare_op.12', '$const94.11']
    $98call_method.13 = call $84load_method.6($96compare_op.12, func=$84load_method.6, args=[Var($96compare_op.12, arraymath.py:2695)], kws=(), vararg=None) ['$84load_method.6', '$96compare_op.12', '$98call_method.13']
    branch $98call_method.13, 110, 102       ['$98call_method.13']
label 102:
    $102load_global.0 = global(ValueError: <class 'ValueError'>) ['$102load_global.0']
    $const104.1 = const(str, All dimensions of input must be of equal length) ['$const104.1']
    $106call_function.2 = call $102load_global.0($const104.1, func=$102load_global.0, args=[Var($const104.1, arraymath.py:2696)], kws=(), vararg=None) ['$102load_global.0', '$106call_function.2', '$const104.1']
    raise $106call_function.2                ['$106call_function.2']
label 110:
    $const110.0 = const(int, 1)              ['$const110.0']
    $112load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$112load_global.1']
    $114load_method.2 = getattr(value=$112load_global.1, attr=cumprod) ['$112load_global.1', '$114load_method.2']
    $const118.4 = const(NoneType, None)      ['$const118.4']
    $const120.5 = const(int, -1)             ['$const120.5']
    $122build_slice.6 = global(slice: <class 'slice'>) ['$122build_slice.6']
    $122build_slice.7 = call $122build_slice.6($const118.4, $const120.5, func=$122build_slice.6, args=(Var($const118.4, arraymath.py:2698), Var($const120.5, arraymath.py:2698)), kws=(), vararg=None) ['$122build_slice.6', '$122build_slice.7', '$const118.4', '$const120.5']
    $124binary_subscr.8 = getitem(value=shape, index=$122build_slice.7) ['$122build_slice.7', '$124binary_subscr.8', 'shape']
    $126call_method.9 = call $114load_method.2($124binary_subscr.8, func=$114load_method.2, args=[Var($124binary_subscr.8, arraymath.py:2698)], kws=(), vararg=None) ['$114load_method.2', '$124binary_subscr.8', '$126call_method.9']
    $128load_method.10 = getattr(value=$126call_method.9, attr=sum) ['$126call_method.9', '$128load_method.10']
    $130call_method.11 = call $128load_method.10(func=$128load_method.10, args=[], kws=(), vararg=None) ['$128load_method.10', '$130call_method.11']
    $132binary_add.12 = $const110.0 + $130call_method.11 ['$130call_method.11', '$132binary_add.12', '$const110.0']
    step = $132binary_add.12                 ['$132binary_add.12', 'step']
    $138load_method.14 = getattr(value=shape, attr=prod) ['$138load_method.14', 'shape']
    $140call_method.15 = call $138load_method.14(func=$138load_method.14, args=[], kws=(), vararg=None) ['$138load_method.14', '$140call_method.15']
    end = $140call_method.15                 ['$140call_method.15', 'end']
    jump 144                                 []
label 144:
    $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:04:58,730:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,731:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = const(int, 1)           ['$8compare_op.3']
    jump 12                                  []
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end = $64binary_multiply.5               ['$64binary_multiply.5', 'end']
    jump 144                                 []
label 144:
    $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:04:58,731:DEBUG:================================================================================
2020-06-11 12:04:58,731:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,731:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7480710>
2020-06-11 12:04:58,731:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,731:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:04:58,731:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:58,731:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:04:58,731:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:04:58,731:DEBUG:on stmt: jump 12
2020-06-11 12:04:58,731:DEBUG:==== SSA block analysis pass on 12
2020-06-11 12:04:58,731:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7480710>
2020-06-11 12:04:58,731:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,731:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:04:58,731:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:04:58,731:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:04:58,731:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,731:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:04:58,731:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:04:58,731:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:04:58,731:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:04:58,731:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:04:58,731:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:04:58,731:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:04:58,731:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:04:58,731:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7480710>
2020-06-11 12:04:58,732:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:04:58,732:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:04:58,732:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,732:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:04:58,732:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7480710>
2020-06-11 12:04:58,732:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:04:58,732:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:04:58,732:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:04:58,732:DEBUG:on stmt: end = $64binary_multiply.5
2020-06-11 12:04:58,732:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,732:DEBUG:==== SSA block analysis pass on 144
2020-06-11 12:04:58,732:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7480710>
2020-06-11 12:04:58,732:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:04:58,732:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:04:58,732:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:04:58,732:DEBUG:defs defaultdict(<class 'list'>,
            {'$148build_tuple.2': [<numba.core.ir.Assign object at 0x7f01c7278990>],
             '$14load_attr.1': [<numba.core.ir.Assign object at 0x7f01c72daf50>],
             '$150return_value.3': [<numba.core.ir.Assign object at 0x7f01c7278a50>],
             '$18binary_subscr.3': [<numba.core.ir.Assign object at 0x7f01c72dff10>],
             '$24load_attr.5': [<numba.core.ir.Assign object at 0x7f01c72dadd0>],
             '$28binary_subscr.7': [<numba.core.ir.Assign object at 0x7f01c7278e10>],
             '$36binary_add.10': [<numba.core.ir.Assign object at 0x7f01c72e5310>],
             '$48binary_multiply.2': [<numba.core.ir.Assign object at 0x7f01c72e5b10>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c72df390>],
             '$56load_global.1': [<numba.core.ir.Assign object at 0x7f01c72e5e10>],
             '$62call_function.4': [<numba.core.ir.Assign object at 0x7f01c72f1110>],
             '$64binary_multiply.5': [<numba.core.ir.Assign object at 0x7f01c72f1210>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x7f01c72daa90>],
             '$const16.2': [<numba.core.ir.Assign object at 0x7f01c72da090>],
             '$const26.6': [<numba.core.ir.Assign object at 0x7f01c72e5390>],
             '$const32.8': [<numba.core.ir.Assign object at 0x7f01c72e5410>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7f01c72d5190>],
             'a': [<numba.core.ir.Assign object at 0x7f01c72df650>],
             'end': [<numba.core.ir.Assign object at 0x7f01c72e5bd0>,
                     <numba.core.ir.Assign object at 0x7f01c72e5b90>],
             'm': [<numba.core.ir.Assign object at 0x7f01c72dad50>],
             'n': [<numba.core.ir.Assign object at 0x7f01c72e5690>],
             'step': [<numba.core.ir.Assign object at 0x7f01c72e57d0>],
             'wrap': [<numba.core.ir.Assign object at 0x7f01c72df350>]})
2020-06-11 12:04:58,732:DEBUG:SSA violators {'end'}
2020-06-11 12:04:58,733:DEBUG:Fix SSA violator on var end
2020-06-11 12:04:58,733:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,733:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7480ad0>
2020-06-11 12:04:58,733:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,733:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:04:58,733:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:58,733:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:04:58,733:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:04:58,733:DEBUG:on stmt: jump 12
2020-06-11 12:04:58,733:DEBUG:==== SSA block rewrite pass on 12
2020-06-11 12:04:58,733:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7480ad0>
2020-06-11 12:04:58,733:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,733:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:04:58,733:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:04:58,733:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:04:58,733:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,733:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:04:58,733:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:04:58,733:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:04:58,733:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:04:58,733:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:04:58,733:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:04:58,733:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:04:58,733:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:58,733:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7480ad0>
2020-06-11 12:04:58,733:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:04:58,734:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:04:58,734:DEBUG:first assign: end
2020-06-11 12:04:58,734:DEBUG:replaced with: end = $48binary_multiply.2
2020-06-11 12:04:58,734:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,734:DEBUG:==== SSA block rewrite pass on 54
2020-06-11 12:04:58,734:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7480ad0>
2020-06-11 12:04:58,734:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:04:58,734:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:04:58,734:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:04:58,734:DEBUG:on stmt: end = $64binary_multiply.5
2020-06-11 12:04:58,734:DEBUG:replaced with: end.1 = $64binary_multiply.5
2020-06-11 12:04:58,734:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,734:DEBUG:==== SSA block rewrite pass on 144
2020-06-11 12:04:58,734:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7480ad0>
2020-06-11 12:04:58,734:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:04:58,734:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:04:58,734:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:04:58,734:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {44: [<numba.core.ir.Assign object at 0x7f01c727f7d0>],
             54: [<numba.core.ir.Assign object at 0x7f01c727fbd0>]})
2020-06-11 12:04:58,735:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:58,735:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c727ff10>
2020-06-11 12:04:58,735:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:58,735:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:04:58,735:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:58,735:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:04:58,735:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:04:58,735:DEBUG:on stmt: jump 12
2020-06-11 12:04:58,735:DEBUG:==== SSA block rewrite pass on 12
2020-06-11 12:04:58,735:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c727ff10>
2020-06-11 12:04:58,735:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,735:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:04:58,735:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:04:58,735:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:04:58,735:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:04:58,735:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:04:58,735:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:04:58,735:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:04:58,735:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:04:58,735:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:04:58,735:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:04:58,735:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:04:58,735:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:58,735:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c727ff10>
2020-06-11 12:04:58,736:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:04:58,736:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:04:58,736:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,736:DEBUG:==== SSA block rewrite pass on 54
2020-06-11 12:04:58,736:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c727ff10>
2020-06-11 12:04:58,736:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:04:58,736:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:04:58,736:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:04:58,736:DEBUG:on stmt: end.1 = $64binary_multiply.5
2020-06-11 12:04:58,736:DEBUG:on stmt: jump 144
2020-06-11 12:04:58,736:DEBUG:==== SSA block rewrite pass on 144
2020-06-11 12:04:58,736:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c727ff10>
2020-06-11 12:04:58,736:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:04:58,736:DEBUG:find_def var='end' stmt=$148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:04:58,736:DEBUG:find_def_from_top label 144
2020-06-11 12:04:58,736:DEBUG:insert phi node end.2 = phi(incoming_values=[], incoming_blocks=[]) at 144
2020-06-11 12:04:58,736:DEBUG:find_def_from_bottom label 44
2020-06-11 12:04:58,736:DEBUG:incoming_def end = $48binary_multiply.2
2020-06-11 12:04:58,736:DEBUG:find_def_from_bottom label 54
2020-06-11 12:04:58,736:DEBUG:incoming_def end.1 = $64binary_multiply.5
2020-06-11 12:04:58,736:DEBUG:replaced with: $148build_tuple.2 = build_tuple(items=[Var(end.2, arraymath.py:2701), Var(step, arraymath.py:2687)])
2020-06-11 12:04:58,737:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:04:58,737:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:04:58,737:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,737:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = const(int, 1)           ['$8compare_op.3']
    jump 12                                  []
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end.1 = $64binary_multiply.5             ['$64binary_multiply.5', 'end.1']
    jump 144                                 []
label 144:
    end.2 = phi(incoming_values=[Var(end, arraymath.py:2689), Var(end.1, arraymath.py:2691)], incoming_blocks=[44, 54]) ['end', 'end.1', 'end.2']
    $148build_tuple.2 = build_tuple(items=[Var(end.2, arraymath.py:2701), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end.2', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:04:58,737:DEBUG:================================================================================
2020-06-11 12:04:58,912:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1770)
           2	LOAD_FAST(arg=0, lineno=1770)
           4	LOAD_METHOD(arg=0, lineno=1770)
           6	CALL_METHOD(arg=0, lineno=1770)
           8	LOAD_METHOD(arg=1, lineno=1770)
          10	LOAD_FAST(arg=0, lineno=1770)
          12	LOAD_ATTR(arg=2, lineno=1770)
          14	CALL_METHOD(arg=1, lineno=1770)
          16	RETURN_VALUE(arg=None, lineno=1770)
2020-06-11 12:04:58,912:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:58,912:DEBUG:stack: []
2020-06-11 12:04:58,912:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1770)
2020-06-11 12:04:58,912:DEBUG:stack []
2020-06-11 12:04:58,912:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack []
2020-06-11 12:04:58,913:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$ary2.0']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$4load_method.1']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$6call_method.2']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$8load_method.3']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$8load_method.3', '$ary10.4']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$8load_method.3', '$12load_attr.5']
2020-06-11 12:04:58,913:DEBUG:dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=1770)
2020-06-11 12:04:58,913:DEBUG:stack ['$14call_method.6']
2020-06-11 12:04:58,913:DEBUG:end state. edges=[]
2020-06-11 12:04:58,913:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:58,913:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:58,913:DEBUG:defmap: {}
2020-06-11 12:04:58,913:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,913:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:58,914:DEBUG:keep phismap: {}
2020-06-11 12:04:58,914:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:58,914:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:58,914:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'item': '$6call_method.2', 'res': '$8load_method.3'}), (10, {'res': '$ary10.4'}), (12, {'item': '$ary10.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'retval': '$14call_method.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:58,914:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,916:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:58,917:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,917:DEBUG:================================================================================
2020-06-11 12:04:58,917:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:58,917:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7689810>
2020-06-11 12:04:58,917:DEBUG:on stmt: ary = arg(0, name=ary)
2020-06-11 12:04:58,917:DEBUG:on stmt: $4load_method.1 = getattr(value=ary, attr=copy)
2020-06-11 12:04:58,917:DEBUG:on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
2020-06-11 12:04:58,917:DEBUG:on stmt: $8load_method.3 = getattr(value=$6call_method.2, attr=reshape)
2020-06-11 12:04:58,917:DEBUG:on stmt: $12load_attr.5 = getattr(value=ary, attr=size)
2020-06-11 12:04:58,917:DEBUG:on stmt: $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None)
2020-06-11 12:04:58,917:DEBUG:on stmt: $16return_value.7 = cast(value=$14call_method.6)
2020-06-11 12:04:58,917:DEBUG:on stmt: return $16return_value.7
2020-06-11 12:04:58,917:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7f01c76a0e50>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x7f01c76a0290>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7f01c76a0150>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f01c76a0a10>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x7f01c76a0890>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f01c76a0790>],
             'ary': [<numba.core.ir.Assign object at 0x7f01c76a0990>]})
2020-06-11 12:04:58,917:DEBUG:SSA violators set()
2020-06-11 12:04:58,917:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:58,917:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:04:58,917:DEBUG:================================================================================
2020-06-11 12:04:59,104:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:04:59,105:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,105:DEBUG:stack: []
2020-06-11 12:04:59,105:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack []
2020-06-11 12:04:59,105:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack []
2020-06-11 12:04:59,105:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:04:59,105:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:04:59,105:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:04:59,105:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:04:59,105:DEBUG:stack ['$8call_function.3']
2020-06-11 12:04:59,105:DEBUG:end state. edges=[]
2020-06-11 12:04:59,105:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,105:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,106:DEBUG:defmap: {}
2020-06-11 12:04:59,106:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,106:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,106:DEBUG:keep phismap: {}
2020-06-11 12:04:59,106:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,106:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,106:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,106:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c753c950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,108:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,108:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c753c950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,108:DEBUG:================================================================================
2020-06-11 12:04:59,108:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,108:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75cf210>
2020-06-11 12:04:59,108:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,108:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,108:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c753c950>)
2020-06-11 12:04:59,108:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:04:59,108:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:04:59,108:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:04:59,108:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c75d4550>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c756a290>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c756a0d0>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c75dee10>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c75de390>]})
2020-06-11 12:04:59,108:DEBUG:SSA violators set()
2020-06-11 12:04:59,108:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,109:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c753c950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,109:DEBUG:================================================================================
2020-06-11 12:04:59,111:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:04:59,111:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,111:DEBUG:stack: []
2020-06-11 12:04:59,111:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:04:59,111:DEBUG:stack []
2020-06-11 12:04:59,111:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:04:59,111:DEBUG:stack []
2020-06-11 12:04:59,111:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:04:59,111:DEBUG:stack ['$arr2.0']
2020-06-11 12:04:59,111:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:04:59,111:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:59,111:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:04:59,111:DEBUG:stack []
2020-06-11 12:04:59,111:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:04:59,111:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:04:59,111:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,111:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,112:DEBUG:stack: []
2020-06-11 12:04:59,112:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:04:59,112:DEBUG:stack []
2020-06-11 12:04:59,112:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:04:59,112:DEBUG:stack ['$axis12.0']
2020-06-11 12:04:59,112:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:04:59,112:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:04:59,112:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:04:59,112:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:04:59,112:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,112:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:04:59,112:DEBUG:stack: []
2020-06-11 12:04:59,112:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:04:59,112:DEBUG:stack []
2020-06-11 12:04:59,112:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:04:59,112:DEBUG:stack ['$axis36.0']
2020-06-11 12:04:59,112:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:04:59,112:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:04:59,112:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:04:59,112:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:04:59,112:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,112:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:04:59,112:DEBUG:stack: []
2020-06-11 12:04:59,113:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:04:59,113:DEBUG:stack []
2020-06-11 12:04:59,113:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:04:59,113:DEBUG:stack ['$axis20.0']
2020-06-11 12:04:59,113:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:04:59,113:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:04:59,113:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:04:59,113:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:04:59,113:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,113:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,113:DEBUG:stack: []
2020-06-11 12:04:59,113:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:04:59,113:DEBUG:stack []
2020-06-11 12:04:59,113:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:04:59,113:DEBUG:stack ['$28load_global.0']
2020-06-11 12:04:59,113:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:04:59,113:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:04:59,113:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:04:59,113:DEBUG:stack ['$32call_function.2']
2020-06-11 12:04:59,113:DEBUG:end state. edges=[]
2020-06-11 12:04:59,113:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,113:DEBUG:stack: []
2020-06-11 12:04:59,113:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:04:59,113:DEBUG:stack []
2020-06-11 12:04:59,114:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:04:59,114:DEBUG:stack ['$44load_global.0']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:04:59,114:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:04:59,114:DEBUG:stack ['$48call_function.2']
2020-06-11 12:04:59,114:DEBUG:end state. edges=[]
2020-06-11 12:04:59,114:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,114:DEBUG:stack: []
2020-06-11 12:04:59,114:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:04:59,114:DEBUG:stack []
2020-06-11 12:04:59,114:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:04:59,114:DEBUG:stack ['$52load_global.0']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:04:59,114:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:04:59,114:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:04:59,114:DEBUG:stack ['$58call_function.3']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:04:59,114:DEBUG:stack []
2020-06-11 12:04:59,114:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:04:59,114:DEBUG:stack ['$ashape62.4']
2020-06-11 12:04:59,114:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:04:59,114:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:04:59,115:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:04:59,115:DEBUG:stack []
2020-06-11 12:04:59,115:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:04:59,115:DEBUG:stack ['$ashape70.7']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:04:59,115:DEBUG:stack ['$72load_method.8']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:04:59,115:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:04:59,115:DEBUG:stack ['$76call_method.10']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack []
2020-06-11 12:04:59,115:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack ['$80load_global.11']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:04:59,115:DEBUG:stack ['$88call_function.15']
2020-06-11 12:04:59,115:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack []
2020-06-11 12:04:59,116:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$92load_global.16']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:04:59,116:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:04:59,116:DEBUG:stack ['$106call_method.23']
2020-06-11 12:04:59,116:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,116:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,116:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,116:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,116:DEBUG:stack: []
2020-06-11 12:04:59,116:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack []
2020-06-11 12:04:59,117:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack []
2020-06-11 12:04:59,117:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack ['$112load_global.0']
2020-06-11 12:04:59,117:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:04:59,117:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack ['$116call_function.2']
2020-06-11 12:04:59,117:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,117:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,117:DEBUG:stack: ['$phi120.0']
2020-06-11 12:04:59,117:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:04:59,117:DEBUG:stack ['$phi120.0']
2020-06-11 12:04:59,117:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,117:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:04:59,117:DEBUG:stack: []
2020-06-11 12:04:59,117:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:04:59,117:DEBUG:stack []
2020-06-11 12:04:59,117:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,117:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:04:59,118:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:04:59,118:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:04:59,118:DEBUG:stack ['$phi122.0']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:04:59,118:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:04:59,118:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,118:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:04:59,118:DEBUG:stack: []
2020-06-11 12:04:59,118:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:04:59,118:DEBUG:stack []
2020-06-11 12:04:59,118:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:04:59,118:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:04:59,118:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:04:59,118:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:04:59,118:DEBUG:stack ['$310call_function.3']
2020-06-11 12:04:59,118:DEBUG:end state. edges=[]
2020-06-11 12:04:59,118:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:04:59,118:DEBUG:stack: ['$phi128.0']
2020-06-11 12:04:59,118:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:04:59,119:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:04:59,119:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,120:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,120:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,120:DEBUG:stack: ['$phi156.0']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi156.0']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:04:59,120:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,120:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:04:59,120:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:04:59,120:DEBUG:stack: ['$phi164.0']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:04:59,120:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:04:59,120:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:04:59,121:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:04:59,121:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,121:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,121:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,121:DEBUG:stack: ['$phi192.0']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi192.0']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:04:59,122:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,122:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:04:59,122:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:04:59,122:DEBUG:stack: ['$phi200.0']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:04:59,122:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:04:59,122:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,123:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,123:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,123:DEBUG:stack: ['$phi228.0']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi228.0']
2020-06-11 12:04:59,123:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:04:59,123:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:04:59,124:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,124:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:04:59,124:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:04:59,124:DEBUG:stack: ['$phi238.0']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:04:59,124:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:04:59,124:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,125:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,125:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,125:DEBUG:stack: ['$phi266.0']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi266.0']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:04:59,125:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:04:59,125:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:04:59,125:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,126:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,126:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,126:DEBUG:stack: ['$phi274.0']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:04:59,126:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:04:59,126:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:04:59,127:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:04:59,127:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:04:59,127:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:04:59,127:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:04:59,127:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:04:59,127:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:04:59,127:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,127:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,127:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,127:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,128:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,128:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:04:59,128:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:04:59,128:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:04:59,129:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,129:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,130:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,130:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:04:59,130:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:04:59,130:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,130:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:04:59,130:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:04:59,130:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:04:59,131:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:04:59,132:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,135:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:04:59,147:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,148:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:04:59,148:DEBUG:================================================================================
2020-06-11 12:04:59,148:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,148:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,148:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,148:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,148:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,148:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,148:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,148:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,148:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:04:59,148:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,148:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,148:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,148:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:04:59,148:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,148:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,148:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,148:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,148:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,148:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:04:59,148:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,149:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,149:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,149:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,149:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,149:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,149:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,149:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,149:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,149:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,149:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,149:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,149:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,149:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,149:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,149:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,149:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,149:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,149:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,149:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,149:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,149:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,149:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:04:59,149:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,150:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,150:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,150:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,150:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,150:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,150:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:04:59,150:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,150:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,150:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,150:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,150:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,150:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,150:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:04:59,150:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,150:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,150:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,150:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,150:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:04:59,150:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,150:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,150:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,150:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:04:59,150:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,150:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,150:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,150:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,151:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:04:59,151:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,151:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:04:59,151:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,151:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,151:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:04:59,151:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,151:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,151:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,151:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,151:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,151:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,151:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:04:59,151:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c756a390>
2020-06-11 12:04:59,151:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,152:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7f01c75ab0d0>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7f01c75abc10>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7f01c7599c90>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7f01cd394d90>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7f01c75aba10>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7f01c74e73d0>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7f01c74e7410>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7f01c74e7750>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7f01c74e7610>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7f01c7285510>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7f01c74e7a90>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7f01c74e7cd0>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7f01c74e7250>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7f01c74e7190>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7f01c74e7bd0>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01c7583910>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7f01c7583d50>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7f01c763c310>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7f01c752c810>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7f01c752cc10>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f01c7586c50>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f01c7586350>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7f01c7586c90>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c75e4990>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7f01c7586f90>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7f01c7501d90>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7f01c7501f10>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7f01c7501450>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7f01c7501ed0>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7f01c7501a90>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7f01c7501bd0>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7f01c75014d0>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7f01c75abb50>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7f01c727fd90>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7f01c75aba50>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7f01c75ab1d0>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7f01c75abed0>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7f01c752c350>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7f01c7586090>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7f01c7586dd0>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7f01c75cfb10>],
             'arr': [<numba.core.ir.Assign object at 0x7f01cd3620d0>],
             'ashape': [<numba.core.ir.Assign object at 0x7f01c7501fd0>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7f01c75abcd0>],
             'axis': [<numba.core.ir.Assign object at 0x7f01cd362490>],
             'axis_index': [<numba.core.ir.Assign object at 0x7f01c74e7850>],
             'axis_len': [<numba.core.ir.Assign object at 0x7f01c7501910>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7f01c74e7f10>],
             'ndim': [<numba.core.ir.Assign object at 0x7f01cd366d50>],
             'result': [<numba.core.ir.Assign object at 0x7f01cd394910>,
                        <numba.core.ir.Assign object at 0x7f01c74e7c50>]})
2020-06-11 12:04:59,152:DEBUG:SSA violators {'result'}
2020-06-11 12:04:59,152:DEBUG:Fix SSA violator on var result
2020-06-11 12:04:59,152:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:59,152:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,152:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,152:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,152:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,152:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,152:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,152:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,152:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:59,152:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,152:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,152:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,152:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:59,152:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,152:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,152:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,153:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,153:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,153:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:04:59,153:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,153:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,153:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,153:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,153:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,153:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,153:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,153:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,153:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,153:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,153:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,153:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,153:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,153:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,153:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,153:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,153:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,153:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,153:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,153:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,154:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,154:DEBUG:first assign: result
2020-06-11 12:04:59,154:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:04:59,154:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,154:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:04:59,154:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,154:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,154:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,154:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,154:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,154:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,154:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:04:59,154:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,154:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,154:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,154:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,154:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,154:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,154:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:59,154:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,154:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,154:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,154:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,154:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:59,154:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,154:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,154:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,155:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:04:59,155:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,155:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,155:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,155:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,155:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:04:59,155:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:04:59,155:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,155:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:04:59,155:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,155:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,155:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:04:59,155:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,155:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,155:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,155:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,155:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,155:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,155:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:04:59,155:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cd32dbd0>
2020-06-11 12:04:59,155:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,155:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7f01c763c250>],
             128: [<numba.core.ir.Assign object at 0x7f01c75e6d90>]})
2020-06-11 12:04:59,156:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:59,156:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,156:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,156:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,156:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,156:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,156:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,156:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,156:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:59,156:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,156:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,156:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,156:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:59,156:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,156:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,156:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,156:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,156:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,156:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:04:59,157:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,157:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,157:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,157:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,157:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,157:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,157:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,157:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,157:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,157:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,157:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,157:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,157:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,157:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,157:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,157:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,157:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,157:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,157:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,157:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,157:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,157:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,158:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:04:59,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,158:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,158:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,158:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,158:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,158:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,158:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:04:59,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,158:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,158:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,158:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,158:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,158:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,158:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:59,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,158:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,158:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,158:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,158:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:59,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,158:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,158:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,158:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:04:59,158:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,159:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,159:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,159:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,159:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,159:DEBUG:find_def_from_top label 128
2020-06-11 12:04:59,159:DEBUG:idom 122 from label 128
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 122
2020-06-11 12:04:59,159:DEBUG:find_def_from_top label 122
2020-06-11 12:04:59,159:DEBUG:idom 120 from label 122
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 120
2020-06-11 12:04:59,159:DEBUG:find_def_from_top label 120
2020-06-11 12:04:59,159:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 305
2020-06-11 12:04:59,159:DEBUG:find_def_from_top label 305
2020-06-11 12:04:59,159:DEBUG:idom 128 from label 305
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 128
2020-06-11 12:04:59,159:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 110
2020-06-11 12:04:59,159:DEBUG:find_def_from_top label 110
2020-06-11 12:04:59,159:DEBUG:idom 52 from label 110
2020-06-11 12:04:59,159:DEBUG:find_def_from_bottom label 52
2020-06-11 12:04:59,159:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:04:59,159:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,159:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:04:59,159:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,160:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:04:59,160:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,160:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,160:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:04:59,160:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,160:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,160:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,160:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,160:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,160:DEBUG:find_def_from_top label 304
2020-06-11 12:04:59,160:DEBUG:idom 302 from label 304
2020-06-11 12:04:59,160:DEBUG:find_def_from_bottom label 302
2020-06-11 12:04:59,160:DEBUG:find_def_from_top label 302
2020-06-11 12:04:59,160:DEBUG:idom 120 from label 302
2020-06-11 12:04:59,160:DEBUG:find_def_from_bottom label 120
2020-06-11 12:04:59,160:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,160:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,160:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,160:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:04:59,160:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c75e6910>
2020-06-11 12:04:59,160:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,160:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,161:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:04:59,161:DEBUG:================================================================================
2020-06-11 12:04:59,168:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=178)
           2	LOAD_FAST(arg=0, lineno=178)
           4	RETURN_VALUE(arg=None, lineno=178)
2020-06-11 12:04:59,168:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,168:DEBUG:stack: []
2020-06-11 12:04:59,168:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=178)
2020-06-11 12:04:59,168:DEBUG:stack []
2020-06-11 12:04:59,168:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=178)
2020-06-11 12:04:59,168:DEBUG:stack []
2020-06-11 12:04:59,168:DEBUG:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=178)
2020-06-11 12:04:59,168:DEBUG:stack ['$arr2.0']
2020-06-11 12:04:59,168:DEBUG:end state. edges=[]
2020-06-11 12:04:59,168:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,169:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,169:DEBUG:defmap: {}
2020-06-11 12:04:59,169:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,169:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,169:DEBUG:keep phismap: {}
2020-06-11 12:04:59,169:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,169:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,169:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'retval': '$arr2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,169:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:59,170:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,171:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:59,171:DEBUG:================================================================================
2020-06-11 12:04:59,171:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,171:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c760d7d0>
2020-06-11 12:04:59,171:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,171:DEBUG:on stmt: v = arg(1, name=v)
2020-06-11 12:04:59,171:DEBUG:on stmt: $4return_value.1 = cast(value=arr)
2020-06-11 12:04:59,171:DEBUG:on stmt: return $4return_value.1
2020-06-11 12:04:59,171:DEBUG:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f01c760db10>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c760df90>],
             'v': [<numba.core.ir.Assign object at 0x7f01c760d790>]})
2020-06-11 12:04:59,171:DEBUG:SSA violators set()
2020-06-11 12:04:59,171:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,171:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:04:59,171:DEBUG:================================================================================
2020-06-11 12:04:59,208:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=465)
           2	BUILD_LIST(arg=0, lineno=465)
           4	STORE_FAST(arg=1, lineno=465)
           6	LOAD_FAST(arg=1, lineno=466)
           8	LOAD_METHOD(arg=0, lineno=466)
          10	LOAD_FAST(arg=0, lineno=466)
          12	CALL_METHOD(arg=1, lineno=466)
          14	POP_TOP(arg=None, lineno=466)
          16	LOAD_FAST(arg=1, lineno=467)
          18	RETURN_VALUE(arg=None, lineno=467)
2020-06-11 12:04:59,208:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,208:DEBUG:stack: []
2020-06-11 12:04:59,208:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=465)
2020-06-11 12:04:59,208:DEBUG:stack []
2020-06-11 12:04:59,208:DEBUG:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=465)
2020-06-11 12:04:59,208:DEBUG:stack []
2020-06-11 12:04:59,208:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=465)
2020-06-11 12:04:59,208:DEBUG:stack ['$2build_list.0']
2020-06-11 12:04:59,208:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=466)
2020-06-11 12:04:59,208:DEBUG:stack []
2020-06-11 12:04:59,208:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=466)
2020-06-11 12:04:59,208:DEBUG:stack ['$res6.1']
2020-06-11 12:04:59,209:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=466)
2020-06-11 12:04:59,209:DEBUG:stack ['$8load_method.2']
2020-06-11 12:04:59,209:DEBUG:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=466)
2020-06-11 12:04:59,209:DEBUG:stack ['$8load_method.2', '$iterable10.3']
2020-06-11 12:04:59,209:DEBUG:dispatch pc=14, inst=POP_TOP(arg=None, lineno=466)
2020-06-11 12:04:59,209:DEBUG:stack ['$12call_method.4']
2020-06-11 12:04:59,209:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=467)
2020-06-11 12:04:59,209:DEBUG:stack []
2020-06-11 12:04:59,209:DEBUG:dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=467)
2020-06-11 12:04:59,209:DEBUG:stack ['$res16.5']
2020-06-11 12:04:59,209:DEBUG:end state. edges=[]
2020-06-11 12:04:59,209:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,209:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,209:DEBUG:defmap: {}
2020-06-11 12:04:59,209:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,209:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,209:DEBUG:keep phismap: {}
2020-06-11 12:04:59,209:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,209:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,209:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'value': '$2build_list.0'}), (6, {'res': '$res6.1'}), (8, {'item': '$res6.1', 'res': '$8load_method.2'}), (10, {'res': '$iterable10.3'}), (12, {'func': '$8load_method.2', 'args': ['$iterable10.3'], 'res': '$12call_method.4'}), (16, {'res': '$res16.5'}), (18, {'retval': '$res16.5', 'castval': '$18return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,210:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:04:59,212:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,213:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:04:59,213:DEBUG:================================================================================
2020-06-11 12:04:59,213:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,213:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76c7750>
2020-06-11 12:04:59,213:DEBUG:on stmt: iterable = arg(0, name=iterable)
2020-06-11 12:04:59,213:DEBUG:on stmt: $2build_list.0 = build_list(items=[])
2020-06-11 12:04:59,213:DEBUG:on stmt: res = $2build_list.0
2020-06-11 12:04:59,213:DEBUG:on stmt: $8load_method.2 = getattr(value=res, attr=extend)
2020-06-11 12:04:59,213:DEBUG:on stmt: $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None)
2020-06-11 12:04:59,213:DEBUG:on stmt: $18return_value.6 = cast(value=res)
2020-06-11 12:04:59,213:DEBUG:on stmt: return $18return_value.6
2020-06-11 12:04:59,213:DEBUG:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7f01c76c2b50>],
             '$18return_value.6': [<numba.core.ir.Assign object at 0x7f01c76c2850>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7f01c76c27d0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7f01c76c2a90>],
             'iterable': [<numba.core.ir.Assign object at 0x7f01c76c2410>],
             'res': [<numba.core.ir.Assign object at 0x7f01c76c2b10>]})
2020-06-11 12:04:59,213:DEBUG:SSA violators set()
2020-06-11 12:04:59,213:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,213:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:04:59,213:DEBUG:================================================================================
2020-06-11 12:04:59,223:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=901)
           2	LOAD_FAST(arg=0, lineno=901)
           4	LOAD_ATTR(arg=0, lineno=901)
           6	STORE_FAST(arg=2, lineno=901)
           8	SETUP_LOOP(arg=20, lineno=902)
          10	LOAD_FAST(arg=1, lineno=902)
          12	GET_ITER(arg=None, lineno=902)
>         14	FOR_ITER(arg=12, lineno=902)
          16	STORE_FAST(arg=3, lineno=902)
          18	LOAD_FAST(arg=2, lineno=903)
          20	LOAD_FAST(arg=3, lineno=903)
          22	CALL_FUNCTION(arg=1, lineno=903)
          24	POP_TOP(arg=None, lineno=903)
          26	JUMP_ABSOLUTE(arg=14, lineno=903)
>         28	POP_BLOCK(arg=None, lineno=903)
>         30	LOAD_CONST(arg=0, lineno=903)
          32	RETURN_VALUE(arg=None, lineno=903)
2020-06-11 12:04:59,223:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,223:DEBUG:stack: []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=901)
2020-06-11 12:04:59,223:DEBUG:stack []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=901)
2020-06-11 12:04:59,223:DEBUG:stack []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=901)
2020-06-11 12:04:59,223:DEBUG:stack ['$lst2.0']
2020-06-11 12:04:59,223:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=901)
2020-06-11 12:04:59,223:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:59,223:DEBUG:end state. edges=[Edge(pc=8, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,223:DEBUG:pending: deque([State(pc_initial=8 nstack_initial=0)])
2020-06-11 12:04:59,223:DEBUG:stack: []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=8, inst=SETUP_LOOP(arg=20, lineno=902)
2020-06-11 12:04:59,223:DEBUG:stack []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=902)
2020-06-11 12:04:59,223:DEBUG:stack []
2020-06-11 12:04:59,223:DEBUG:dispatch pc=12, inst=GET_ITER(arg=None, lineno=902)
2020-06-11 12:04:59,223:DEBUG:stack ['$iterable10.0']
2020-06-11 12:04:59,223:DEBUG:end state. edges=[Edge(pc=14, stack=('$12get_iter.1',), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,223:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:59,224:DEBUG:stack: ['$phi14.0']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=14, inst=FOR_ITER(arg=12, lineno=902)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi14.0']
2020-06-11 12:04:59,224:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,224:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
2020-06-11 12:04:59,224:DEBUG:stack: []
2020-06-11 12:04:59,224:DEBUG:dispatch pc=28, inst=POP_BLOCK(arg=None, lineno=903)
2020-06-11 12:04:59,224:DEBUG:stack []
2020-06-11 12:04:59,224:DEBUG:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,224:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=2), State(pc_initial=30 nstack_initial=0)])
2020-06-11 12:04:59,224:DEBUG:stack: ['$phi16.0', '$phi16.1']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=902)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi16.0', '$phi16.1']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=903)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi16.0']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=903)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi16.0', '$meth18.2']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=903)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi16.0', '$meth18.2', '$v20.3']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=24, inst=POP_TOP(arg=None, lineno=903)
2020-06-11 12:04:59,224:DEBUG:stack ['$phi16.0', '$22call_function.4']
2020-06-11 12:04:59,224:DEBUG:dispatch pc=26, inst=JUMP_ABSOLUTE(arg=14, lineno=903)
2020-06-11 12:04:59,225:DEBUG:stack ['$phi16.0']
2020-06-11 12:04:59,225:DEBUG:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,225:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:59,225:DEBUG:stack: []
2020-06-11 12:04:59,225:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=0, lineno=903)
2020-06-11 12:04:59,225:DEBUG:stack []
2020-06-11 12:04:59,225:DEBUG:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=903)
2020-06-11 12:04:59,225:DEBUG:stack ['$const30.0']
2020-06-11 12:04:59,225:DEBUG:end state. edges=[]
2020-06-11 12:04:59,225:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:04:59,225:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,225:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=8 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set()})
2020-06-11 12:04:59,225:DEBUG:defmap: {'$phi14.0': State(pc_initial=8 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
2020-06-11 12:04:59,226:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:04:59,226:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:04:59,226:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:04:59,226:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:04:59,226:DEBUG:keep phismap: {'$phi14.0': {('$12get_iter.1', State(pc_initial=8 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
2020-06-11 12:04:59,226:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=8 nstack_initial=0): {'$phi14.0': '$12get_iter.1'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
2020-06-11 12:04:59,226:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,226:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'item': '$lst2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={8: ()})
2020-06-11 12:04:59,227:DEBUG:block_infos State(pc_initial=8 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$iterable10.0'}), (12, {'value': '$iterable10.0', 'res': '$12get_iter.1'})), outgoing_phis={'$phi14.0': '$12get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.1',)})
2020-06-11 12:04:59,227:DEBUG:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: (), 16: ('$phi14.0', '$14for_iter.2')})
2020-06-11 12:04:59,227:DEBUG:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$meth18.2'}), (20, {'res': '$v20.3'}), (22, {'func': '$meth18.2', 'args': ['$v20.3'], 'res': '$22call_function.4'}), (26, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
2020-06-11 12:04:59,227:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={30: ()})
2020-06-11 12:04:59,227:DEBUG:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$const30.0'}), (32, {'retval': '$const30.0', 'castval': '$32return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,227:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:04:59,232:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,232:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:04:59,232:DEBUG:================================================================================
2020-06-11 12:04:59,232:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,232:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,232:DEBUG:on stmt: lst = arg(0, name=lst)
2020-06-11 12:04:59,232:DEBUG:on stmt: iterable = arg(1, name=iterable)
2020-06-11 12:04:59,232:DEBUG:on stmt: $4load_attr.1 = getattr(value=lst, attr=append)
2020-06-11 12:04:59,232:DEBUG:on stmt: meth = $4load_attr.1
2020-06-11 12:04:59,232:DEBUG:on stmt: jump 8
2020-06-11 12:04:59,232:DEBUG:==== SSA block analysis pass on 8
2020-06-11 12:04:59,233:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,233:DEBUG:on stmt: $12get_iter.1 = getiter(value=iterable)
2020-06-11 12:04:59,233:DEBUG:on stmt: $phi14.0 = $12get_iter.1
2020-06-11 12:04:59,233:DEBUG:on stmt: jump 14
2020-06-11 12:04:59,233:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:04:59,233:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,233:DEBUG:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
2020-06-11 12:04:59,233:DEBUG:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
2020-06-11 12:04:59,233:DEBUG:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
2020-06-11 12:04:59,233:DEBUG:on stmt: $phi16.1 = $14for_iter.2
2020-06-11 12:04:59,233:DEBUG:on stmt: branch $14for_iter.3, 16, 28
2020-06-11 12:04:59,233:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:04:59,233:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,233:DEBUG:on stmt: v = $phi16.1
2020-06-11 12:04:59,233:DEBUG:on stmt: $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None)
2020-06-11 12:04:59,233:DEBUG:on stmt: jump 14
2020-06-11 12:04:59,233:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:04:59,233:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,233:DEBUG:on stmt: jump 30
2020-06-11 12:04:59,233:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:04:59,233:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd5d2a50>
2020-06-11 12:04:59,233:DEBUG:on stmt: $const30.0 = const(NoneType, None)
2020-06-11 12:04:59,233:DEBUG:on stmt: $32return_value.1 = cast(value=$const30.0)
2020-06-11 12:04:59,233:DEBUG:on stmt: return $32return_value.1
2020-06-11 12:04:59,234:DEBUG:defs defaultdict(<class 'list'>,
            {'$12get_iter.1': [<numba.core.ir.Assign object at 0x7f01cd4aaad0>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x7f01cd59bd50>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x7f01cd59b850>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x7f01cd59b910>],
             '$22call_function.4': [<numba.core.ir.Assign object at 0x7f01cd490750>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x7f01cd490190>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01cd4aab10>],
             '$const30.0': [<numba.core.ir.Assign object at 0x7f01cd490050>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x7f01cc0a2490>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x7f01cd5aae10>],
             'iterable': [<numba.core.ir.Assign object at 0x7f01cc0a2b10>],
             'lst': [<numba.core.ir.Assign object at 0x7f01cc0a2a90>],
             'meth': [<numba.core.ir.Assign object at 0x7f01cd4aac90>],
             'v': [<numba.core.ir.Assign object at 0x7f01cd490550>]})
2020-06-11 12:04:59,234:DEBUG:SSA violators set()
2020-06-11 12:04:59,234:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,234:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:04:59,234:DEBUG:================================================================================
2020-06-11 12:04:59,310:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=69)
           2	LOAD_FAST(arg=0, lineno=69)
           4	LOAD_FAST(arg=1, lineno=69)
           6	BINARY_SUBSCR(arg=None, lineno=69)
           8	RETURN_VALUE(arg=None, lineno=69)
2020-06-11 12:04:59,310:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,310:DEBUG:stack: []
2020-06-11 12:04:59,310:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=69)
2020-06-11 12:04:59,310:DEBUG:stack []
2020-06-11 12:04:59,310:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=69)
2020-06-11 12:04:59,310:DEBUG:stack []
2020-06-11 12:04:59,310:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=69)
2020-06-11 12:04:59,311:DEBUG:stack ['$a2.0']
2020-06-11 12:04:59,311:DEBUG:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=69)
2020-06-11 12:04:59,311:DEBUG:stack ['$a2.0', '$i4.1']
2020-06-11 12:04:59,311:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=69)
2020-06-11 12:04:59,311:DEBUG:stack ['$6binary_subscr.2']
2020-06-11 12:04:59,311:DEBUG:end state. edges=[]
2020-06-11 12:04:59,311:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,311:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,311:DEBUG:defmap: {}
2020-06-11 12:04:59,311:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,311:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,311:DEBUG:keep phismap: {}
2020-06-11 12:04:59,311:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,311:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,311:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$i4.1'}), (6, {'index': '$i4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,311:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,313:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,313:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,313:DEBUG:================================================================================
2020-06-11 12:04:59,313:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,313:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c75944d0>
2020-06-11 12:04:59,313:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:04:59,313:DEBUG:on stmt: i = arg(1, name=i)
2020-06-11 12:04:59,313:DEBUG:on stmt: $6binary_subscr.2 = getitem(value=a, index=i)
2020-06-11 12:04:59,313:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
2020-06-11 12:04:59,313:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:59,314:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7f01cd569810>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01cd569dd0>],
             'a': [<numba.core.ir.Assign object at 0x7f01cd439fd0>],
             'i': [<numba.core.ir.Assign object at 0x7f01cd439110>]})
2020-06-11 12:04:59,314:DEBUG:SSA violators set()
2020-06-11 12:04:59,314:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,314:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,314:DEBUG:================================================================================
2020-06-11 12:04:59,332:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3551)
           2	LOAD_GLOBAL(arg=0, lineno=3551)
           4	LOAD_METHOD(arg=1, lineno=3551)
           6	LOAD_FAST(arg=0, lineno=3551)
           8	LOAD_FAST(arg=2, lineno=3551)
          10	CALL_METHOD(arg=2, lineno=3551)
          12	STORE_FAST(arg=3, lineno=3551)
          14	SETUP_LOOP(arg=28, lineno=3552)
          16	LOAD_GLOBAL(arg=0, lineno=3552)
          18	LOAD_METHOD(arg=2, lineno=3552)
          20	LOAD_FAST(arg=3, lineno=3552)
          22	LOAD_ATTR(arg=3, lineno=3552)
          24	CALL_METHOD(arg=1, lineno=3552)
          26	GET_ITER(arg=None, lineno=3552)
>         28	FOR_ITER(arg=12, lineno=3552)
          30	STORE_FAST(arg=4, lineno=3552)
          32	LOAD_FAST(arg=1, lineno=3553)
          34	LOAD_FAST(arg=3, lineno=3553)
          36	LOAD_FAST(arg=4, lineno=3553)
          38	STORE_SUBSCR(arg=None, lineno=3553)
          40	JUMP_ABSOLUTE(arg=28, lineno=3553)
>         42	POP_BLOCK(arg=None, lineno=3553)
>         44	LOAD_FAST(arg=3, lineno=3554)
          46	RETURN_VALUE(arg=None, lineno=3554)
2020-06-11 12:04:59,332:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,332:DEBUG:stack: []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:59,333:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack ['$4load_method.1']
2020-06-11 12:04:59,333:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack ['$4load_method.1', '$shape6.2']
2020-06-11 12:04:59,333:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
2020-06-11 12:04:59,333:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3551)
2020-06-11 12:04:59,333:DEBUG:stack ['$10call_method.4']
2020-06-11 12:04:59,333:DEBUG:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,333:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:04:59,333:DEBUG:stack: []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=14, inst=SETUP_LOOP(arg=28, lineno=3552)
2020-06-11 12:04:59,333:DEBUG:stack []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=3552)
2020-06-11 12:04:59,333:DEBUG:stack []
2020-06-11 12:04:59,333:DEBUG:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=3552)
2020-06-11 12:04:59,333:DEBUG:stack ['$16load_global.0']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3552)
2020-06-11 12:04:59,334:DEBUG:stack ['$18load_method.1']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=3552)
2020-06-11 12:04:59,334:DEBUG:stack ['$18load_method.1', '$arr20.2']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=3552)
2020-06-11 12:04:59,334:DEBUG:stack ['$18load_method.1', '$22load_attr.3']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=26, inst=GET_ITER(arg=None, lineno=3552)
2020-06-11 12:04:59,334:DEBUG:stack ['$24call_method.4']
2020-06-11 12:04:59,334:DEBUG:end state. edges=[Edge(pc=28, stack=('$26get_iter.5',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,334:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:04:59,334:DEBUG:stack: ['$phi28.0']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=28, inst=FOR_ITER(arg=12, lineno=3552)
2020-06-11 12:04:59,334:DEBUG:stack ['$phi28.0']
2020-06-11 12:04:59,334:DEBUG:end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=30, stack=('$phi28.0', '$28for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,334:DEBUG:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=2)])
2020-06-11 12:04:59,334:DEBUG:stack: []
2020-06-11 12:04:59,334:DEBUG:dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3553)
2020-06-11 12:04:59,334:DEBUG:stack []
2020-06-11 12:04:59,334:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,334:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
2020-06-11 12:04:59,334:DEBUG:stack: ['$phi30.0', '$phi30.1']
2020-06-11 12:04:59,334:DEBUG:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3552)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0', '$phi30.1']
2020-06-11 12:04:59,335:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3553)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0']
2020-06-11 12:04:59,335:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3553)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0', '$value32.2']
2020-06-11 12:04:59,335:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3553)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0', '$value32.2', '$arr34.3']
2020-06-11 12:04:59,335:DEBUG:dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3553)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0', '$value32.2', '$arr34.3', '$idx36.4']
2020-06-11 12:04:59,335:DEBUG:dispatch pc=40, inst=JUMP_ABSOLUTE(arg=28, lineno=3553)
2020-06-11 12:04:59,335:DEBUG:stack ['$phi30.0']
2020-06-11 12:04:59,335:DEBUG:end state. edges=[Edge(pc=28, stack=('$phi30.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,335:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:04:59,335:DEBUG:stack: []
2020-06-11 12:04:59,335:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=3554)
2020-06-11 12:04:59,335:DEBUG:stack []
2020-06-11 12:04:59,335:DEBUG:dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=3554)
2020-06-11 12:04:59,335:DEBUG:stack ['$arr44.0']
2020-06-11 12:04:59,335:DEBUG:end state. edges=[]
2020-06-11 12:04:59,335:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:04:59,335:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,336:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2020-06-11 12:04:59,336:DEBUG:defmap: {'$phi28.0': State(pc_initial=14 nstack_initial=0),
 '$phi30.1': State(pc_initial=28 nstack_initial=1)}
2020-06-11 12:04:59,336:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi30.0': {('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:04:59,336:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:04:59,336:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:04:59,336:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:04:59,336:DEBUG:keep phismap: {'$phi28.0': {('$26get_iter.5', State(pc_initial=14 nstack_initial=0))},
 '$phi30.1': {('$28for_iter.2', State(pc_initial=28 nstack_initial=1))}}
2020-06-11 12:04:59,336:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=14 nstack_initial=0): {'$phi28.0': '$26get_iter.5'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$28for_iter.2'}})
2020-06-11 12:04:59,337:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$16load_global.0'}), (18, {'item': '$16load_global.0', 'res': '$18load_method.1'}), (20, {'res': '$arr20.2'}), (22, {'item': '$arr20.2', 'res': '$22load_attr.3'}), (24, {'func': '$18load_method.1', 'args': ['$22load_attr.3'], 'res': '$24call_method.4'}), (26, {'value': '$24call_method.4', 'res': '$26get_iter.5'})), outgoing_phis={'$phi28.0': '$26get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$26get_iter.5',)})
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'iterator': '$phi28.0', 'pair': '$28for_iter.1', 'indval': '$28for_iter.2', 'pred': '$28for_iter.3'}),), outgoing_phis={'$phi30.1': '$28for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 30: ('$phi28.0', '$28for_iter.2')})
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'value': '$phi30.1'}), (32, {'res': '$value32.2'}), (34, {'res': '$arr34.3'}), (36, {'res': '$idx36.4'}), (38, {'target': '$arr34.3', 'index': '$idx36.4', 'value': '$value32.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ('$phi30.0',)})
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
2020-06-11 12:04:59,337:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$arr44.0'}), (46, {'retval': '$arr44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,338:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:04:59,343:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,343:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:04:59,343:DEBUG:================================================================================
2020-06-11 12:04:59,343:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,343:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,343:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:04:59,343:DEBUG:on stmt: value = arg(1, name=value)
2020-06-11 12:04:59,343:DEBUG:on stmt: dtype = arg(2, name=dtype)
2020-06-11 12:04:59,343:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,343:DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2020-06-11 12:04:59,343:DEBUG:on stmt: $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None)
2020-06-11 12:04:59,344:DEBUG:on stmt: arr = $10call_method.4
2020-06-11 12:04:59,344:DEBUG:on stmt: jump 14
2020-06-11 12:04:59,344:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:04:59,344:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,344:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,344:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex)
2020-06-11 12:04:59,344:DEBUG:on stmt: $22load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,344:DEBUG:on stmt: $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None)
2020-06-11 12:04:59,344:DEBUG:on stmt: $26get_iter.5 = getiter(value=$24call_method.4)
2020-06-11 12:04:59,344:DEBUG:on stmt: $phi28.0 = $26get_iter.5
2020-06-11 12:04:59,344:DEBUG:on stmt: jump 28
2020-06-11 12:04:59,344:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:04:59,344:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,344:DEBUG:on stmt: $28for_iter.1 = iternext(value=$phi28.0)
2020-06-11 12:04:59,344:DEBUG:on stmt: $28for_iter.2 = pair_first(value=$28for_iter.1)
2020-06-11 12:04:59,344:DEBUG:on stmt: $28for_iter.3 = pair_second(value=$28for_iter.1)
2020-06-11 12:04:59,344:DEBUG:on stmt: $phi30.1 = $28for_iter.2
2020-06-11 12:04:59,344:DEBUG:on stmt: branch $28for_iter.3, 30, 42
2020-06-11 12:04:59,344:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:04:59,344:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,344:DEBUG:on stmt: idx = $phi30.1
2020-06-11 12:04:59,344:DEBUG:on stmt: arr[idx] = value
2020-06-11 12:04:59,344:DEBUG:on stmt: jump 28
2020-06-11 12:04:59,344:DEBUG:==== SSA block analysis pass on 42
2020-06-11 12:04:59,344:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,344:DEBUG:on stmt: jump 44
2020-06-11 12:04:59,344:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:04:59,344:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c72d82d0>
2020-06-11 12:04:59,345:DEBUG:on stmt: $46return_value.1 = cast(value=arr)
2020-06-11 12:04:59,345:DEBUG:on stmt: return $46return_value.1
2020-06-11 12:04:59,345:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f01cd325f10>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x7f01cd325710>],
             '$18load_method.1': [<numba.core.ir.Assign object at 0x7f01c74f7190>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x7f01c74f7350>],
             '$24call_method.4': [<numba.core.ir.Assign object at 0x7f01c74f7490>],
             '$26get_iter.5': [<numba.core.ir.Assign object at 0x7f01c74f7590>],
             '$28for_iter.1': [<numba.core.ir.Assign object at 0x7f01c74f7790>],
             '$28for_iter.2': [<numba.core.ir.Assign object at 0x7f01c74f7850>],
             '$28for_iter.3': [<numba.core.ir.Assign object at 0x7f01c74f7910>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01cd44c690>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7f01c72d8150>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f01cd44c810>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x7f01c74f74d0>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x7f01c74f7990>],
             'arr': [<numba.core.ir.Assign object at 0x7f01cd325450>],
             'dtype': [<numba.core.ir.Assign object at 0x7f01cd44c850>],
             'idx': [<numba.core.ir.Assign object at 0x7f01c74f7b50>],
             'shape': [<numba.core.ir.Assign object at 0x7f01cd44cb90>],
             'value': [<numba.core.ir.Assign object at 0x7f01cd44c290>]})
2020-06-11 12:04:59,345:DEBUG:SSA violators set()
2020-06-11 12:04:59,345:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,345:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:04:59,345:DEBUG:================================================================================
2020-06-11 12:04:59,399:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=133)
           2	LOAD_GLOBAL(arg=0, lineno=133)
           4	LOAD_CONST(arg=0, lineno=133)
           6	LOAD_CONST(arg=0, lineno=133)
           8	CALL_FUNCTION(arg=2, lineno=133)
          10	RETURN_VALUE(arg=None, lineno=133)
2020-06-11 12:04:59,399:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,399:DEBUG:stack: []
2020-06-11 12:04:59,399:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack []
2020-06-11 12:04:59,400:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack []
2020-06-11 12:04:59,400:DEBUG:dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack ['$2load_global.0']
2020-06-11 12:04:59,400:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=0, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack ['$2load_global.0', '$const4.1']
2020-06-11 12:04:59,400:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack ['$2load_global.0', '$const4.1', '$const6.2']
2020-06-11 12:04:59,400:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=133)
2020-06-11 12:04:59,400:DEBUG:stack ['$8call_function.3']
2020-06-11 12:04:59,400:DEBUG:end state. edges=[]
2020-06-11 12:04:59,400:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,400:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,400:DEBUG:defmap: {}
2020-06-11 12:04:59,400:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,400:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,400:DEBUG:keep phismap: {}
2020-06-11 12:04:59,401:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,401:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,401:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$const6.2'}), (8, {'func': '$2load_global.0', 'args': ['$const4.1', '$const6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,401:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,402:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,403:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,403:DEBUG:================================================================================
2020-06-11 12:04:59,403:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,403:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7499d50>
2020-06-11 12:04:59,403:DEBUG:on stmt: $2load_global.0 = global(slice: <class 'slice'>)
2020-06-11 12:04:59,403:DEBUG:on stmt: $const4.1 = const(NoneType, None)
2020-06-11 12:04:59,403:DEBUG:on stmt: $const6.2 = const(NoneType, None)
2020-06-11 12:04:59,403:DEBUG:on stmt: $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None)
2020-06-11 12:04:59,403:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:04:59,403:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:04:59,403:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c74a7f50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c74a7050>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c74a7fd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f01c74a7d90>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7f01c74a7e10>]})
2020-06-11 12:04:59,403:DEBUG:SSA violators set()
2020-06-11 12:04:59,403:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,403:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,403:DEBUG:================================================================================
2020-06-11 12:04:59,691:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
           8	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:04:59,691:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,691:DEBUG:stack: []
2020-06-11 12:04:59,691:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:04:59,691:DEBUG:stack []
2020-06-11 12:04:59,691:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:04:59,691:DEBUG:stack []
2020-06-11 12:04:59,691:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:04:59,691:DEBUG:stack ['$_28call_function_kw_6_12.0']
2020-06-11 12:04:59,691:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:04:59,691:DEBUG:stack ['$_28call_function_kw_6_12.0', '$n_14.1']
2020-06-11 12:04:59,691:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:04:59,691:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:04:59,691:DEBUG:end state. edges=[]
2020-06-11 12:04:59,691:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,691:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,692:DEBUG:defmap: {}
2020-06-11 12:04:59,692:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,692:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,692:DEBUG:keep phismap: {}
2020-06-11 12:04:59,692:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,692:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,692:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_28call_function_kw_6_12.0'}), (4, {'res': '$n_14.1'}), (6, {'lhs': '$_28call_function_kw_6_12.0', 'rhs': '$n_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,692:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,694:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,694:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,694:DEBUG:================================================================================
2020-06-11 12:04:59,694:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,694:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc159f10>
2020-06-11 12:04:59,694:DEBUG:on stmt: _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1)
2020-06-11 12:04:59,694:DEBUG:on stmt: n_1 = arg(1, name=n_1)
2020-06-11 12:04:59,694:DEBUG:on stmt: $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1
2020-06-11 12:04:59,694:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:04:59,694:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:04:59,695:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f01cc176f50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01cc175050>],
             '_28call_function_kw_6_1': [<numba.core.ir.Assign object at 0x7f01cc176090>],
             'n_1': [<numba.core.ir.Assign object at 0x7f01cc176110>]})
2020-06-11 12:04:59,695:DEBUG:SSA violators set()
2020-06-11 12:04:59,695:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,695:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:04:59,695:DEBUG:================================================================================
2020-06-11 12:04:59,719:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:04:59,719:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,719:DEBUG:stack: []
2020-06-11 12:04:59,719:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack []
2020-06-11 12:04:59,719:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack []
2020-06-11 12:04:59,719:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:04:59,719:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:04:59,719:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:04:59,719:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:04:59,719:DEBUG:stack ['$8call_function.3']
2020-06-11 12:04:59,719:DEBUG:end state. edges=[]
2020-06-11 12:04:59,719:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,719:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:04:59,719:DEBUG:defmap: {}
2020-06-11 12:04:59,719:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,720:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:04:59,720:DEBUG:keep phismap: {}
2020-06-11 12:04:59,720:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:04:59,720:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,720:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,720:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74623b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,722:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,722:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74623b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,722:DEBUG:================================================================================
2020-06-11 12:04:59,722:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,722:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc13b590>
2020-06-11 12:04:59,722:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,722:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,722:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74623b0>)
2020-06-11 12:04:59,722:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:04:59,722:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:04:59,722:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:04:59,722:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c74d6a50>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c752c2d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c74d6210>],
             'arr': [<numba.core.ir.Assign object at 0x7f01cc13b410>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c72f1cd0>]})
2020-06-11 12:04:59,722:DEBUG:SSA violators set()
2020-06-11 12:04:59,722:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,723:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74623b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:04:59,723:DEBUG:================================================================================
2020-06-11 12:04:59,724:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:04:59,725:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:04:59,725:DEBUG:stack: []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:04:59,725:DEBUG:stack []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:04:59,725:DEBUG:stack []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:04:59,725:DEBUG:stack ['$arr2.0']
2020-06-11 12:04:59,725:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:04:59,725:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:04:59,725:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:04:59,725:DEBUG:stack []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:04:59,725:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:04:59,725:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,725:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,725:DEBUG:stack: []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:04:59,725:DEBUG:stack []
2020-06-11 12:04:59,725:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:04:59,725:DEBUG:stack ['$axis12.0']
2020-06-11 12:04:59,725:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:04:59,725:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:04:59,726:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:04:59,726:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:04:59,726:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,726:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:04:59,726:DEBUG:stack: []
2020-06-11 12:04:59,726:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:04:59,726:DEBUG:stack []
2020-06-11 12:04:59,726:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:04:59,726:DEBUG:stack ['$axis36.0']
2020-06-11 12:04:59,726:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:04:59,726:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:04:59,726:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:04:59,726:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:04:59,726:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,726:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:04:59,726:DEBUG:stack: []
2020-06-11 12:04:59,726:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:04:59,726:DEBUG:stack []
2020-06-11 12:04:59,726:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:04:59,726:DEBUG:stack ['$axis20.0']
2020-06-11 12:04:59,726:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:04:59,726:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:04:59,726:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:04:59,727:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:04:59,727:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,727:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,727:DEBUG:stack: []
2020-06-11 12:04:59,727:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:04:59,727:DEBUG:stack []
2020-06-11 12:04:59,727:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:04:59,727:DEBUG:stack ['$28load_global.0']
2020-06-11 12:04:59,727:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:04:59,727:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:04:59,727:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:04:59,727:DEBUG:stack ['$32call_function.2']
2020-06-11 12:04:59,727:DEBUG:end state. edges=[]
2020-06-11 12:04:59,727:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,727:DEBUG:stack: []
2020-06-11 12:04:59,727:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:04:59,727:DEBUG:stack []
2020-06-11 12:04:59,727:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:04:59,727:DEBUG:stack ['$44load_global.0']
2020-06-11 12:04:59,727:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:04:59,727:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:04:59,727:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:04:59,728:DEBUG:stack ['$48call_function.2']
2020-06-11 12:04:59,728:DEBUG:end state. edges=[]
2020-06-11 12:04:59,728:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:04:59,728:DEBUG:stack: []
2020-06-11 12:04:59,728:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:04:59,728:DEBUG:stack []
2020-06-11 12:04:59,728:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:04:59,728:DEBUG:stack ['$52load_global.0']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:04:59,728:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:04:59,728:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:04:59,728:DEBUG:stack ['$58call_function.3']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:04:59,728:DEBUG:stack []
2020-06-11 12:04:59,728:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:04:59,728:DEBUG:stack ['$ashape62.4']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:04:59,728:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:04:59,728:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:04:59,728:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:04:59,729:DEBUG:stack []
2020-06-11 12:04:59,729:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:04:59,729:DEBUG:stack ['$ashape70.7']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:04:59,729:DEBUG:stack ['$72load_method.8']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:04:59,729:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:04:59,729:DEBUG:stack ['$76call_method.10']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack []
2020-06-11 12:04:59,729:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack ['$80load_global.11']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:04:59,729:DEBUG:stack ['$88call_function.15']
2020-06-11 12:04:59,729:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:04:59,729:DEBUG:stack []
2020-06-11 12:04:59,729:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$92load_global.16']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:04:59,730:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:04:59,730:DEBUG:stack ['$106call_method.23']
2020-06-11 12:04:59,730:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,730:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,730:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,730:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:04:59,730:DEBUG:stack: []
2020-06-11 12:04:59,730:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack []
2020-06-11 12:04:59,731:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack []
2020-06-11 12:04:59,731:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack ['$112load_global.0']
2020-06-11 12:04:59,731:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:04:59,731:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack ['$116call_function.2']
2020-06-11 12:04:59,731:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,731:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,731:DEBUG:stack: ['$phi120.0']
2020-06-11 12:04:59,731:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:04:59,731:DEBUG:stack ['$phi120.0']
2020-06-11 12:04:59,731:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,731:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:04:59,731:DEBUG:stack: []
2020-06-11 12:04:59,731:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:04:59,731:DEBUG:stack []
2020-06-11 12:04:59,731:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:04:59,731:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:04:59,731:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:04:59,732:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:04:59,732:DEBUG:stack ['$phi122.0']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:04:59,732:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:04:59,732:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,732:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:04:59,732:DEBUG:stack: []
2020-06-11 12:04:59,732:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:04:59,732:DEBUG:stack []
2020-06-11 12:04:59,732:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:04:59,732:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:04:59,732:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:04:59,732:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:04:59,732:DEBUG:stack ['$310call_function.3']
2020-06-11 12:04:59,732:DEBUG:end state. edges=[]
2020-06-11 12:04:59,732:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:04:59,732:DEBUG:stack: ['$phi128.0']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:04:59,732:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,732:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:04:59,733:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:04:59,733:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi128.0']
2020-06-11 12:04:59,734:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,734:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,734:DEBUG:stack: ['$phi156.0']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi156.0']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:04:59,734:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,734:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:04:59,734:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:04:59,734:DEBUG:stack: ['$phi164.0']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:04:59,734:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:04:59,734:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:04:59,735:DEBUG:stack ['$phi164.0']
2020-06-11 12:04:59,735:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,735:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,735:DEBUG:stack: ['$phi192.0']
2020-06-11 12:04:59,735:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi192.0']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:04:59,736:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,736:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:04:59,736:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:04:59,736:DEBUG:stack: ['$phi200.0']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:04:59,736:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:04:59,736:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi200.0']
2020-06-11 12:04:59,737:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,737:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,737:DEBUG:stack: ['$phi228.0']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi228.0']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:04:59,737:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:04:59,737:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:04:59,738:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,738:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:04:59,738:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:04:59,738:DEBUG:stack: ['$phi238.0']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:04:59,738:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,738:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi238.0']
2020-06-11 12:04:59,739:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,739:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,739:DEBUG:stack: ['$phi266.0']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi266.0']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:04:59,739:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:04:59,739:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:04:59,739:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,739:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,740:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,740:DEBUG:stack: ['$phi274.0']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:04:59,740:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:04:59,740:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:04:59,741:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:04:59,741:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:04:59,741:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:04:59,741:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:04:59,741:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:04:59,741:DEBUG:stack ['$phi274.0']
2020-06-11 12:04:59,741:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:04:59,741:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,741:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:04:59,741:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:04:59,742:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:04:59,742:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:04:59,742:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:04:59,742:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,743:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,744:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:04:59,744:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:04:59,744:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:04:59,744:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:04:59,744:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:04:59,744:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:04:59,744:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:04:59,744:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,744:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:04:59,745:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:04:59,749:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:04:59,761:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:04:59,762:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:04:59,762:DEBUG:================================================================================
2020-06-11 12:04:59,762:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:04:59,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,762:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,762:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,762:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,762:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,762:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,762:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,762:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:04:59,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,762:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,762:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,762:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:04:59,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,762:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,762:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,762:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,762:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,762:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:04:59,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,762:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,762:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,763:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,763:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,763:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,763:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,763:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,763:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,763:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,763:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,763:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,763:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,763:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,763:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,763:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,763:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,763:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:04:59,763:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,763:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,763:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,763:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,763:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,764:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,764:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:04:59,764:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,764:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,764:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,764:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,764:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,764:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,764:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:04:59,764:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,764:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,764:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,764:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,764:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:04:59,764:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,764:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,764:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,764:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:04:59,764:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,764:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,764:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,764:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,764:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:04:59,764:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,764:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:04:59,764:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,765:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,765:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:04:59,765:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,765:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,765:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,765:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,765:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,765:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,765:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:04:59,765:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c77a7250>
2020-06-11 12:04:59,765:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,766:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7f01c72ab210>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7f01c72ab310>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7f01c72ab450>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7f01c72ab550>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7f01c729de10>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7f01c72ab750>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7f01c72ab810>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7f01c72aba50>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7f01c72abb10>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7f01c72abbd0>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7f01c72abf10>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7f01c72ae150>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7f01c72ae350>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7f01c72ae510>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7f01c72ae690>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01c72aea10>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7f01c72aeb10>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7f01c7794750>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7f01c7794a50>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7f01c7794b10>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f01c729d710>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f01c729d950>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7f01c729db90>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c76c0ed0>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7f01c729dd50>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7f01c729df10>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7f01cc12d090>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7f01cc12d3d0>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7f01cc12d610>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7f01cc12d810>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7f01cc12d8d0>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7f01cc12db90>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7f01cc12dcd0>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7f01c76c0950>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7f01cc12de50>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7f01cc12df50>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7f01c72ab110>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7f01c7794910>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7f01c729da50>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7f01c72ab610>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7f01c72abc50>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c77a1750>],
             'ashape': [<numba.core.ir.Assign object at 0x7f01cc12d110>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7f01cc12dd50>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c76c0d50>],
             'axis_index': [<numba.core.ir.Assign object at 0x7f01c72abe10>],
             'axis_len': [<numba.core.ir.Assign object at 0x7f01cc12d490>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7f01c72ae710>],
             'ndim': [<numba.core.ir.Assign object at 0x7f01c76c03d0>],
             'result': [<numba.core.ir.Assign object at 0x7f01c72ab5d0>,
                        <numba.core.ir.Assign object at 0x7f01c72ae6d0>]})
2020-06-11 12:04:59,766:DEBUG:SSA violators {'result'}
2020-06-11 12:04:59,766:DEBUG:Fix SSA violator on var result
2020-06-11 12:04:59,766:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:59,766:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,766:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,766:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,766:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,766:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,766:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,766:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,766:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:59,766:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,766:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,766:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,766:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:59,766:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,766:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,766:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,766:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,766:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,766:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:04:59,766:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,766:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,767:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,767:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,767:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,767:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,767:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,767:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,767:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,767:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,767:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,767:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,767:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,767:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,767:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,767:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,767:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,767:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,767:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,767:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,767:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,767:DEBUG:first assign: result
2020-06-11 12:04:59,767:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:04:59,767:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,767:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:04:59,768:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,768:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,768:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,768:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,768:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,768:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,768:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:04:59,768:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,768:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,768:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,768:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,768:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,768:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,768:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:59,768:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,768:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,768:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,768:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,768:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:59,768:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,768:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,768:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,768:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:04:59,768:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,768:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,768:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,769:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,769:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:04:59,769:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:04:59,769:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,769:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:04:59,769:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,769:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,769:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:04:59,769:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,769:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,769:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,769:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,769:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,769:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,769:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:04:59,769:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7794e50>
2020-06-11 12:04:59,769:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,769:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7f01c7317210>],
             128: [<numba.core.ir.Assign object at 0x7f01c7317050>]})
2020-06-11 12:04:59,770:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:04:59,770:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,770:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:04:59,770:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:04:59,770:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:04:59,770:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:04:59,770:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,770:DEBUG:on stmt: jump 36
2020-06-11 12:04:59,770:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:04:59,770:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,770:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:04:59,770:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:04:59,770:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:04:59,770:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,770:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:04:59,770:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:04:59,770:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:04:59,770:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:04:59,770:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:04:59,770:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,770:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:04:59,770:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,770:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:04:59,771:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:04:59,771:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:04:59,771:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:04:59,771:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:04:59,771:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:04:59,771:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:04:59,771:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,771:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:04:59,771:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:04:59,771:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:04:59,771:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:04:59,771:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:04:59,771:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:04:59,771:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:04:59,771:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,771:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:04:59,771:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:04:59,771:DEBUG:on stmt: jump 110
2020-06-11 12:04:59,771:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:04:59,771:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,771:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:04:59,771:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:04:59,772:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:04:59,772:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:04:59,772:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,772:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:04:59,772:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,772:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:04:59,772:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:04:59,772:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:04:59,772:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:04:59,772:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:04:59,772:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:04:59,772:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,772:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:04:59,772:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:04:59,772:DEBUG:on stmt: jump 128
2020-06-11 12:04:59,772:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:04:59,772:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,772:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:04:59,772:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:04:59,772:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:04:59,772:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:04:59,772:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:04:59,772:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:04:59,772:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,773:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,773:DEBUG:find_def_from_top label 128
2020-06-11 12:04:59,773:DEBUG:idom 122 from label 128
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 122
2020-06-11 12:04:59,773:DEBUG:find_def_from_top label 122
2020-06-11 12:04:59,773:DEBUG:idom 120 from label 122
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 120
2020-06-11 12:04:59,773:DEBUG:find_def_from_top label 120
2020-06-11 12:04:59,773:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 305
2020-06-11 12:04:59,773:DEBUG:find_def_from_top label 305
2020-06-11 12:04:59,773:DEBUG:idom 128 from label 305
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 128
2020-06-11 12:04:59,773:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 110
2020-06-11 12:04:59,773:DEBUG:find_def_from_top label 110
2020-06-11 12:04:59,773:DEBUG:idom 52 from label 110
2020-06-11 12:04:59,773:DEBUG:find_def_from_bottom label 52
2020-06-11 12:04:59,773:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:04:59,773:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:04:59,773:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:04:59,774:DEBUG:on stmt: jump 305
2020-06-11 12:04:59,774:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:04:59,774:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,774:DEBUG:on stmt: jump 304
2020-06-11 12:04:59,774:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:04:59,774:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,774:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:04:59,774:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:04:59,774:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,774:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,774:DEBUG:find_def_from_top label 304
2020-06-11 12:04:59,774:DEBUG:idom 302 from label 304
2020-06-11 12:04:59,774:DEBUG:find_def_from_bottom label 302
2020-06-11 12:04:59,774:DEBUG:find_def_from_top label 302
2020-06-11 12:04:59,774:DEBUG:idom 120 from label 302
2020-06-11 12:04:59,774:DEBUG:find_def_from_bottom label 120
2020-06-11 12:04:59,774:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:04:59,774:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:04:59,774:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:04:59,774:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:04:59,774:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c7317e10>
2020-06-11 12:04:59,774:DEBUG:on stmt: jump 120
2020-06-11 12:04:59,774:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:04:59,775:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:04:59,775:DEBUG:================================================================================
2020-06-11 12:05:00,145:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
           8	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:05:00,145:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,145:DEBUG:stack: []
2020-06-11 12:05:00,146:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:05:00,146:DEBUG:stack []
2020-06-11 12:05:00,146:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:05:00,146:DEBUG:stack []
2020-06-11 12:05:00,146:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:05:00,146:DEBUG:stack ['$_60call_function_kw_22_12.0']
2020-06-11 12:05:00,146:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:05:00,146:DEBUG:stack ['$_60call_function_kw_22_12.0', '$n_24.1']
2020-06-11 12:05:00,146:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:05:00,146:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:05:00,146:DEBUG:end state. edges=[]
2020-06-11 12:05:00,146:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,146:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:00,146:DEBUG:defmap: {}
2020-06-11 12:05:00,146:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,146:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,146:DEBUG:keep phismap: {}
2020-06-11 12:05:00,146:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:00,146:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,147:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_60call_function_kw_22_12.0'}), (4, {'res': '$n_24.1'}), (6, {'lhs': '$_60call_function_kw_22_12.0', 'rhs': '$n_24.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,147:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,148:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,149:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,149:DEBUG:================================================================================
2020-06-11 12:05:00,149:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,149:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c71efe90>
2020-06-11 12:05:00,149:DEBUG:on stmt: _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1)
2020-06-11 12:05:00,149:DEBUG:on stmt: n_2 = arg(1, name=n_2)
2020-06-11 12:05:00,149:DEBUG:on stmt: $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2
2020-06-11 12:05:00,149:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:05:00,149:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:05:00,149:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f01c71f4e90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c7178050>],
             '_60call_function_kw_22_1': [<numba.core.ir.Assign object at 0x7f01c71f4b50>],
             'n_2': [<numba.core.ir.Assign object at 0x7f01c71f4bd0>]})
2020-06-11 12:05:00,149:DEBUG:SSA violators set()
2020-06-11 12:05:00,149:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,149:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,149:DEBUG:================================================================================
2020-06-11 12:05:00,170:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=166)
           2	LOAD_DEREF(arg=0, lineno=166)
           4	STORE_FAST(arg=1, lineno=166)
           6	SETUP_LOOP(arg=30, lineno=167)
           8	LOAD_GLOBAL(arg=0, lineno=167)
          10	LOAD_METHOD(arg=1, lineno=167)
          12	LOAD_FAST(arg=0, lineno=167)
          14	CALL_METHOD(arg=1, lineno=167)
          16	GET_ITER(arg=None, lineno=167)
>         18	FOR_ITER(arg=16, lineno=167)
          20	STORE_FAST(arg=2, lineno=167)
          22	LOAD_FAST(arg=1, lineno=168)
          24	LOAD_FAST(arg=2, lineno=168)
          26	LOAD_METHOD(arg=2, lineno=168)
          28	CALL_METHOD(arg=0, lineno=168)
          30	INPLACE_ADD(arg=None, lineno=168)
          32	STORE_FAST(arg=1, lineno=168)
          34	JUMP_ABSOLUTE(arg=18, lineno=168)
>         36	POP_BLOCK(arg=None, lineno=168)
>         38	LOAD_FAST(arg=1, lineno=169)
          40	RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:05:00,170:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,170:DEBUG:stack: []
2020-06-11 12:05:00,170:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=166)
2020-06-11 12:05:00,170:DEBUG:stack []
2020-06-11 12:05:00,170:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=166)
2020-06-11 12:05:00,170:DEBUG:stack []
2020-06-11 12:05:00,170:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=166)
2020-06-11 12:05:00,170:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:05:00,170:DEBUG:end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,170:DEBUG:pending: deque([State(pc_initial=6 nstack_initial=0)])
2020-06-11 12:05:00,170:DEBUG:stack: []
2020-06-11 12:05:00,170:DEBUG:dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=167)
2020-06-11 12:05:00,170:DEBUG:stack []
2020-06-11 12:05:00,170:DEBUG:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=167)
2020-06-11 12:05:00,170:DEBUG:stack []
2020-06-11 12:05:00,171:DEBUG:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$8load_global.0']
2020-06-11 12:05:00,171:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$10load_method.1']
2020-06-11 12:05:00,171:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$10load_method.1', '$arr12.2']
2020-06-11 12:05:00,171:DEBUG:dispatch pc=16, inst=GET_ITER(arg=None, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$14call_method.3']
2020-06-11 12:05:00,171:DEBUG:end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,171:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:00,171:DEBUG:stack: ['$phi18.0']
2020-06-11 12:05:00,171:DEBUG:dispatch pc=18, inst=FOR_ITER(arg=16, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$phi18.0']
2020-06-11 12:05:00,171:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,171:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2020-06-11 12:05:00,171:DEBUG:stack: []
2020-06-11 12:05:00,171:DEBUG:dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=168)
2020-06-11 12:05:00,171:DEBUG:stack []
2020-06-11 12:05:00,171:DEBUG:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,171:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
2020-06-11 12:05:00,171:DEBUG:stack: ['$phi20.0', '$phi20.1']
2020-06-11 12:05:00,171:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=167)
2020-06-11 12:05:00,171:DEBUG:stack ['$phi20.0', '$phi20.1']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0', '$c22.2']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0', '$c22.2', '$v24.3']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0', '$c22.2', '$26load_method.4']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0', '$c22.2', '$28call_method.5']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=1, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0', '$30inplace_add.6']
2020-06-11 12:05:00,172:DEBUG:dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=168)
2020-06-11 12:05:00,172:DEBUG:stack ['$phi20.0']
2020-06-11 12:05:00,172:DEBUG:end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,172:DEBUG:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:00,172:DEBUG:stack: []
2020-06-11 12:05:00,172:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=169)
2020-06-11 12:05:00,172:DEBUG:stack []
2020-06-11 12:05:00,172:DEBUG:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:05:00,172:DEBUG:stack ['$c38.0']
2020-06-11 12:05:00,172:DEBUG:end state. edges=[]
2020-06-11 12:05:00,172:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:00,173:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,173:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
2020-06-11 12:05:00,173:DEBUG:defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2020-06-11 12:05:00,173:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:00,173:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:00,173:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:00,174:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:00,174:DEBUG:keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2020-06-11 12:05:00,174:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2020-06-11 12:05:00,174:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
2020-06-11 12:05:00,174:DEBUG:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'retval': '$c38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,175:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:00,180:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,180:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:00,180:DEBUG:================================================================================
2020-06-11 12:05:00,180:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,180:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,180:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,180:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:00,180:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:00,180:DEBUG:on stmt: jump 6
2020-06-11 12:05:00,181:DEBUG:==== SSA block analysis pass on 6
2020-06-11 12:05:00,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,181:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,181:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:00,181:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:00,181:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:00,181:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:00,181:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,181:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:05:00,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,181:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:00,181:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:00,181:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:00,181:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:00,181:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:00,181:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:05:00,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,181:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:00,181:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:00,181:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:00,181:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,181:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:05:00,181:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,181:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:05:00,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,181:DEBUG:on stmt: jump 38
2020-06-11 12:05:00,182:DEBUG:==== SSA block analysis pass on 38
2020-06-11 12:05:00,182:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,182:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:00,182:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:00,182:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x7f01c71e00d0>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x7f01c76c0390>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x7f01c76c0b10>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7f01c76c0210>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7f01c74d6f90>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7f01c74d6090>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x7f01c72ae210>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x7f01c77b5b10>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c71e0810>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x7f01c77b5cd0>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7f01c77b55d0>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x7f01c71e0050>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7f01c71e04d0>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7f01c74d6150>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c71e0b10>],
             'c': [<numba.core.ir.Assign object at 0x7f01c71e01d0>,
                   <numba.core.ir.Assign object at 0x7f01c72aefd0>],
             'v': [<numba.core.ir.Assign object at 0x7f01c72ae910>]})
2020-06-11 12:05:00,182:DEBUG:SSA violators {'c'}
2020-06-11 12:05:00,182:DEBUG:Fix SSA violator on var c
2020-06-11 12:05:00,182:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,182:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,182:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:00,182:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:00,182:DEBUG:first assign: c
2020-06-11 12:05:00,182:DEBUG:replaced with: c = $2load_deref.0
2020-06-11 12:05:00,182:DEBUG:on stmt: jump 6
2020-06-11 12:05:00,182:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:05:00,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,182:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,182:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:00,182:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:00,183:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:00,183:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:00,183:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,183:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:05:00,183:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,183:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:00,183:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:00,183:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:00,183:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:00,183:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:00,183:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:05:00,183:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,183:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:00,183:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:00,183:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:00,183:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,183:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:05:00,183:DEBUG:replaced with: c.1 = $30inplace_add.6
2020-06-11 12:05:00,183:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,183:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,183:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,183:DEBUG:on stmt: jump 38
2020-06-11 12:05:00,183:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:05:00,183:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01cc132b50>
2020-06-11 12:05:00,183:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:00,184:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:00,184:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01c7328f50>],
             20: [<numba.core.ir.Assign object at 0x7f01c77a19d0>]})
2020-06-11 12:05:00,184:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,184:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,184:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,184:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:00,184:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:00,184:DEBUG:on stmt: jump 6
2020-06-11 12:05:00,184:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:05:00,184:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,184:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,184:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:00,184:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:00,184:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:00,184:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:00,184:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,185:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:05:00,185:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,185:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:00,185:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:00,185:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:00,185:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:00,185:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:00,185:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:05:00,185:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,185:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:00,185:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:00,185:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:00,185:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,185:DEBUG:find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,185:DEBUG:find_def_from_top label 20
2020-06-11 12:05:00,185:DEBUG:idom 18 from label 20
2020-06-11 12:05:00,185:DEBUG:find_def_from_bottom label 18
2020-06-11 12:05:00,185:DEBUG:find_def_from_top label 18
2020-06-11 12:05:00,185:DEBUG:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2020-06-11 12:05:00,185:DEBUG:find_def_from_bottom label 20
2020-06-11 12:05:00,185:DEBUG:incoming_def c.1 = $30inplace_add.6
2020-06-11 12:05:00,185:DEBUG:find_def_from_bottom label 6
2020-06-11 12:05:00,185:DEBUG:find_def_from_top label 6
2020-06-11 12:05:00,185:DEBUG:idom 0 from label 6
2020-06-11 12:05:00,185:DEBUG:find_def_from_bottom label 0
2020-06-11 12:05:00,185:DEBUG:incoming_def c = $2load_deref.0
2020-06-11 12:05:00,186:DEBUG:replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,186:DEBUG:on stmt: c.1 = $30inplace_add.6
2020-06-11 12:05:00,186:DEBUG:on stmt: jump 18
2020-06-11 12:05:00,186:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,186:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,186:DEBUG:on stmt: jump 38
2020-06-11 12:05:00,186:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:05:00,186:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c77a7f50>
2020-06-11 12:05:00,186:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:00,186:DEBUG:find_def var='c' stmt=$40return_value.1 = cast(value=c)
2020-06-11 12:05:00,186:DEBUG:find_def_from_top label 38
2020-06-11 12:05:00,186:DEBUG:idom 36 from label 38
2020-06-11 12:05:00,186:DEBUG:find_def_from_bottom label 36
2020-06-11 12:05:00,186:DEBUG:find_def_from_top label 36
2020-06-11 12:05:00,186:DEBUG:idom 18 from label 36
2020-06-11 12:05:00,186:DEBUG:find_def_from_bottom label 18
2020-06-11 12:05:00,186:DEBUG:replaced with: $40return_value.1 = cast(value=c.2)
2020-06-11 12:05:00,186:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:00,186:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,187:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    c.2 = phi(incoming_values=[Var(c.1, arraymath.py:168), Var(c, arraymath.py:166)], incoming_blocks=[20, 6]) ['c', 'c.1', 'c.2']
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c.2']
    c.1 = $30inplace_add.6                   ['$30inplace_add.6', 'c.1']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c.2)      ['$40return_value.1', 'c.2']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:00,187:DEBUG:================================================================================
2020-06-11 12:05:00,198:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2716)
           2	LOAD_GLOBAL(arg=0, lineno=2716)
           4	LOAD_FAST(arg=0, lineno=2716)
           6	CALL_FUNCTION(arg=1, lineno=2716)
           8	STORE_FAST(arg=2, lineno=2716)
          10	SETUP_LOOP(arg=52, lineno=2717)
          12	LOAD_GLOBAL(arg=1, lineno=2717)
          14	LOAD_FAST(arg=2, lineno=2717)
          16	CALL_FUNCTION(arg=1, lineno=2717)
          18	GET_ITER(arg=None, lineno=2717)
>         20	FOR_ITER(arg=40, lineno=2717)
          22	STORE_FAST(arg=3, lineno=2717)
          24	LOAD_FAST(arg=0, lineno=2718)
          26	LOAD_FAST(arg=3, lineno=2718)
          28	BINARY_SUBSCR(arg=None, lineno=2718)
          30	LOAD_FAST(arg=1, lineno=2718)
          32	LOAD_GLOBAL(arg=0, lineno=2718)
          34	LOAD_FAST(arg=1, lineno=2718)
          36	CALL_FUNCTION(arg=1, lineno=2718)
          38	LOAD_FAST(arg=2, lineno=2718)
          40	BINARY_SUBTRACT(arg=None, lineno=2718)
          42	LOAD_FAST(arg=3, lineno=2718)
          44	BINARY_ADD(arg=None, lineno=2718)
          46	BINARY_SUBSCR(arg=None, lineno=2718)
          48	COMPARE_OP(arg=3, lineno=2718)
          50	POP_JUMP_IF_FALSE(arg=20, lineno=2718)
          52	LOAD_GLOBAL(arg=2, lineno=2719)
          54	LOAD_CONST(arg=1, lineno=2719)
          56	CALL_FUNCTION(arg=1, lineno=2719)
          58	RAISE_VARARGS(arg=1, lineno=2719)
          60	JUMP_ABSOLUTE(arg=20, lineno=2719)
>         62	POP_BLOCK(arg=None, lineno=2719)
>         64	LOAD_CONST(arg=0, lineno=2719)
          66	RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:05:00,198:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,198:DEBUG:stack: []
2020-06-11 12:05:00,198:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2716)
2020-06-11 12:05:00,198:DEBUG:stack []
2020-06-11 12:05:00,199:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2716)
2020-06-11 12:05:00,199:DEBUG:stack []
2020-06-11 12:05:00,199:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2716)
2020-06-11 12:05:00,199:DEBUG:stack ['$2load_global.0']
2020-06-11 12:05:00,199:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2716)
2020-06-11 12:05:00,199:DEBUG:stack ['$2load_global.0', '$shape4.1']
2020-06-11 12:05:00,199:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2716)
2020-06-11 12:05:00,199:DEBUG:stack ['$6call_function.2']
2020-06-11 12:05:00,199:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,199:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:05:00,199:DEBUG:stack: []
2020-06-11 12:05:00,199:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=52, lineno=2717)
2020-06-11 12:05:00,199:DEBUG:stack []
2020-06-11 12:05:00,199:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=2717)
2020-06-11 12:05:00,199:DEBUG:stack []
2020-06-11 12:05:00,199:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2717)
2020-06-11 12:05:00,199:DEBUG:stack ['$12load_global.0']
2020-06-11 12:05:00,199:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=2717)
2020-06-11 12:05:00,199:DEBUG:stack ['$12load_global.0', '$n14.1']
2020-06-11 12:05:00,199:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=2717)
2020-06-11 12:05:00,199:DEBUG:stack ['$16call_function.2']
2020-06-11 12:05:00,199:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,200:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:05:00,200:DEBUG:stack: ['$phi20.0']
2020-06-11 12:05:00,200:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=40, lineno=2717)
2020-06-11 12:05:00,200:DEBUG:stack ['$phi20.0']
2020-06-11 12:05:00,200:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,200:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:05:00,200:DEBUG:stack: []
2020-06-11 12:05:00,200:DEBUG:dispatch pc=62, inst=POP_BLOCK(arg=None, lineno=2719)
2020-06-11 12:05:00,200:DEBUG:stack []
2020-06-11 12:05:00,200:DEBUG:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,200:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=64 nstack_initial=0)])
2020-06-11 12:05:00,200:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:05:00,200:DEBUG:dispatch pc=22, inst=STORE_FAST(arg=3, lineno=2717)
2020-06-11 12:05:00,200:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:05:00,200:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=2718)
2020-06-11 12:05:00,200:DEBUG:stack ['$phi22.0']
2020-06-11 12:05:00,200:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:05:00,200:DEBUG:stack ['$phi22.0', '$shape24.2']
2020-06-11 12:05:00,200:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:05:00,200:DEBUG:stack ['$phi22.0', '$shape24.2', '$i26.3']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6', '$main_shape34.7']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8', '$n38.9']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10', '$i42.11']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$44binary_add.12']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=3, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$46binary_subscr.13']
2020-06-11 12:05:00,201:DEBUG:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=20, lineno=2718)
2020-06-11 12:05:00,201:DEBUG:stack ['$phi22.0', '$48compare_op.14']
2020-06-11 12:05:00,201:DEBUG:end state. edges=[Edge(pc=52, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,202:DEBUG:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:05:00,202:DEBUG:stack: []
2020-06-11 12:05:00,202:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack []
2020-06-11 12:05:00,202:DEBUG:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack ['$const64.0']
2020-06-11 12:05:00,202:DEBUG:end state. edges=[]
2020-06-11 12:05:00,202:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:05:00,202:DEBUG:stack: ['$phi52.0']
2020-06-11 12:05:00,202:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack ['$phi52.0']
2020-06-11 12:05:00,202:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack ['$phi52.0', '$52load_global.1']
2020-06-11 12:05:00,202:DEBUG:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack ['$phi52.0', '$52load_global.1', '$const54.2']
2020-06-11 12:05:00,202:DEBUG:dispatch pc=58, inst=RAISE_VARARGS(arg=1, lineno=2719)
2020-06-11 12:05:00,202:DEBUG:stack ['$phi52.0', '$56call_function.3']
2020-06-11 12:05:00,202:DEBUG:end state. edges=[]
2020-06-11 12:05:00,202:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:05:00,203:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,203:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=52 nstack_initial=1): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2020-06-11 12:05:00,203:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:05:00,203:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:05:00,203:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:05:00,203:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:05:00,204:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:05:00,204:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:05:00,204:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:05:00,204:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$n14.1'}), (16, {'func': '$12load_global.0', 'args': ['$n14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$shape24.2'}), (26, {'res': '$i26.3'}), (28, {'index': '$i26.3', 'target': '$shape24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$main_shape30.5'}), (32, {'res': '$32load_global.6'}), (34, {'res': '$main_shape34.7'}), (36, {'func': '$32load_global.6', 'args': ['$main_shape34.7'], 'res': '$36call_function.8'}), (38, {'res': '$n38.9'}), (40, {'lhs': '$36call_function.8', 'rhs': '$n38.9', 'res': '$40binary_subtract.10'}), (42, {'res': '$i42.11'}), (44, {'lhs': '$40binary_subtract.10', 'rhs': '$i42.11', 'res': '$44binary_add.12'}), (46, {'index': '$44binary_add.12', 'target': '$main_shape30.5', 'res': '$46binary_subscr.13'}), (48, {'lhs': '$28binary_subscr.4', 'rhs': '$46binary_subscr.13', 'res': '$48compare_op.14'}), (50, {'pred': '$48compare_op.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: ('$phi22.0',), 20: ('$phi22.0',)})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.1'}), (54, {'res': '$const54.2'}), (56, {'func': '$52load_global.1', 'args': ['$const54.2'], 'res': '$56call_function.3'}), (58, {'exc': '$56call_function.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ()})
2020-06-11 12:05:00,204:DEBUG:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,205:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2716)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'shape']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = call $32load_global.6(main_shape, func=$32load_global.6, args=[Var(main_shape, arrayobj.py:2716)], kws=(), vararg=None) ['$32load_global.6', '$36call_function.8', 'main_shape']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise $56call_function.3                 ['$56call_function.3']
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:05:00,211:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,211:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 2)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 2)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:05:00,211:DEBUG:================================================================================
2020-06-11 12:05:00,211:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,211:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,211:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:05:00,211:DEBUG:on stmt: main_shape = arg(1, name=main_shape)
2020-06-11 12:05:00,211:DEBUG:on stmt: $2load_global.0 = global(len: <built-in function len>)
2020-06-11 12:05:00,211:DEBUG:on stmt: $6call_function.2 = const(int, 2)
2020-06-11 12:05:00,212:DEBUG:on stmt: n = $6call_function.2
2020-06-11 12:05:00,212:DEBUG:on stmt: jump 10
2020-06-11 12:05:00,212:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:05:00,212:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,212:DEBUG:on stmt: $12load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,212:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None)
2020-06-11 12:05:00,212:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:05:00,212:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:05:00,212:DEBUG:on stmt: jump 20
2020-06-11 12:05:00,212:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:05:00,212:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,212:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:05:00,212:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:05:00,212:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:05:00,212:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:05:00,212:DEBUG:on stmt: branch $20for_iter.3, 22, 62
2020-06-11 12:05:00,212:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:05:00,212:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,212:DEBUG:on stmt: i = $phi22.1
2020-06-11 12:05:00,212:DEBUG:on stmt: $28binary_subscr.4 = getitem(value=shape, index=i)
2020-06-11 12:05:00,212:DEBUG:on stmt: $32load_global.6 = global(len: <built-in function len>)
2020-06-11 12:05:00,212:DEBUG:on stmt: $36call_function.8 = const(int, 2)
2020-06-11 12:05:00,212:DEBUG:on stmt: $40binary_subtract.10 = $36call_function.8 - n
2020-06-11 12:05:00,212:DEBUG:on stmt: $44binary_add.12 = $40binary_subtract.10 + i
2020-06-11 12:05:00,212:DEBUG:on stmt: $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12)
2020-06-11 12:05:00,212:DEBUG:on stmt: $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13
2020-06-11 12:05:00,212:DEBUG:on stmt: branch $48compare_op.14, 52, 20
2020-06-11 12:05:00,212:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:05:00,213:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,213:DEBUG:on stmt: $52load_global.1 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,213:DEBUG:on stmt: $const54.2 = const(str, nditer(): operands could not be broadcast together)
2020-06-11 12:05:00,213:DEBUG:on stmt: $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None)
2020-06-11 12:05:00,213:DEBUG:on stmt: raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2020-06-11 12:05:00,213:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:05:00,213:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,213:DEBUG:on stmt: jump 64
2020-06-11 12:05:00,213:DEBUG:==== SSA block analysis pass on 64
2020-06-11 12:05:00,213:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c716b8d0>
2020-06-11 12:05:00,213:DEBUG:on stmt: $const64.0 = const(NoneType, None)
2020-06-11 12:05:00,213:DEBUG:on stmt: $66return_value.1 = cast(value=$const64.0)
2020-06-11 12:05:00,213:DEBUG:on stmt: return $66return_value.1
2020-06-11 12:05:00,213:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_global.0': [<numba.core.ir.Assign object at 0x7f01c7172a90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f01c7172c90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f01c7172d50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f01c7172f90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f01c71cd090>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f01c71cd150>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x7f01c71cd610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c71727d0>],
             '$32load_global.6': [<numba.core.ir.Assign object at 0x7f01c71cd810>],
             '$36call_function.8': [<numba.core.ir.Assign object at 0x7f01c71cda10>],
             '$40binary_subtract.10': [<numba.core.ir.Assign object at 0x7f01c71cdb50>],
             '$44binary_add.12': [<numba.core.ir.Assign object at 0x7f01c71cdd50>],
             '$46binary_subscr.13': [<numba.core.ir.Assign object at 0x7f01c71cde50>],
             '$48compare_op.14': [<numba.core.ir.Assign object at 0x7f01c71cdf50>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x7f01c7172e90>],
             '$56call_function.3': [<numba.core.ir.Assign object at 0x7f01c71d2290>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7f01c71d2610>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f01c7172850>],
             '$const54.2': [<numba.core.ir.Assign object at 0x7f01c71d2150>],
             '$const64.0': [<numba.core.ir.Assign object at 0x7f01c71d2510>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f01c7172b50>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f01c71cd1d0>],
             'i': [<numba.core.ir.Assign object at 0x7f01c71cd390>],
             'main_shape': [<numba.core.ir.Assign object at 0x7f01c7172110>],
             'n': [<numba.core.ir.Assign object at 0x7f01c7172910>],
             'shape': [<numba.core.ir.Assign object at 0x7f01c7172310>]})
2020-06-11 12:05:00,213:DEBUG:SSA violators set()
2020-06-11 12:05:00,213:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,214:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 2)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 2)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:05:00,214:DEBUG:================================================================================
2020-06-11 12:05:00,344:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_ADD(arg=None, lineno=244)
           8	LOAD_FAST(arg=2, lineno=244)
          10	BINARY_SUBTRACT(arg=None, lineno=244)
          12	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:05:00,344:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,344:DEBUG:stack: []
2020-06-11 12:05:00,344:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:05:00,344:DEBUG:stack []
2020-06-11 12:05:00,344:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:05:00,344:DEBUG:stack []
2020-06-11 12:05:00,344:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:05:00,344:DEBUG:stack ['$_46load_attr_15_12.0']
2020-06-11 12:05:00,344:DEBUG:dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=244)
2020-06-11 12:05:00,344:DEBUG:stack ['$_46load_attr_15_12.0', '$_76call_method_30_14.1']
2020-06-11 12:05:00,345:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:05:00,345:DEBUG:stack ['$6binary_add.2']
2020-06-11 12:05:00,345:DEBUG:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=244)
2020-06-11 12:05:00,345:DEBUG:stack ['$6binary_add.2', '$_92binary_true_divide_38_18.3']
2020-06-11 12:05:00,345:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:05:00,345:DEBUG:stack ['$10binary_subtract.4']
2020-06-11 12:05:00,345:DEBUG:end state. edges=[]
2020-06-11 12:05:00,345:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,345:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:00,345:DEBUG:defmap: {}
2020-06-11 12:05:00,345:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,345:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,345:DEBUG:keep phismap: {}
2020-06-11 12:05:00,345:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:00,345:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,345:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_46load_attr_15_12.0'}), (4, {'res': '$_76call_method_30_14.1'}), (6, {'lhs': '$_46load_attr_15_12.0', 'rhs': '$_76call_method_30_14.1', 'res': '$6binary_add.2'}), (8, {'res': '$_92binary_true_divide_38_18.3'}), (10, {'lhs': '$6binary_add.2', 'rhs': '$_92binary_true_divide_38_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,346:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:00,347:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,347:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:00,347:DEBUG:================================================================================
2020-06-11 12:05:00,348:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,348:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c73b7990>
2020-06-11 12:05:00,348:DEBUG:on stmt: _46load_attr_15_1 = arg(0, name=_46load_attr_15_1)
2020-06-11 12:05:00,348:DEBUG:on stmt: _76call_method_30_1 = arg(1, name=_76call_method_30_1)
2020-06-11 12:05:00,348:DEBUG:on stmt: _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1)
2020-06-11 12:05:00,348:DEBUG:on stmt: $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1
2020-06-11 12:05:00,348:DEBUG:on stmt: $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1
2020-06-11 12:05:00,348:DEBUG:on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
2020-06-11 12:05:00,348:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:05:00,348:DEBUG:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f01c7519690>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f01c7519550>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x7f01c7519390>],
             '_46load_attr_15_1': [<numba.core.ir.Assign object at 0x7f01c74ddf50>],
             '_76call_method_30_1': [<numba.core.ir.Assign object at 0x7f01c74ddf90>],
             '_92binary_true_divide_38_1': [<numba.core.ir.Assign object at 0x7f01c74dd1d0>]})
2020-06-11 12:05:00,348:DEBUG:SSA violators set()
2020-06-11 12:05:00,348:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,348:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:00,348:DEBUG:================================================================================
2020-06-11 12:05:00,368:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:05:00,368:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,368:DEBUG:stack: []
2020-06-11 12:05:00,368:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:05:00,368:DEBUG:stack []
2020-06-11 12:05:00,368:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:05:00,368:DEBUG:stack []
2020-06-11 12:05:00,368:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:05:00,368:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:05:00,369:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:05:00,369:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:05:00,369:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:05:00,369:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:05:00,369:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:05:00,369:DEBUG:stack ['$8call_function.3']
2020-06-11 12:05:00,369:DEBUG:end state. edges=[]
2020-06-11 12:05:00,369:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,369:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:00,369:DEBUG:defmap: {}
2020-06-11 12:05:00,369:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,369:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,369:DEBUG:keep phismap: {}
2020-06-11 12:05:00,369:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:00,369:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,369:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,370:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74813b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,371:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,371:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74813b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,371:DEBUG:================================================================================
2020-06-11 12:05:00,371:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,371:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c74935d0>
2020-06-11 12:05:00,371:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,371:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,372:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74813b0>)
2020-06-11 12:05:00,372:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:05:00,372:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:05:00,372:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:05:00,372:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c7493610>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c7493210>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c7493cd0>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c7493350>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c7493410>]})
2020-06-11 12:05:00,372:DEBUG:SSA violators set()
2020-06-11 12:05:00,372:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,372:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c74813b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,372:DEBUG:================================================================================
2020-06-11 12:05:00,375:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:05:00,375:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,375:DEBUG:stack: []
2020-06-11 12:05:00,375:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:05:00,375:DEBUG:stack []
2020-06-11 12:05:00,375:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:05:00,375:DEBUG:stack []
2020-06-11 12:05:00,375:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:05:00,375:DEBUG:stack ['$arr2.0']
2020-06-11 12:05:00,375:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:05:00,375:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:05:00,375:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:05:00,375:DEBUG:stack []
2020-06-11 12:05:00,375:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:05:00,375:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:05:00,376:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,376:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,376:DEBUG:stack: []
2020-06-11 12:05:00,376:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:05:00,376:DEBUG:stack []
2020-06-11 12:05:00,376:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:05:00,376:DEBUG:stack ['$axis12.0']
2020-06-11 12:05:00,376:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:05:00,376:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:05:00,376:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:05:00,376:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:05:00,376:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,376:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:05:00,376:DEBUG:stack: []
2020-06-11 12:05:00,376:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:05:00,376:DEBUG:stack []
2020-06-11 12:05:00,376:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:05:00,376:DEBUG:stack ['$axis36.0']
2020-06-11 12:05:00,376:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:05:00,376:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:05:00,376:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:05:00,376:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:05:00,377:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,377:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:05:00,377:DEBUG:stack: []
2020-06-11 12:05:00,377:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:05:00,377:DEBUG:stack []
2020-06-11 12:05:00,377:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:05:00,377:DEBUG:stack ['$axis20.0']
2020-06-11 12:05:00,377:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:05:00,377:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:05:00,377:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:05:00,377:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:05:00,377:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,377:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,377:DEBUG:stack: []
2020-06-11 12:05:00,377:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:05:00,377:DEBUG:stack []
2020-06-11 12:05:00,377:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:05:00,377:DEBUG:stack ['$28load_global.0']
2020-06-11 12:05:00,377:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:05:00,377:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:05:00,377:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:05:00,377:DEBUG:stack ['$32call_function.2']
2020-06-11 12:05:00,378:DEBUG:end state. edges=[]
2020-06-11 12:05:00,378:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,378:DEBUG:stack: []
2020-06-11 12:05:00,378:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:05:00,378:DEBUG:stack []
2020-06-11 12:05:00,378:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:05:00,378:DEBUG:stack ['$44load_global.0']
2020-06-11 12:05:00,378:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:05:00,378:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:05:00,378:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:05:00,378:DEBUG:stack ['$48call_function.2']
2020-06-11 12:05:00,378:DEBUG:end state. edges=[]
2020-06-11 12:05:00,378:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,378:DEBUG:stack: []
2020-06-11 12:05:00,378:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:05:00,378:DEBUG:stack []
2020-06-11 12:05:00,378:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:05:00,378:DEBUG:stack ['$52load_global.0']
2020-06-11 12:05:00,378:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:05:00,378:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:05:00,378:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:05:00,378:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:05:00,378:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:05:00,379:DEBUG:stack ['$58call_function.3']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:05:00,379:DEBUG:stack []
2020-06-11 12:05:00,379:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:05:00,379:DEBUG:stack ['$ashape62.4']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:05:00,379:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:05:00,379:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:05:00,379:DEBUG:stack []
2020-06-11 12:05:00,379:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:05:00,379:DEBUG:stack ['$ashape70.7']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:05:00,379:DEBUG:stack ['$72load_method.8']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:05:00,379:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:05:00,379:DEBUG:stack ['$76call_method.10']
2020-06-11 12:05:00,379:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:05:00,379:DEBUG:stack []
2020-06-11 12:05:00,379:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:05:00,380:DEBUG:stack ['$80load_global.11']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:05:00,380:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:05:00,380:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:05:00,380:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:05:00,380:DEBUG:stack ['$88call_function.15']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack []
2020-06-11 12:05:00,380:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$92load_global.16']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$94load_method.17']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:05:00,380:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:05:00,380:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:05:00,381:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:05:00,381:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:05:00,381:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:05:00,381:DEBUG:stack ['$106call_method.23']
2020-06-11 12:05:00,381:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,381:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,381:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,381:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,381:DEBUG:stack: []
2020-06-11 12:05:00,381:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack []
2020-06-11 12:05:00,381:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack []
2020-06-11 12:05:00,381:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack ['$112load_global.0']
2020-06-11 12:05:00,381:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:05:00,381:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack ['$116call_function.2']
2020-06-11 12:05:00,381:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,381:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,381:DEBUG:stack: ['$phi120.0']
2020-06-11 12:05:00,381:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:05:00,381:DEBUG:stack ['$phi120.0']
2020-06-11 12:05:00,382:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,382:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:05:00,382:DEBUG:stack: []
2020-06-11 12:05:00,382:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:05:00,382:DEBUG:stack []
2020-06-11 12:05:00,382:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,382:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:05:00,382:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:05:00,382:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:05:00,382:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:05:00,382:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:05:00,382:DEBUG:stack ['$phi122.0']
2020-06-11 12:05:00,382:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:05:00,382:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:05:00,382:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,382:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:05:00,382:DEBUG:stack: []
2020-06-11 12:05:00,382:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:05:00,382:DEBUG:stack []
2020-06-11 12:05:00,382:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:05:00,382:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:05:00,382:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:05:00,382:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:05:00,383:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:05:00,383:DEBUG:stack ['$310call_function.3']
2020-06-11 12:05:00,383:DEBUG:end state. edges=[]
2020-06-11 12:05:00,383:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:05:00,383:DEBUG:stack: ['$phi128.0']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,383:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:05:00,383:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,384:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,384:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,384:DEBUG:stack: ['$phi156.0']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi156.0']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:05:00,384:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:05:00,384:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:05:00,384:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,384:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:05:00,385:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:05:00,385:DEBUG:stack: ['$phi164.0']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:05:00,385:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:05:00,385:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,386:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,386:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,386:DEBUG:stack: ['$phi192.0']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi192.0']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:05:00,386:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,386:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:05:00,386:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:05:00,386:DEBUG:stack: ['$phi200.0']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:05:00,386:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,386:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:05:00,387:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:05:00,387:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,388:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,388:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,388:DEBUG:stack: ['$phi228.0']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi228.0']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:05:00,388:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,388:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:05:00,388:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:05:00,388:DEBUG:stack: ['$phi238.0']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:05:00,388:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:05:00,388:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,389:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,389:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,389:DEBUG:stack: ['$phi266.0']
2020-06-11 12:05:00,389:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:05:00,389:DEBUG:stack ['$phi266.0']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:05:00,390:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,390:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,390:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,390:DEBUG:stack: ['$phi274.0']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:05:00,390:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:05:00,390:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:05:00,391:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:05:00,391:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,391:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,391:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,391:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,392:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,392:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:05:00,392:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:05:00,392:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:05:00,393:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,394:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,394:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,394:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:05:00,394:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:05:00,395:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:05:00,395:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:05:00,396:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,399:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:05:00,411:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,412:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:05:00,412:DEBUG:================================================================================
2020-06-11 12:05:00,412:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,412:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,412:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,412:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,412:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,412:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,412:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,412:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,412:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:05:00,412:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,412:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,412:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,412:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:05:00,412:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,412:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,412:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,412:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,412:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,412:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:05:00,412:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,413:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,413:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,413:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,413:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,413:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,413:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,413:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,413:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,413:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,413:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,413:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,413:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,413:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,413:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,413:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,413:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,413:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,413:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,413:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,413:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,413:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,413:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:05:00,413:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,414:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,414:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,414:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,414:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,414:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,414:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:05:00,414:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,414:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,414:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,414:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,414:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,414:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,414:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:05:00,414:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,414:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,414:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,414:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,414:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:05:00,414:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,414:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,414:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,414:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:05:00,414:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,414:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,414:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,414:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,414:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:05:00,415:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,415:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:05:00,415:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,415:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,415:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:05:00,415:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,415:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,415:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,415:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,415:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,415:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,415:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:05:00,415:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c7430ed0>
2020-06-11 12:05:00,415:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,416:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7f01c75f45d0>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7f01c73b7410>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7f01c778ffd0>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7f01c75c0410>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7f01c75cb1d0>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7f01c76a6610>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7f01c76a6410>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7f01c76a6250>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7f01c76a68d0>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7f01c76a67d0>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7f01c76a6cd0>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7f01c76a6d50>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7f01c76a6e90>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7f01c7697b10>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7f01c7697b90>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01c7697d50>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7f01c7697610>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7f01cd3b3d10>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7f01c752c3d0>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7f01c752c190>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f01c748ba10>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f01c748b910>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7f01c748b850>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c748f9d0>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7f01c748bb10>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7f01c748b110>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7f01c748bc10>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7f01c75cbcd0>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7f01c75cbfd0>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7f01c75cbd90>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7f01c75cbe50>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7f01c75cb850>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7f01c75cb550>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7f01cd347050>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7f01c75cb350>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7f01c75cb690>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7f01c75f4ad0>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7f01c752ce10>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7f01c748b090>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7f01c76a6790>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7f01c76a6890>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c748f590>],
             'ashape': [<numba.core.ir.Assign object at 0x7f01c748b690>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7f01c75cbe90>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c748ff10>],
             'axis_index': [<numba.core.ir.Assign object at 0x7f01c76a6b50>],
             'axis_len': [<numba.core.ir.Assign object at 0x7f01c75cb910>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7f01c76971d0>],
             'ndim': [<numba.core.ir.Assign object at 0x7f01cd3470d0>],
             'result': [<numba.core.ir.Assign object at 0x7f01c716b0d0>,
                        <numba.core.ir.Assign object at 0x7f01c76979d0>]})
2020-06-11 12:05:00,416:DEBUG:SSA violators {'result'}
2020-06-11 12:05:00,416:DEBUG:Fix SSA violator on var result
2020-06-11 12:05:00,416:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,416:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,416:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,416:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,416:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,416:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,416:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,416:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,416:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,416:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,416:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,416:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,416:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:05:00,416:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,416:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,416:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,416:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,416:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,416:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:05:00,416:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,417:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,417:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,417:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,417:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,417:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,417:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,417:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,417:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,417:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,417:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,417:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,417:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,417:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,417:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,417:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,417:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,417:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,417:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,417:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,417:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,417:DEBUG:first assign: result
2020-06-11 12:05:00,417:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:05:00,417:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,417:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:05:00,417:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,418:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,418:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,418:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,418:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,418:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,418:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:05:00,418:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,418:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,418:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,418:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,418:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,418:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,418:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:05:00,418:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,418:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,418:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,418:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,418:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:05:00,418:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,418:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,418:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,418:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:05:00,418:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,418:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,418:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,418:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,418:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:05:00,419:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:05:00,419:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,419:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:05:00,419:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,419:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,419:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:05:00,419:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,419:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,419:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,419:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,419:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,419:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,419:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:05:00,419:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c7430d90>
2020-06-11 12:05:00,419:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,419:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7f01c748fc50>],
             128: [<numba.core.ir.Assign object at 0x7f01cd444610>]})
2020-06-11 12:05:00,419:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,419:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,419:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,420:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,420:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,420:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,420:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,420:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,420:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,420:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,420:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,420:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,420:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:05:00,420:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,420:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,420:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,420:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,420:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,420:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:05:00,420:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,420:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,420:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,420:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,420:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,420:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,420:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,421:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,421:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,421:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,421:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,421:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,421:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,421:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,421:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,421:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,421:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,421:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,421:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,421:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,421:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,421:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,421:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:05:00,421:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,421:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,421:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,421:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,421:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,421:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,421:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:05:00,421:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,422:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,422:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,422:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,422:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,422:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,422:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:05:00,422:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,422:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,422:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,422:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,422:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:05:00,422:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,422:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,422:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,422:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:05:00,422:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,422:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,422:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,422:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,422:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,422:DEBUG:find_def_from_top label 128
2020-06-11 12:05:00,422:DEBUG:idom 122 from label 128
2020-06-11 12:05:00,422:DEBUG:find_def_from_bottom label 122
2020-06-11 12:05:00,422:DEBUG:find_def_from_top label 122
2020-06-11 12:05:00,423:DEBUG:idom 120 from label 122
2020-06-11 12:05:00,423:DEBUG:find_def_from_bottom label 120
2020-06-11 12:05:00,423:DEBUG:find_def_from_top label 120
2020-06-11 12:05:00,423:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:05:00,423:DEBUG:find_def_from_bottom label 305
2020-06-11 12:05:00,423:DEBUG:find_def_from_top label 305
2020-06-11 12:05:00,423:DEBUG:idom 128 from label 305
2020-06-11 12:05:00,423:DEBUG:find_def_from_bottom label 128
2020-06-11 12:05:00,423:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:05:00,423:DEBUG:find_def_from_bottom label 110
2020-06-11 12:05:00,423:DEBUG:find_def_from_top label 110
2020-06-11 12:05:00,423:DEBUG:idom 52 from label 110
2020-06-11 12:05:00,423:DEBUG:find_def_from_bottom label 52
2020-06-11 12:05:00,423:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:05:00,423:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,423:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:05:00,423:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,423:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:05:00,423:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,424:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,424:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:05:00,424:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,424:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,424:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,424:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,424:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,424:DEBUG:find_def_from_top label 304
2020-06-11 12:05:00,424:DEBUG:idom 302 from label 304
2020-06-11 12:05:00,424:DEBUG:find_def_from_bottom label 302
2020-06-11 12:05:00,424:DEBUG:find_def_from_top label 302
2020-06-11 12:05:00,424:DEBUG:idom 120 from label 302
2020-06-11 12:05:00,424:DEBUG:find_def_from_bottom label 120
2020-06-11 12:05:00,424:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,424:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,424:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,424:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:05:00,424:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444ed0>
2020-06-11 12:05:00,424:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,424:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,425:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:05:00,425:DEBUG:================================================================================
2020-06-11 12:05:00,753:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
           8	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:00,754:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,754:DEBUG:stack: []
2020-06-11 12:05:00,754:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:05:00,754:DEBUG:stack []
2020-06-11 12:05:00,754:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:05:00,754:DEBUG:stack []
2020-06-11 12:05:00,754:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:05:00,754:DEBUG:stack ['$_112call_function_kw_6_12.0']
2020-06-11 12:05:00,754:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:05:00,754:DEBUG:stack ['$_112call_function_kw_6_12.0', '$_118binary_subtract_9_14.1']
2020-06-11 12:05:00,754:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:00,754:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:05:00,754:DEBUG:end state. edges=[]
2020-06-11 12:05:00,754:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,755:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:00,755:DEBUG:defmap: {}
2020-06-11 12:05:00,755:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,755:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,755:DEBUG:keep phismap: {}
2020-06-11 12:05:00,755:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:00,755:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,755:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_112call_function_kw_6_12.0'}), (4, {'res': '$_118binary_subtract_9_14.1'}), (6, {'lhs': '$_112call_function_kw_6_12.0', 'rhs': '$_118binary_subtract_9_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,755:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,757:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,757:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,757:DEBUG:================================================================================
2020-06-11 12:05:00,757:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,757:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01cd34f450>
2020-06-11 12:05:00,757:DEBUG:on stmt: _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1)
2020-06-11 12:05:00,757:DEBUG:on stmt: _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1)
2020-06-11 12:05:00,757:DEBUG:on stmt: $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1
2020-06-11 12:05:00,758:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:05:00,758:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:05:00,758:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f01cd35c8d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01cd35ca50>],
             '_112call_function_kw_6_1': [<numba.core.ir.Assign object at 0x7f01cd35c090>],
             '_118binary_subtract_9_1': [<numba.core.ir.Assign object at 0x7f01cd35c290>]})
2020-06-11 12:05:00,758:DEBUG:SSA violators set()
2020-06-11 12:05:00,758:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,758:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:00,758:DEBUG:================================================================================
2020-06-11 12:05:00,781:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:05:00,781:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,781:DEBUG:stack: []
2020-06-11 12:05:00,781:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack []
2020-06-11 12:05:00,782:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack []
2020-06-11 12:05:00,782:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:05:00,782:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:05:00,782:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:05:00,782:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:05:00,782:DEBUG:stack ['$8call_function.3']
2020-06-11 12:05:00,782:DEBUG:end state. edges=[]
2020-06-11 12:05:00,782:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,782:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:00,782:DEBUG:defmap: {}
2020-06-11 12:05:00,782:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,782:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:00,782:DEBUG:keep phismap: {}
2020-06-11 12:05:00,782:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:00,783:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,783:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,783:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c75c3b90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,785:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,786:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c75c3b90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,786:DEBUG:================================================================================
2020-06-11 12:05:00,786:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,786:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c73cf9d0>
2020-06-11 12:05:00,786:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,786:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,786:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c75c3b90>)
2020-06-11 12:05:00,786:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:05:00,786:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:05:00,786:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:05:00,786:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c71f9c10>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c71f9890>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c71f9b50>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c71f96d0>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c71f9750>]})
2020-06-11 12:05:00,786:DEBUG:SSA violators set()
2020-06-11 12:05:00,786:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,786:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7f01c75c3b90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:00,786:DEBUG:================================================================================
2020-06-11 12:05:00,788:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:05:00,788:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:00,788:DEBUG:stack: []
2020-06-11 12:05:00,788:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:05:00,789:DEBUG:stack []
2020-06-11 12:05:00,789:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:05:00,789:DEBUG:stack []
2020-06-11 12:05:00,789:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:05:00,789:DEBUG:stack ['$arr2.0']
2020-06-11 12:05:00,789:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:05:00,789:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:05:00,789:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:05:00,789:DEBUG:stack []
2020-06-11 12:05:00,789:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:05:00,789:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:05:00,789:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,789:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,789:DEBUG:stack: []
2020-06-11 12:05:00,789:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:05:00,789:DEBUG:stack []
2020-06-11 12:05:00,789:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:05:00,789:DEBUG:stack ['$axis12.0']
2020-06-11 12:05:00,789:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:05:00,789:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:05:00,789:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:05:00,789:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:05:00,789:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,790:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:05:00,790:DEBUG:stack: []
2020-06-11 12:05:00,790:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:05:00,790:DEBUG:stack []
2020-06-11 12:05:00,790:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:05:00,790:DEBUG:stack ['$axis36.0']
2020-06-11 12:05:00,790:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:05:00,790:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:05:00,790:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:05:00,790:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:05:00,790:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,790:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:05:00,790:DEBUG:stack: []
2020-06-11 12:05:00,790:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:05:00,790:DEBUG:stack []
2020-06-11 12:05:00,790:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:05:00,790:DEBUG:stack ['$axis20.0']
2020-06-11 12:05:00,790:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:05:00,790:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:05:00,790:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:05:00,790:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:05:00,790:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,791:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,791:DEBUG:stack: []
2020-06-11 12:05:00,791:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:05:00,791:DEBUG:stack []
2020-06-11 12:05:00,791:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:05:00,791:DEBUG:stack ['$28load_global.0']
2020-06-11 12:05:00,791:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:05:00,791:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:05:00,791:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:05:00,791:DEBUG:stack ['$32call_function.2']
2020-06-11 12:05:00,791:DEBUG:end state. edges=[]
2020-06-11 12:05:00,791:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,791:DEBUG:stack: []
2020-06-11 12:05:00,791:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:05:00,791:DEBUG:stack []
2020-06-11 12:05:00,791:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:05:00,791:DEBUG:stack ['$44load_global.0']
2020-06-11 12:05:00,791:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:05:00,791:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:05:00,791:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:05:00,791:DEBUG:stack ['$48call_function.2']
2020-06-11 12:05:00,791:DEBUG:end state. edges=[]
2020-06-11 12:05:00,791:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:05:00,791:DEBUG:stack: []
2020-06-11 12:05:00,791:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:05:00,792:DEBUG:stack []
2020-06-11 12:05:00,792:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:05:00,792:DEBUG:stack ['$52load_global.0']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:05:00,792:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:05:00,792:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:05:00,792:DEBUG:stack ['$58call_function.3']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:05:00,792:DEBUG:stack []
2020-06-11 12:05:00,792:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:05:00,792:DEBUG:stack ['$ashape62.4']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:05:00,792:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:05:00,792:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:05:00,792:DEBUG:stack []
2020-06-11 12:05:00,792:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:05:00,792:DEBUG:stack ['$ashape70.7']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:05:00,792:DEBUG:stack ['$72load_method.8']
2020-06-11 12:05:00,792:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:05:00,793:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:05:00,793:DEBUG:stack ['$76call_method.10']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack []
2020-06-11 12:05:00,793:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack ['$80load_global.11']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:05:00,793:DEBUG:stack ['$88call_function.15']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:05:00,793:DEBUG:stack []
2020-06-11 12:05:00,793:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:05:00,793:DEBUG:stack ['$92load_global.16']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:05:00,793:DEBUG:stack ['$94load_method.17']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:05:00,793:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:05:00,793:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:05:00,793:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:05:00,794:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:05:00,794:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:05:00,794:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:05:00,794:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:05:00,794:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:05:00,794:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:05:00,794:DEBUG:stack ['$106call_method.23']
2020-06-11 12:05:00,794:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,794:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,794:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,794:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:05:00,794:DEBUG:stack: []
2020-06-11 12:05:00,794:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:05:00,794:DEBUG:stack []
2020-06-11 12:05:00,794:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:05:00,794:DEBUG:stack []
2020-06-11 12:05:00,794:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:05:00,794:DEBUG:stack ['$112load_global.0']
2020-06-11 12:05:00,794:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:05:00,794:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:05:00,794:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:05:00,794:DEBUG:stack ['$116call_function.2']
2020-06-11 12:05:00,795:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,795:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,795:DEBUG:stack: ['$phi120.0']
2020-06-11 12:05:00,795:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:05:00,795:DEBUG:stack ['$phi120.0']
2020-06-11 12:05:00,795:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,795:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:05:00,795:DEBUG:stack: []
2020-06-11 12:05:00,795:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:05:00,795:DEBUG:stack []
2020-06-11 12:05:00,795:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:00,795:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:05:00,795:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:05:00,795:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:05:00,795:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:05:00,795:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:05:00,795:DEBUG:stack ['$phi122.0']
2020-06-11 12:05:00,795:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:05:00,795:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:05:00,795:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,795:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:05:00,795:DEBUG:stack: []
2020-06-11 12:05:00,796:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:05:00,796:DEBUG:stack []
2020-06-11 12:05:00,796:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:05:00,796:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:05:00,796:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:05:00,796:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:05:00,796:DEBUG:stack ['$310call_function.3']
2020-06-11 12:05:00,796:DEBUG:end state. edges=[]
2020-06-11 12:05:00,796:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:05:00,796:DEBUG:stack: ['$phi128.0']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:05:00,796:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:05:00,796:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi128.0']
2020-06-11 12:05:00,797:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,797:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,797:DEBUG:stack: ['$phi156.0']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi156.0']
2020-06-11 12:05:00,797:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:05:00,797:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:05:00,798:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,798:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:05:00,798:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:05:00,798:DEBUG:stack: ['$phi164.0']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:05:00,798:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:05:00,798:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi164.0']
2020-06-11 12:05:00,799:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,799:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,799:DEBUG:stack: ['$phi192.0']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi192.0']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:05:00,799:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:05:00,799:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:05:00,800:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,800:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:05:00,800:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:05:00,800:DEBUG:stack: ['$phi200.0']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,800:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:05:00,800:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi200.0']
2020-06-11 12:05:00,801:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,801:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,801:DEBUG:stack: ['$phi228.0']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi228.0']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:05:00,801:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:05:00,801:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:05:00,801:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,801:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:05:00,802:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:05:00,802:DEBUG:stack: ['$phi238.0']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:05:00,802:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:05:00,802:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi238.0']
2020-06-11 12:05:00,803:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,803:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,803:DEBUG:stack: ['$phi266.0']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi266.0']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:05:00,803:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,803:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,803:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,803:DEBUG:stack: ['$phi274.0']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:05:00,803:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,803:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:05:00,804:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:05:00,804:DEBUG:stack ['$phi274.0']
2020-06-11 12:05:00,805:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:00,805:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,805:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:05:00,805:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:00,805:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:05:00,806:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:05:00,806:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:05:00,806:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,807:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,807:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:05:00,808:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:05:00,808:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:05:00,808:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:05:00,808:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:05:00,809:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:00,812:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:05:00,825:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:00,826:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:05:00,826:DEBUG:================================================================================
2020-06-11 12:05:00,826:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:00,826:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,826:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,826:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,826:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,826:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,826:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,826:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,826:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:05:00,826:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,826:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,826:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,826:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:05:00,826:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,826:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,826:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,827:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,827:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,827:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:05:00,827:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,827:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,827:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,827:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,827:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,827:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,827:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,827:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,827:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,827:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,827:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,827:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,827:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,827:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,827:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,827:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,827:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,827:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,827:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,827:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,828:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,828:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,828:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:05:00,828:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,828:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,828:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,828:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,828:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,828:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,828:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:05:00,828:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,828:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,828:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,828:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,828:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,828:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,828:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:05:00,828:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,828:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,828:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,828:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,828:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:05:00,828:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,828:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,828:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,829:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:05:00,829:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,829:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,829:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,829:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,829:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:05:00,829:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,829:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:05:00,829:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,829:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,829:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:05:00,829:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,829:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,829:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,829:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,829:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,829:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,829:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:05:00,829:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c76a6f90>
2020-06-11 12:05:00,829:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,830:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7f01cd341690>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7f01cd341110>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7f01cd341c90>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7f01cd341c50>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7f01c76eff50>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7f01cd341550>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7f01cd341b50>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7f01cd341790>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7f01cd3418d0>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7f01cd341a50>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7f01cd341f10>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7f01c74a0f50>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7f01c74a0350>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7f01cd4286d0>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7f01cd4285d0>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01cd428550>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7f01c767f2d0>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7f01cd3e9d10>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7f01c7493f50>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7f01c74936d0>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f01c70ba7d0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f01c70ba250>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7f01c742ced0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01c70bf7d0>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7f01c742c390>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7f01c74ad7d0>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7f01c74adc90>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7f01c76b22d0>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7f01c73cf950>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7f01c73cfb50>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7f01cd32f050>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7f01cd382710>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7f01c76ef790>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7f01c73cfdd0>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7f01c76ef150>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7f01c76ef190>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7f01c76efe90>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7f01c752c450>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7f01c70ba190>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7f01cd341350>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7f01cd3419d0>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c70bfd50>],
             'ashape': [<numba.core.ir.Assign object at 0x7f01c76b2310>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7f01c76ef5d0>],
             'axis': [<numba.core.ir.Assign object at 0x7f01c70bf690>],
             'axis_index': [<numba.core.ir.Assign object at 0x7f01cd3410d0>],
             'axis_len': [<numba.core.ir.Assign object at 0x7f01c76b23d0>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7f01cd428850>],
             'ndim': [<numba.core.ir.Assign object at 0x7f01c70bfe90>],
             'result': [<numba.core.ir.Assign object at 0x7f01cd341e10>,
                        <numba.core.ir.Assign object at 0x7f01cd428b10>]})
2020-06-11 12:05:00,830:DEBUG:SSA violators {'result'}
2020-06-11 12:05:00,830:DEBUG:Fix SSA violator on var result
2020-06-11 12:05:00,830:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,830:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,830:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,830:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,830:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,830:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,830:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,830:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,830:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,830:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,831:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,831:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,831:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:05:00,831:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,831:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,831:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,831:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,831:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,831:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:05:00,831:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,831:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,831:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,831:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,831:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,831:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,831:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,831:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,831:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,831:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,831:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,831:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,831:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,831:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,832:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,832:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,832:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,832:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,832:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,832:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,832:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,832:DEBUG:first assign: result
2020-06-11 12:05:00,832:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:05:00,832:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,832:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:05:00,832:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,832:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,832:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,832:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,832:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,832:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,832:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:05:00,832:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,832:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,832:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,832:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,832:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,832:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,832:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:05:00,833:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,833:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,833:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,833:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,833:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:05:00,833:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,833:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,833:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,833:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:05:00,833:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,833:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,833:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,833:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,833:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:05:00,833:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:05:00,833:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,833:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:05:00,833:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,833:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,833:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:05:00,833:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,833:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,833:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,833:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,834:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,834:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,834:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:05:00,834:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c75eb490>
2020-06-11 12:05:00,834:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,834:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7f01c76a69d0>],
             128: [<numba.core.ir.Assign object at 0x7f01cd444090>]})
2020-06-11 12:05:00,834:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:00,834:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,834:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:00,834:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:05:00,834:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:05:00,834:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:05:00,834:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,834:DEBUG:on stmt: jump 36
2020-06-11 12:05:00,834:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:00,834:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,834:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:05:00,834:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:05:00,835:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:05:00,835:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,835:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:05:00,835:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:05:00,835:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:05:00,835:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:05:00,835:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:05:00,835:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,835:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:05:00,835:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,835:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:05:00,835:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:05:00,835:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:05:00,835:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:05:00,835:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:05:00,835:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:05:00,835:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:05:00,835:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,835:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:05:00,835:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:05:00,835:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:00,835:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:05:00,836:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:05:00,836:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:05:00,836:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:05:00,836:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,836:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:05:00,836:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:05:00,836:DEBUG:on stmt: jump 110
2020-06-11 12:05:00,836:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:05:00,836:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,836:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:05:00,836:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:05:00,836:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:05:00,836:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:05:00,836:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,836:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:05:00,836:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,836:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:05:00,836:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:05:00,836:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:05:00,836:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:05:00,836:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:05:00,836:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:05:00,836:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,837:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:05:00,837:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:05:00,837:DEBUG:on stmt: jump 128
2020-06-11 12:05:00,837:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:05:00,837:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,837:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:05:00,837:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:05:00,837:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:05:00,837:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:05:00,837:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:05:00,837:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:05:00,837:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,837:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,837:DEBUG:find_def_from_top label 128
2020-06-11 12:05:00,837:DEBUG:idom 122 from label 128
2020-06-11 12:05:00,837:DEBUG:find_def_from_bottom label 122
2020-06-11 12:05:00,837:DEBUG:find_def_from_top label 122
2020-06-11 12:05:00,837:DEBUG:idom 120 from label 122
2020-06-11 12:05:00,837:DEBUG:find_def_from_bottom label 120
2020-06-11 12:05:00,837:DEBUG:find_def_from_top label 120
2020-06-11 12:05:00,837:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:05:00,837:DEBUG:find_def_from_bottom label 305
2020-06-11 12:05:00,837:DEBUG:find_def_from_top label 305
2020-06-11 12:05:00,837:DEBUG:idom 128 from label 305
2020-06-11 12:05:00,837:DEBUG:find_def_from_bottom label 128
2020-06-11 12:05:00,837:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:05:00,837:DEBUG:find_def_from_bottom label 110
2020-06-11 12:05:00,837:DEBUG:find_def_from_top label 110
2020-06-11 12:05:00,838:DEBUG:idom 52 from label 110
2020-06-11 12:05:00,838:DEBUG:find_def_from_bottom label 52
2020-06-11 12:05:00,838:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:05:00,838:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:00,838:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:05:00,838:DEBUG:on stmt: jump 305
2020-06-11 12:05:00,838:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:05:00,838:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,838:DEBUG:on stmt: jump 304
2020-06-11 12:05:00,838:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:05:00,838:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,838:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>)
2020-06-11 12:05:00,838:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:05:00,838:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,838:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,838:DEBUG:find_def_from_top label 304
2020-06-11 12:05:00,838:DEBUG:idom 302 from label 304
2020-06-11 12:05:00,838:DEBUG:find_def_from_bottom label 302
2020-06-11 12:05:00,838:DEBUG:find_def_from_top label 302
2020-06-11 12:05:00,838:DEBUG:idom 120 from label 302
2020-06-11 12:05:00,838:DEBUG:find_def_from_bottom label 120
2020-06-11 12:05:00,838:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:05:00,839:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:05:00,839:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:05:00,839:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:05:00,839:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01cd444a10>
2020-06-11 12:05:00,839:DEBUG:on stmt: jump 120
2020-06-11 12:05:00,839:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:00,839:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7f01cd830560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:05:00,839:DEBUG:================================================================================
2020-06-11 12:05:01,211:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
           8	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:01,211:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:01,211:DEBUG:stack: []
2020-06-11 12:05:01,211:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:05:01,211:DEBUG:stack []
2020-06-11 12:05:01,211:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:05:01,211:DEBUG:stack []
2020-06-11 12:05:01,211:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:05:01,211:DEBUG:stack ['$_148call_function_kw_24_12.0']
2020-06-11 12:05:01,211:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:05:01,211:DEBUG:stack ['$_148call_function_kw_24_12.0', '$_154binary_subtract_27_14.1']
2020-06-11 12:05:01,211:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:01,211:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:05:01,211:DEBUG:end state. edges=[]
2020-06-11 12:05:01,211:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:01,212:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:01,212:DEBUG:defmap: {}
2020-06-11 12:05:01,212:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,212:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,212:DEBUG:keep phismap: {}
2020-06-11 12:05:01,212:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:01,212:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:01,212:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_148call_function_kw_24_12.0'}), (4, {'res': '$_154binary_subtract_27_14.1'}), (6, {'lhs': '$_148call_function_kw_24_12.0', 'rhs': '$_154binary_subtract_27_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:01,212:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,214:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:01,214:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,214:DEBUG:================================================================================
2020-06-11 12:05:01,214:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:01,214:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6fd9790>
2020-06-11 12:05:01,214:DEBUG:on stmt: _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1)
2020-06-11 12:05:01,214:DEBUG:on stmt: _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1)
2020-06-11 12:05:01,214:DEBUG:on stmt: $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1
2020-06-11 12:05:01,214:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:05:01,214:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:05:01,214:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f01c6fd61d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c6fd6350>],
             '_148call_function_kw_24_1': [<numba.core.ir.Assign object at 0x7f01c6fd2e50>],
             '_154binary_subtract_27_1': [<numba.core.ir.Assign object at 0x7f01c6fd2ed0>]})
2020-06-11 12:05:01,214:DEBUG:SSA violators set()
2020-06-11 12:05:01,214:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:01,215:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,215:DEBUG:================================================================================
2020-06-11 12:05:01,238:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_ADD(arg=None, lineno=250)
           8	LOAD_FAST(arg=2, lineno=250)
          10	BINARY_SUBTRACT(arg=None, lineno=250)
          12	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:01,238:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:01,238:DEBUG:stack: []
2020-06-11 12:05:01,238:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:05:01,238:DEBUG:stack []
2020-06-11 12:05:01,238:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack []
2020-06-11 12:05:01,239:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack ['$_134load_attr_17_12.0']
2020-06-11 12:05:01,239:DEBUG:dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack ['$_134load_attr_17_12.0', '$_168call_method_34_14.1']
2020-06-11 12:05:01,239:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack ['$6binary_add.2']
2020-06-11 12:05:01,239:DEBUG:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack ['$6binary_add.2', '$_192binary_true_divide_46_18.3']
2020-06-11 12:05:01,239:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:05:01,239:DEBUG:stack ['$10binary_subtract.4']
2020-06-11 12:05:01,239:DEBUG:end state. edges=[]
2020-06-11 12:05:01,239:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:01,239:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:01,239:DEBUG:defmap: {}
2020-06-11 12:05:01,239:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,239:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,239:DEBUG:keep phismap: {}
2020-06-11 12:05:01,239:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:01,239:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:01,240:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_134load_attr_17_12.0'}), (4, {'res': '$_168call_method_34_14.1'}), (6, {'lhs': '$_134load_attr_17_12.0', 'rhs': '$_168call_method_34_14.1', 'res': '$6binary_add.2'}), (8, {'res': '$_192binary_true_divide_46_18.3'}), (10, {'lhs': '$6binary_add.2', 'rhs': '$_192binary_true_divide_46_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:01,240:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:01,242:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:01,242:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:01,243:DEBUG:================================================================================
2020-06-11 12:05:01,243:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:01,243:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6eff7d0>
2020-06-11 12:05:01,243:DEBUG:on stmt: _134load_attr_17_1 = arg(0, name=_134load_attr_17_1)
2020-06-11 12:05:01,243:DEBUG:on stmt: _168call_method_34_1 = arg(1, name=_168call_method_34_1)
2020-06-11 12:05:01,243:DEBUG:on stmt: _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1)
2020-06-11 12:05:01,243:DEBUG:on stmt: $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1
2020-06-11 12:05:01,243:DEBUG:on stmt: $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1
2020-06-11 12:05:01,243:DEBUG:on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
2020-06-11 12:05:01,243:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:05:01,243:DEBUG:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f01c6efd610>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f01c6efd710>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x7f01c6efd450>],
             '_134load_attr_17_1': [<numba.core.ir.Assign object at 0x7f01c6ef9fd0>],
             '_168call_method_34_1': [<numba.core.ir.Assign object at 0x7f01c6efd090>],
             '_192binary_true_divide_46_1': [<numba.core.ir.Assign object at 0x7f01c6efd150>]})
2020-06-11 12:05:01,243:DEBUG:SSA violators set()
2020-06-11 12:05:01,243:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:01,243:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:05:01,243:DEBUG:================================================================================
2020-06-11 12:05:01,262:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=236)
           2	LOAD_FAST(arg=0, lineno=236)
           4	LOAD_FAST(arg=1, lineno=252)
           6	BINARY_SUBTRACT(arg=None, lineno=252)
           8	RETURN_VALUE(arg=None, lineno=252)
2020-06-11 12:05:01,262:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:01,262:DEBUG:stack: []
2020-06-11 12:05:01,262:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=236)
2020-06-11 12:05:01,262:DEBUG:stack []
2020-06-11 12:05:01,262:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=236)
2020-06-11 12:05:01,262:DEBUG:stack []
2020-06-11 12:05:01,262:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=252)
2020-06-11 12:05:01,262:DEBUG:stack ['$distx_12.0']
2020-06-11 12:05:01,262:DEBUG:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=252)
2020-06-11 12:05:01,262:DEBUG:stack ['$distx_12.0', '$exp_distx_2_14.1']
2020-06-11 12:05:01,262:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=252)
2020-06-11 12:05:01,262:DEBUG:stack ['$6binary_subtract.2']
2020-06-11 12:05:01,262:DEBUG:end state. edges=[]
2020-06-11 12:05:01,263:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:01,263:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:01,263:DEBUG:defmap: {}
2020-06-11 12:05:01,263:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,263:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:01,263:DEBUG:keep phismap: {}
2020-06-11 12:05:01,263:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:01,263:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:01,263:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$distx_12.0'}), (4, {'res': '$exp_distx_2_14.1'}), (6, {'lhs': '$distx_12.0', 'rhs': '$exp_distx_2_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:01,263:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,265:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:01,265:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,265:DEBUG:================================================================================
2020-06-11 12:05:01,265:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:01,265:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6f30810>
2020-06-11 12:05:01,265:DEBUG:on stmt: distx_1 = arg(0, name=distx_1)
2020-06-11 12:05:01,265:DEBUG:on stmt: exp_distx_2_1 = arg(1, name=exp_distx_2_1)
2020-06-11 12:05:01,265:DEBUG:on stmt: $6binary_subtract.2 = distx_1 - exp_distx_2_1
2020-06-11 12:05:01,265:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2020-06-11 12:05:01,265:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:05:01,265:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f01c6f34610>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f01c6f34750>],
             'distx_1': [<numba.core.ir.Assign object at 0x7f01c6f34310>],
             'exp_distx_2_1': [<numba.core.ir.Assign object at 0x7f01c6f34390>]})
2020-06-11 12:05:01,265:DEBUG:SSA violators set()
2020-06-11 12:05:01,265:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:01,266:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:05:01,266:DEBUG:================================================================================
2020-06-11 12:05:02,143:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3130)
           2	LOAD_FAST(arg=0, lineno=3130)
           4	LOAD_ATTR(arg=0, lineno=3130)
           6	RETURN_VALUE(arg=None, lineno=3130)
2020-06-11 12:05:02,143:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:02,144:DEBUG:stack: []
2020-06-11 12:05:02,144:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3130)
2020-06-11 12:05:02,144:DEBUG:stack []
2020-06-11 12:05:02,144:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3130)
2020-06-11 12:05:02,144:DEBUG:stack []
2020-06-11 12:05:02,144:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3130)
2020-06-11 12:05:02,144:DEBUG:stack ['$a2.0']
2020-06-11 12:05:02,144:DEBUG:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3130)
2020-06-11 12:05:02,144:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:05:02,144:DEBUG:end state. edges=[]
2020-06-11 12:05:02,144:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:02,144:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:02,144:DEBUG:defmap: {}
2020-06-11 12:05:02,144:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,144:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,144:DEBUG:keep phismap: {}
2020-06-11 12:05:02,144:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:02,145:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:02,145:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:02,145:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:05:02,147:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:02,147:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:05:02,147:DEBUG:================================================================================
2020-06-11 12:05:02,147:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:02,147:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6cf9e90>
2020-06-11 12:05:02,147:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:05:02,147:DEBUG:on stmt: $4load_attr.1 = getattr(value=a, attr=real)
2020-06-11 12:05:02,147:DEBUG:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
2020-06-11 12:05:02,147:DEBUG:on stmt: return $6return_value.2
2020-06-11 12:05:02,147:DEBUG:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01cd40c390>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x7f01cd40c690>],
             'a': [<numba.core.ir.Assign object at 0x7f01cd5aa350>]})
2020-06-11 12:05:02,147:DEBUG:SSA violators set()
2020-06-11 12:05:02,147:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:02,147:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:05:02,148:DEBUG:================================================================================
2020-06-11 12:05:02,183:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=263)
           6	LOAD_FAST(arg=0, lineno=267)
           8	CALL_FUNCTION(arg=2, lineno=267)
          10	RETURN_VALUE(arg=None, lineno=267)
2020-06-11 12:05:02,183:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:02,183:DEBUG:stack: []
2020-06-11 12:05:02,183:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:05:02,183:DEBUG:stack []
2020-06-11 12:05:02,183:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:05:02,183:DEBUG:stack []
2020-06-11 12:05:02,183:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=263)
2020-06-11 12:05:02,183:DEBUG:stack ['$2load_global.0']
2020-06-11 12:05:02,183:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=267)
2020-06-11 12:05:02,183:DEBUG:stack ['$2load_global.0', '$cent_distx_14.1']
2020-06-11 12:05:02,184:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=267)
2020-06-11 12:05:02,184:DEBUG:stack ['$2load_global.0', '$cent_distx_14.1', '$_34load_attr_14_16.2']
2020-06-11 12:05:02,184:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=267)
2020-06-11 12:05:02,184:DEBUG:stack ['$8call_function.3']
2020-06-11 12:05:02,184:DEBUG:end state. edges=[]
2020-06-11 12:05:02,184:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:02,184:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:02,184:DEBUG:defmap: {}
2020-06-11 12:05:02,184:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,184:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,184:DEBUG:keep phismap: {}
2020-06-11 12:05:02,184:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:02,184:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:02,184:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_distx_14.1'}), (6, {'res': '$_34load_attr_14_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_distx_14.1', '$_34load_attr_14_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:02,186:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,188:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:02,188:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,188:DEBUG:================================================================================
2020-06-11 12:05:02,188:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:02,188:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6c78e90>
2020-06-11 12:05:02,188:DEBUG:on stmt: _34load_attr_14_1 = arg(0, name=_34load_attr_14_1)
2020-06-11 12:05:02,188:DEBUG:on stmt: cent_distx_1 = arg(1, name=cent_distx_1)
2020-06-11 12:05:02,188:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>)
2020-06-11 12:05:02,188:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:05:02,188:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:05:02,188:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:05:02,188:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01cd3da790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c6ce6790>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01cd32fad0>],
             '_34load_attr_14_1': [<numba.core.ir.Assign object at 0x7f01c6c80a50>],
             'cent_distx_1': [<numba.core.ir.Assign object at 0x7f01c6c78790>]})
2020-06-11 12:05:02,188:DEBUG:SSA violators set()
2020-06-11 12:05:02,188:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:02,188:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,188:DEBUG:================================================================================
2020-06-11 12:05:02,204:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=166)
           2	LOAD_DEREF(arg=0, lineno=166)
           4	STORE_FAST(arg=1, lineno=166)
           6	SETUP_LOOP(arg=30, lineno=167)
           8	LOAD_GLOBAL(arg=0, lineno=167)
          10	LOAD_METHOD(arg=1, lineno=167)
          12	LOAD_FAST(arg=0, lineno=167)
          14	CALL_METHOD(arg=1, lineno=167)
          16	GET_ITER(arg=None, lineno=167)
>         18	FOR_ITER(arg=16, lineno=167)
          20	STORE_FAST(arg=2, lineno=167)
          22	LOAD_FAST(arg=1, lineno=168)
          24	LOAD_FAST(arg=2, lineno=168)
          26	LOAD_METHOD(arg=2, lineno=168)
          28	CALL_METHOD(arg=0, lineno=168)
          30	INPLACE_ADD(arg=None, lineno=168)
          32	STORE_FAST(arg=1, lineno=168)
          34	JUMP_ABSOLUTE(arg=18, lineno=168)
>         36	POP_BLOCK(arg=None, lineno=168)
>         38	LOAD_FAST(arg=1, lineno=169)
          40	RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:05:02,204:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:02,204:DEBUG:stack: []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=166)
2020-06-11 12:05:02,204:DEBUG:stack []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=166)
2020-06-11 12:05:02,204:DEBUG:stack []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=166)
2020-06-11 12:05:02,204:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:05:02,204:DEBUG:end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:02,204:DEBUG:pending: deque([State(pc_initial=6 nstack_initial=0)])
2020-06-11 12:05:02,204:DEBUG:stack: []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=167)
2020-06-11 12:05:02,204:DEBUG:stack []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=167)
2020-06-11 12:05:02,204:DEBUG:stack []
2020-06-11 12:05:02,204:DEBUG:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=167)
2020-06-11 12:05:02,204:DEBUG:stack ['$8load_global.0']
2020-06-11 12:05:02,204:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=167)
2020-06-11 12:05:02,204:DEBUG:stack ['$10load_method.1']
2020-06-11 12:05:02,205:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=167)
2020-06-11 12:05:02,205:DEBUG:stack ['$10load_method.1', '$arr12.2']
2020-06-11 12:05:02,205:DEBUG:dispatch pc=16, inst=GET_ITER(arg=None, lineno=167)
2020-06-11 12:05:02,205:DEBUG:stack ['$14call_method.3']
2020-06-11 12:05:02,205:DEBUG:end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:02,205:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:02,205:DEBUG:stack: ['$phi18.0']
2020-06-11 12:05:02,205:DEBUG:dispatch pc=18, inst=FOR_ITER(arg=16, lineno=167)
2020-06-11 12:05:02,205:DEBUG:stack ['$phi18.0']
2020-06-11 12:05:02,205:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:02,205:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2020-06-11 12:05:02,205:DEBUG:stack: []
2020-06-11 12:05:02,205:DEBUG:dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=168)
2020-06-11 12:05:02,205:DEBUG:stack []
2020-06-11 12:05:02,205:DEBUG:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
2020-06-11 12:05:02,205:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
2020-06-11 12:05:02,205:DEBUG:stack: ['$phi20.0', '$phi20.1']
2020-06-11 12:05:02,205:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=167)
2020-06-11 12:05:02,205:DEBUG:stack ['$phi20.0', '$phi20.1']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0', '$c22.2']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0', '$c22.2', '$v24.3']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0', '$c22.2', '$26load_method.4']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0', '$c22.2', '$28call_method.5']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=1, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0', '$30inplace_add.6']
2020-06-11 12:05:02,206:DEBUG:dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=168)
2020-06-11 12:05:02,206:DEBUG:stack ['$phi20.0']
2020-06-11 12:05:02,206:DEBUG:end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:05:02,206:DEBUG:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:02,206:DEBUG:stack: []
2020-06-11 12:05:02,206:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=169)
2020-06-11 12:05:02,206:DEBUG:stack []
2020-06-11 12:05:02,206:DEBUG:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:05:02,206:DEBUG:stack ['$c38.0']
2020-06-11 12:05:02,206:DEBUG:end state. edges=[]
2020-06-11 12:05:02,207:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:05:02,207:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:02,207:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
2020-06-11 12:05:02,207:DEBUG:defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2020-06-11 12:05:02,207:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:02,207:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:02,207:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:02,207:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:05:02,208:DEBUG:keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2020-06-11 12:05:02,208:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2020-06-11 12:05:02,208:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
2020-06-11 12:05:02,208:DEBUG:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'retval': '$c38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:02,209:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:02,214:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:02,214:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:02,214:DEBUG:================================================================================
2020-06-11 12:05:02,214:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:02,214:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,214:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:02,214:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:02,214:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:02,214:DEBUG:on stmt: jump 6
2020-06-11 12:05:02,214:DEBUG:==== SSA block analysis pass on 6
2020-06-11 12:05:02,214:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,214:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:02,214:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:02,214:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:02,215:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:02,215:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:02,215:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,215:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:05:02,215:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,215:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:02,215:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:02,215:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:02,215:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:02,215:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:02,215:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:05:02,215:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,215:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:02,215:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:02,215:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:02,215:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:02,215:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:05:02,215:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,215:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:05:02,215:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,215:DEBUG:on stmt: jump 38
2020-06-11 12:05:02,215:DEBUG:==== SSA block analysis pass on 38
2020-06-11 12:05:02,215:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,215:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:02,215:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:02,216:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x7f01c6d53190>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x7f01c6d591d0>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x7f01c6d592d0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7f01c6d59510>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7f01c6d595d0>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7f01c6d59690>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x7f01c6d59b90>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x7f01c6d59c90>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f01c6d53550>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x7f01c6d59d90>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7f01c6d52150>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x7f01c6d53ad0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7f01c6d59310>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7f01c6d59710>],
             'arr': [<numba.core.ir.Assign object at 0x7f01c6d53d90>],
             'c': [<numba.core.ir.Assign object at 0x7f01c6d53590>,
                   <numba.core.ir.Assign object at 0x7f01c6d59890>],
             'v': [<numba.core.ir.Assign object at 0x7f01c6d598d0>]})
2020-06-11 12:05:02,216:DEBUG:SSA violators {'c'}
2020-06-11 12:05:02,216:DEBUG:Fix SSA violator on var c
2020-06-11 12:05:02,216:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:02,216:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,216:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:02,216:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:02,216:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:02,216:DEBUG:first assign: c
2020-06-11 12:05:02,216:DEBUG:replaced with: c = $2load_deref.0
2020-06-11 12:05:02,216:DEBUG:on stmt: jump 6
2020-06-11 12:05:02,216:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:05:02,216:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,216:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:02,216:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:02,216:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:02,216:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:02,216:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:02,216:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,216:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:05:02,217:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,217:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:02,217:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:02,217:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:02,217:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:02,217:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:02,217:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:05:02,217:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,217:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:02,217:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:02,217:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:02,217:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:02,217:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:05:02,217:DEBUG:replaced with: c.1 = $30inplace_add.6
2020-06-11 12:05:02,217:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,217:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:02,217:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,217:DEBUG:on stmt: jump 38
2020-06-11 12:05:02,217:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:05:02,217:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7f01c6ce2c10>
2020-06-11 12:05:02,217:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:02,217:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:02,217:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01c6d52290>],
             20: [<numba.core.ir.Assign object at 0x7f01c6d450d0>]})
2020-06-11 12:05:02,218:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:05:02,218:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,218:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:05:02,218:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:05:02,218:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:05:02,218:DEBUG:on stmt: jump 6
2020-06-11 12:05:02,218:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:05:02,218:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,218:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:05:02,218:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:05:02,218:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:05:02,218:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:05:02,218:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:05:02,218:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,218:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:05:02,218:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,218:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:05:02,218:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:05:02,218:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:05:02,218:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:05:02,218:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:05:02,218:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:05:02,219:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,219:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:05:02,219:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:05:02,219:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:05:02,219:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:02,219:DEBUG:find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:02,219:DEBUG:find_def_from_top label 20
2020-06-11 12:05:02,219:DEBUG:idom 18 from label 20
2020-06-11 12:05:02,219:DEBUG:find_def_from_bottom label 18
2020-06-11 12:05:02,219:DEBUG:find_def_from_top label 18
2020-06-11 12:05:02,219:DEBUG:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2020-06-11 12:05:02,219:DEBUG:find_def_from_bottom label 20
2020-06-11 12:05:02,219:DEBUG:incoming_def c.1 = $30inplace_add.6
2020-06-11 12:05:02,219:DEBUG:find_def_from_bottom label 6
2020-06-11 12:05:02,219:DEBUG:find_def_from_top label 6
2020-06-11 12:05:02,219:DEBUG:idom 0 from label 6
2020-06-11 12:05:02,219:DEBUG:find_def_from_bottom label 0
2020-06-11 12:05:02,219:DEBUG:incoming_def c = $2load_deref.0
2020-06-11 12:05:02,219:DEBUG:replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:05:02,219:DEBUG:on stmt: c.1 = $30inplace_add.6
2020-06-11 12:05:02,219:DEBUG:on stmt: jump 18
2020-06-11 12:05:02,219:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:05:02,219:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,219:DEBUG:on stmt: jump 38
2020-06-11 12:05:02,220:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:05:02,220:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7f01c6d45350>
2020-06-11 12:05:02,220:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:05:02,220:DEBUG:find_def var='c' stmt=$40return_value.1 = cast(value=c)
2020-06-11 12:05:02,220:DEBUG:find_def_from_top label 38
2020-06-11 12:05:02,220:DEBUG:idom 36 from label 38
2020-06-11 12:05:02,220:DEBUG:find_def_from_bottom label 36
2020-06-11 12:05:02,220:DEBUG:find_def_from_top label 36
2020-06-11 12:05:02,220:DEBUG:idom 18 from label 36
2020-06-11 12:05:02,220:DEBUG:find_def_from_bottom label 18
2020-06-11 12:05:02,220:DEBUG:replaced with: $40return_value.1 = cast(value=c.2)
2020-06-11 12:05:02,220:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:05:02,220:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:02,220:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    c.2 = phi(incoming_values=[Var(c.1, arraymath.py:168), Var(c, arraymath.py:166)], incoming_blocks=[20, 6]) ['c', 'c.1', 'c.2']
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c.2']
    c.1 = $30inplace_add.6                   ['$30inplace_add.6', 'c.1']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c.2)      ['$40return_value.1', 'c.2']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:05:02,220:DEBUG:================================================================================
2020-06-11 12:05:02,272:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=263)
           6	LOAD_FAST(arg=0, lineno=268)
           8	CALL_FUNCTION(arg=2, lineno=268)
          10	RETURN_VALUE(arg=None, lineno=268)
2020-06-11 12:05:02,272:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:02,272:DEBUG:stack: []
2020-06-11 12:05:02,272:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:05:02,272:DEBUG:stack []
2020-06-11 12:05:02,272:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:05:02,272:DEBUG:stack []
2020-06-11 12:05:02,273:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=263)
2020-06-11 12:05:02,273:DEBUG:stack ['$2load_global.0']
2020-06-11 12:05:02,273:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=268)
2020-06-11 12:05:02,273:DEBUG:stack ['$2load_global.0', '$cent_distx_24.1']
2020-06-11 12:05:02,273:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=268)
2020-06-11 12:05:02,273:DEBUG:stack ['$2load_global.0', '$cent_distx_24.1', '$_54load_attr_23_16.2']
2020-06-11 12:05:02,273:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=268)
2020-06-11 12:05:02,273:DEBUG:stack ['$8call_function.3']
2020-06-11 12:05:02,273:DEBUG:end state. edges=[]
2020-06-11 12:05:02,273:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:02,273:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:02,273:DEBUG:defmap: {}
2020-06-11 12:05:02,273:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,273:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,273:DEBUG:keep phismap: {}
2020-06-11 12:05:02,273:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:02,273:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:02,273:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_distx_24.1'}), (6, {'res': '$_54load_attr_23_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_distx_24.1', '$_54load_attr_23_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:02,274:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,275:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:02,275:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,275:DEBUG:================================================================================
2020-06-11 12:05:02,276:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:02,276:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6bb7410>
2020-06-11 12:05:02,276:DEBUG:on stmt: _54load_attr_23_1 = arg(0, name=_54load_attr_23_1)
2020-06-11 12:05:02,276:DEBUG:on stmt: cent_distx_2 = arg(1, name=cent_distx_2)
2020-06-11 12:05:02,276:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>)
2020-06-11 12:05:02,276:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:05:02,276:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:05:02,276:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:05:02,276:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c6bb7610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c6bb7190>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c6bb7710>],
             '_54load_attr_23_1': [<numba.core.ir.Assign object at 0x7f01c6bb7dd0>],
             'cent_distx_2': [<numba.core.ir.Assign object at 0x7f01c6bb7ad0>]})
2020-06-11 12:05:02,276:DEBUG:SSA violators set()
2020-06-11 12:05:02,276:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:02,276:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,276:DEBUG:================================================================================
2020-06-11 12:05:02,295:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=264)
           6	LOAD_FAST(arg=0, lineno=269)
           8	CALL_FUNCTION(arg=2, lineno=269)
          10	RETURN_VALUE(arg=None, lineno=269)
2020-06-11 12:05:02,295:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:05:02,295:DEBUG:stack: []
2020-06-11 12:05:02,295:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:05:02,295:DEBUG:stack []
2020-06-11 12:05:02,295:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:05:02,295:DEBUG:stack []
2020-06-11 12:05:02,296:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=264)
2020-06-11 12:05:02,296:DEBUG:stack ['$2load_global.0']
2020-06-11 12:05:02,296:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=269)
2020-06-11 12:05:02,296:DEBUG:stack ['$2load_global.0', '$cent_disty_14.1']
2020-06-11 12:05:02,296:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=269)
2020-06-11 12:05:02,296:DEBUG:stack ['$2load_global.0', '$cent_disty_14.1', '$_74load_attr_32_16.2']
2020-06-11 12:05:02,296:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=269)
2020-06-11 12:05:02,296:DEBUG:stack ['$8call_function.3']
2020-06-11 12:05:02,296:DEBUG:end state. edges=[]
2020-06-11 12:05:02,296:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:05:02,296:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:05:02,296:DEBUG:defmap: {}
2020-06-11 12:05:02,296:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,296:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:05:02,296:DEBUG:keep phismap: {}
2020-06-11 12:05:02,296:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:05:02,296:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:05:02,296:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_disty_14.1'}), (6, {'res': '$_74load_attr_32_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_disty_14.1', '$_74load_attr_32_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:05:02,297:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,298:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:05:02,299:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,299:DEBUG:================================================================================
2020-06-11 12:05:02,299:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:05:02,299:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7f01c6bb3890>
2020-06-11 12:05:02,299:DEBUG:on stmt: _74load_attr_32_1 = arg(0, name=_74load_attr_32_1)
2020-06-11 12:05:02,299:DEBUG:on stmt: cent_disty_1 = arg(1, name=cent_disty_1)
2020-06-11 12:05:02,299:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>)
2020-06-11 12:05:02,299:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:05:02,299:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:05:02,299:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:05:02,299:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f01c6bb35d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01c6bb3250>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f01c6bb3510>],
             '_74load_attr_32_1': [<numba.core.ir.Assign object at 0x7f01c6baffd0>],
             'cent_disty_1': [<numba.core.ir.Assign object at 0x7f01c6bb30d0>]})
2020-06-11 12:05:02,299:DEBUG:SSA violators set()
2020-06-11 12:05:02,299:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:05:02,299:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f0258bd145: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:05:02,299:DEBUG:================================================================================
2020-06-11 12:07:01,647:INFO:NEW RUN: DCORR 2sample, 10000 permutations, fast=False
2020-06-11 12:07:02,137:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=263)
           2	LOAD_GLOBAL(arg=0, lineno=263)
           4	LOAD_FAST(arg=0, lineno=263)
           6	LOAD_FAST(arg=2, lineno=263)
           8	CALL_FUNCTION(arg=2, lineno=263)
          10	STORE_FAST(arg=3, lineno=263)
          12	LOAD_GLOBAL(arg=0, lineno=264)
          14	LOAD_FAST(arg=1, lineno=264)
          16	LOAD_FAST(arg=2, lineno=264)
          18	CALL_FUNCTION(arg=2, lineno=264)
          20	STORE_FAST(arg=4, lineno=264)
          22	LOAD_GLOBAL(arg=1, lineno=267)
          24	LOAD_METHOD(arg=2, lineno=267)
          26	LOAD_GLOBAL(arg=1, lineno=267)
          28	LOAD_METHOD(arg=3, lineno=267)
          30	LOAD_FAST(arg=3, lineno=267)
          32	LOAD_FAST(arg=4, lineno=267)
          34	LOAD_ATTR(arg=4, lineno=267)
          36	CALL_METHOD(arg=2, lineno=267)
          38	CALL_METHOD(arg=1, lineno=267)
          40	STORE_FAST(arg=5, lineno=267)
          42	LOAD_GLOBAL(arg=1, lineno=268)
          44	LOAD_METHOD(arg=2, lineno=268)
          46	LOAD_GLOBAL(arg=1, lineno=268)
          48	LOAD_METHOD(arg=3, lineno=268)
          50	LOAD_FAST(arg=3, lineno=268)
          52	LOAD_FAST(arg=3, lineno=268)
          54	LOAD_ATTR(arg=4, lineno=268)
          56	CALL_METHOD(arg=2, lineno=268)
          58	CALL_METHOD(arg=1, lineno=268)
          60	STORE_FAST(arg=6, lineno=268)
          62	LOAD_GLOBAL(arg=1, lineno=269)
          64	LOAD_METHOD(arg=2, lineno=269)
          66	LOAD_GLOBAL(arg=1, lineno=269)
          68	LOAD_METHOD(arg=3, lineno=269)
          70	LOAD_FAST(arg=4, lineno=269)
          72	LOAD_FAST(arg=4, lineno=269)
          74	LOAD_ATTR(arg=4, lineno=269)
          76	CALL_METHOD(arg=2, lineno=269)
          78	CALL_METHOD(arg=1, lineno=269)
          80	STORE_FAST(arg=7, lineno=269)
          82	LOAD_FAST(arg=6, lineno=272)
          84	LOAD_CONST(arg=1, lineno=272)
          86	COMPARE_OP(arg=1, lineno=272)
          88	POP_JUMP_IF_TRUE(arg=98, lineno=272)
          90	LOAD_FAST(arg=7, lineno=272)
          92	LOAD_CONST(arg=1, lineno=272)
          94	COMPARE_OP(arg=1, lineno=272)
          96	POP_JUMP_IF_FALSE(arg=104, lineno=272)
>         98	LOAD_CONST(arg=1, lineno=273)
         100	STORE_FAST(arg=8, lineno=273)
         102	JUMP_FORWARD(arg=24, lineno=273)
>        104	LOAD_FAST(arg=5, lineno=277)
         106	LOAD_GLOBAL(arg=1, lineno=277)
         108	LOAD_METHOD(arg=5, lineno=277)
         110	LOAD_GLOBAL(arg=1, lineno=277)
         112	LOAD_METHOD(arg=6, lineno=277)
         114	LOAD_FAST(arg=6, lineno=277)
         116	LOAD_FAST(arg=7, lineno=277)
         118	BINARY_MULTIPLY(arg=None, lineno=277)
         120	CALL_METHOD(arg=1, lineno=277)
         122	CALL_METHOD(arg=1, lineno=277)
         124	BINARY_TRUE_DIVIDE(arg=None, lineno=277)
         126	STORE_FAST(arg=8, lineno=277)
>        128	LOAD_FAST(arg=8, lineno=279)
         130	RETURN_VALUE(arg=None, lineno=279)
2020-06-11 12:07:02,137:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,137:DEBUG:stack: []
2020-06-11 12:07:02,137:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack []
2020-06-11 12:07:02,137:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack []
2020-06-11 12:07:02,137:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,137:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack ['$2load_global.0', '$distx4.1']
2020-06-11 12:07:02,137:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack ['$2load_global.0', '$distx4.1', '$bias6.2']
2020-06-11 12:07:02,137:DEBUG:dispatch pc=10, inst=STORE_FAST(arg=3, lineno=263)
2020-06-11 12:07:02,137:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=264)
2020-06-11 12:07:02,138:DEBUG:stack []
2020-06-11 12:07:02,138:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=264)
2020-06-11 12:07:02,138:DEBUG:stack ['$12load_global.4']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=264)
2020-06-11 12:07:02,138:DEBUG:stack ['$12load_global.4', '$disty14.5']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=18, inst=CALL_FUNCTION(arg=2, lineno=264)
2020-06-11 12:07:02,138:DEBUG:stack ['$12load_global.4', '$disty14.5', '$bias16.6']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=4, lineno=264)
2020-06-11 12:07:02,138:DEBUG:stack ['$18call_function.7']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack []
2020-06-11 12:07:02,138:DEBUG:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$22load_global.8']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$24load_method.9']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$24load_method.9', '$26load_global.10']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$24load_method.9', '$28load_method.11']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12']
2020-06-11 12:07:02,138:DEBUG:dispatch pc=34, inst=LOAD_ATTR(arg=4, lineno=267)
2020-06-11 12:07:02,138:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12', '$cent_disty32.13']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=36, inst=CALL_METHOD(arg=2, lineno=267)
2020-06-11 12:07:02,139:DEBUG:stack ['$24load_method.9', '$28load_method.11', '$cent_distx30.12', '$34load_attr.14']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=267)
2020-06-11 12:07:02,139:DEBUG:stack ['$24load_method.9', '$36call_method.15']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=40, inst=STORE_FAST(arg=5, lineno=267)
2020-06-11 12:07:02,139:DEBUG:stack ['$38call_method.16']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=42, inst=LOAD_GLOBAL(arg=1, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack []
2020-06-11 12:07:02,139:DEBUG:dispatch pc=44, inst=LOAD_METHOD(arg=2, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$42load_global.17']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=48, inst=LOAD_METHOD(arg=3, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18', '$46load_global.19']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18', '$48load_method.20']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=54, inst=LOAD_ATTR(arg=4, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21', '$cent_distx52.22']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=268)
2020-06-11 12:07:02,139:DEBUG:stack ['$44load_method.18', '$48load_method.20', '$cent_distx50.21', '$54load_attr.23']
2020-06-11 12:07:02,139:DEBUG:dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=268)
2020-06-11 12:07:02,140:DEBUG:stack ['$44load_method.18', '$56call_method.24']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=6, lineno=268)
2020-06-11 12:07:02,140:DEBUG:stack ['$58call_method.25']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=62, inst=LOAD_GLOBAL(arg=1, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack []
2020-06-11 12:07:02,140:DEBUG:dispatch pc=64, inst=LOAD_METHOD(arg=2, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$62load_global.26']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=68, inst=LOAD_METHOD(arg=3, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$66load_global.28']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$68load_method.29']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=74, inst=LOAD_ATTR(arg=4, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30', '$cent_disty72.31']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$68load_method.29', '$cent_disty70.30', '$74load_attr.32']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$64load_method.27', '$76call_method.33']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=80, inst=STORE_FAST(arg=7, lineno=269)
2020-06-11 12:07:02,140:DEBUG:stack ['$78call_method.34']
2020-06-11 12:07:02,140:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=6, lineno=272)
2020-06-11 12:07:02,140:DEBUG:stack []
2020-06-11 12:07:02,140:DEBUG:dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$varx82.35']
2020-06-11 12:07:02,141:DEBUG:dispatch pc=86, inst=COMPARE_OP(arg=1, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$varx82.35', '$const84.36']
2020-06-11 12:07:02,141:DEBUG:dispatch pc=88, inst=POP_JUMP_IF_TRUE(arg=98, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$86compare_op.37']
2020-06-11 12:07:02,141:DEBUG:end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,141:DEBUG:pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2020-06-11 12:07:02,141:DEBUG:stack: []
2020-06-11 12:07:02,141:DEBUG:dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack []
2020-06-11 12:07:02,141:DEBUG:dispatch pc=92, inst=LOAD_CONST(arg=1, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$vary90.0']
2020-06-11 12:07:02,141:DEBUG:dispatch pc=94, inst=COMPARE_OP(arg=1, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$vary90.0', '$const92.1']
2020-06-11 12:07:02,141:DEBUG:dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=104, lineno=272)
2020-06-11 12:07:02,141:DEBUG:stack ['$94compare_op.2']
2020-06-11 12:07:02,141:DEBUG:end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=104, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,141:DEBUG:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,141:DEBUG:stack: []
2020-06-11 12:07:02,141:DEBUG:dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=273)
2020-06-11 12:07:02,141:DEBUG:stack []
2020-06-11 12:07:02,141:DEBUG:dispatch pc=100, inst=STORE_FAST(arg=8, lineno=273)
2020-06-11 12:07:02,141:DEBUG:stack ['$const98.0']
2020-06-11 12:07:02,141:DEBUG:dispatch pc=102, inst=JUMP_FORWARD(arg=24, lineno=273)
2020-06-11 12:07:02,141:DEBUG:stack []
2020-06-11 12:07:02,142:DEBUG:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,142:DEBUG:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:07:02,142:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:07:02,142:DEBUG:stack: []
2020-06-11 12:07:02,142:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=5, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack []
2020-06-11 12:07:02,142:DEBUG:dispatch pc=106, inst=LOAD_GLOBAL(arg=1, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=108, inst=LOAD_METHOD(arg=5, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$106load_global.1']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=110, inst=LOAD_GLOBAL(arg=1, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=112, inst=LOAD_METHOD(arg=6, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$110load_global.3']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=116, inst=LOAD_FAST(arg=7, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$varx114.5']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$varx114.5', '$vary116.6']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=120, inst=CALL_METHOD(arg=1, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$112load_method.4', '$118binary_multiply.7']
2020-06-11 12:07:02,142:DEBUG:dispatch pc=122, inst=CALL_METHOD(arg=1, lineno=277)
2020-06-11 12:07:02,142:DEBUG:stack ['$covar104.0', '$108load_method.2', '$120call_method.8']
2020-06-11 12:07:02,143:DEBUG:dispatch pc=124, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=277)
2020-06-11 12:07:02,143:DEBUG:stack ['$covar104.0', '$122call_method.9']
2020-06-11 12:07:02,143:DEBUG:dispatch pc=126, inst=STORE_FAST(arg=8, lineno=277)
2020-06-11 12:07:02,143:DEBUG:stack ['$124binary_true_divide.10']
2020-06-11 12:07:02,143:DEBUG:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,143:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:07:02,143:DEBUG:stack: []
2020-06-11 12:07:02,143:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=8, lineno=279)
2020-06-11 12:07:02,143:DEBUG:stack []
2020-06-11 12:07:02,143:DEBUG:dispatch pc=130, inst=RETURN_VALUE(arg=None, lineno=279)
2020-06-11 12:07:02,143:DEBUG:stack ['$stat128.0']
2020-06-11 12:07:02,143:DEBUG:end state. edges=[]
2020-06-11 12:07:02,143:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=0)])
2020-06-11 12:07:02,143:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,143:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set()})
2020-06-11 12:07:02,144:DEBUG:defmap: {}
2020-06-11 12:07:02,144:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,144:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,144:DEBUG:keep phismap: {}
2020-06-11 12:07:02,144:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,144:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,144:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$distx4.1'}), (6, {'res': '$bias6.2'}), (8, {'func': '$2load_global.0', 'args': ['$distx4.1', '$bias6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$disty14.5'}), (16, {'res': '$bias16.6'}), (18, {'func': '$12load_global.4', 'args': ['$disty14.5', '$bias16.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_method.11'}), (30, {'res': '$cent_distx30.12'}), (32, {'res': '$cent_disty32.13'}), (34, {'item': '$cent_disty32.13', 'res': '$34load_attr.14'}), (36, {'func': '$28load_method.11', 'args': ['$cent_distx30.12', '$34load_attr.14'], 'res': '$36call_method.15'}), (38, {'func': '$24load_method.9', 'args': ['$36call_method.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_method.18'}), (46, {'res': '$46load_global.19'}), (48, {'item': '$46load_global.19', 'res': '$48load_method.20'}), (50, {'res': '$cent_distx50.21'}), (52, {'res': '$cent_distx52.22'}), (54, {'item': '$cent_distx52.22', 'res': '$54load_attr.23'}), (56, {'func': '$48load_method.20', 'args': ['$cent_distx50.21', '$54load_attr.23'], 'res': '$56call_method.24'}), (58, {'func': '$44load_method.18', 'args': ['$56call_method.24'], 'res': '$58call_method.25'}), (60, {'value': '$58call_method.25'}), (62, {'res': '$62load_global.26'}), (64, {'item': '$62load_global.26', 'res': '$64load_method.27'}), (66, {'res': '$66load_global.28'}), (68, {'item': '$66load_global.28', 'res': '$68load_method.29'}), (70, {'res': '$cent_disty70.30'}), (72, {'res': '$cent_disty72.31'}), (74, {'item': '$cent_disty72.31', 'res': '$74load_attr.32'}), (76, {'func': '$68load_method.29', 'args': ['$cent_disty70.30', '$74load_attr.32'], 'res': '$76call_method.33'}), (78, {'func': '$64load_method.27', 'args': ['$76call_method.33'], 'res': '$78call_method.34'}), (80, {'value': '$78call_method.34'}), (82, {'res': '$varx82.35'}), (84, {'res': '$const84.36'}), (86, {'lhs': '$varx82.35', 'rhs': '$const84.36', 'res': '$86compare_op.37'}), (88, {'pred': '$86compare_op.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 98: ()})
2020-06-11 12:07:02,144:DEBUG:block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$vary90.0'}), (92, {'res': '$const92.1'}), (94, {'lhs': '$vary90.0', 'rhs': '$const92.1', 'res': '$94compare_op.2'}), (96, {'pred': '$94compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 104: ()})
2020-06-11 12:07:02,144:DEBUG:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
2020-06-11 12:07:02,144:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$covar104.0'}), (106, {'res': '$106load_global.1'}), (108, {'item': '$106load_global.1', 'res': '$108load_method.2'}), (110, {'res': '$110load_global.3'}), (112, {'item': '$110load_global.3', 'res': '$112load_method.4'}), (114, {'res': '$varx114.5'}), (116, {'res': '$vary116.6'}), (118, {'lhs': '$varx114.5', 'rhs': '$vary116.6', 'res': '$118binary_multiply.7'}), (120, {'func': '$112load_method.4', 'args': ['$118binary_multiply.7'], 'res': '$120call_method.8'}), (122, {'func': '$108load_method.2', 'args': ['$120call_method.8'], 'res': '$122call_method.9'}), (124, {'lhs': '$covar104.0', 'rhs': '$122call_method.9', 'res': '$124binary_true_divide.10'}), (126, {'value': '$124binary_true_divide.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
2020-06-11 12:07:02,144:DEBUG:block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$stat128.0'}), (130, {'retval': '$stat128.0', 'castval': '$130return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,146:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat = $124binary_true_divide.10         ['$124binary_true_divide.10', 'stat']
    jump 128                                 []
label 128:
    $130return_value.1 = cast(value=stat)    ['$130return_value.1', 'stat']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:07:02,153:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,154:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat = $124binary_true_divide.10         ['$124binary_true_divide.10', 'stat']
    jump 128                                 []
label 128:
    $130return_value.1 = cast(value=stat)    ['$130return_value.1', 'stat']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:07:02,154:DEBUG:================================================================================
2020-06-11 12:07:02,154:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,154:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4547485d0>
2020-06-11 12:07:02,154:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,154:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:07:02,154:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:07:02,154:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,154:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,154:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:07:02,154:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,154:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,154:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:07:02,154:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,154:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:07:02,154:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,154:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:07:02,154:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,155:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:07:02,155:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,155:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:07:02,155:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,155:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:07:02,155:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:07:02,155:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:07:02,155:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,155:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:07:02,155:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,155:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:07:02,155:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,155:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,155:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:07:02,155:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:07:02,155:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:07:02,155:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:07:02,156:DEBUG:==== SSA block analysis pass on 90
2020-06-11 12:07:02,156:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4547485d0>
2020-06-11 12:07:02,156:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:07:02,156:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:07:02,156:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:07:02,156:DEBUG:==== SSA block analysis pass on 98
2020-06-11 12:07:02,156:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4547485d0>
2020-06-11 12:07:02,156:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:07:02,156:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:07:02,156:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,156:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:07:02,156:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4547485d0>
2020-06-11 12:07:02,156:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,156:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:07:02,156:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,156:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:07:02,156:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:07:02,156:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,156:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,156:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:07:02,156:DEBUG:on stmt: stat = $124binary_true_divide.10
2020-06-11 12:07:02,156:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,157:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:07:02,157:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4547485d0>
2020-06-11 12:07:02,157:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:07:02,157:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:07:02,157:DEBUG:defs defaultdict(<class 'list'>,
            {'$106load_global.1': [<numba.core.ir.Assign object at 0x7fc4546f6b50>],
             '$108load_method.2': [<numba.core.ir.Assign object at 0x7fc4546f6c10>],
             '$110load_global.3': [<numba.core.ir.Assign object at 0x7fc4546f6d10>],
             '$112load_method.4': [<numba.core.ir.Assign object at 0x7fc4546f6e10>],
             '$118binary_multiply.7': [<numba.core.ir.Assign object at 0x7fc4546fb110>],
             '$120call_method.8': [<numba.core.ir.Assign object at 0x7fc4546fb250>],
             '$122call_method.9': [<numba.core.ir.Assign object at 0x7fc4546fb310>],
             '$124binary_true_divide.10': [<numba.core.ir.Assign object at 0x7fc4546fb3d0>],
             '$12load_global.4': [<numba.core.ir.Assign object at 0x7fc4546ed450>],
             '$130return_value.1': [<numba.core.ir.Assign object at 0x7fc4546fb650>],
             '$18call_function.7': [<numba.core.ir.Assign object at 0x7fc4546ed6d0>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x7fc4546ed850>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x7fc4546ed990>],
             '$26load_global.10': [<numba.core.ir.Assign object at 0x7fc4546eda90>],
             '$28load_method.11': [<numba.core.ir.Assign object at 0x7fc4546edb90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc4546d3f10>],
             '$34load_attr.14': [<numba.core.ir.Assign object at 0x7fc4546ede50>],
             '$36call_method.15': [<numba.core.ir.Assign object at 0x7fc4546edfd0>],
             '$38call_method.16': [<numba.core.ir.Assign object at 0x7fc4546f1110>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x7fc4546f1290>],
             '$44load_method.18': [<numba.core.ir.Assign object at 0x7fc4546f1350>],
             '$46load_global.19': [<numba.core.ir.Assign object at 0x7fc4546f1450>],
             '$48load_method.20': [<numba.core.ir.Assign object at 0x7fc4546f1550>],
             '$54load_attr.23': [<numba.core.ir.Assign object at 0x7fc4546f1810>],
             '$56call_method.24': [<numba.core.ir.Assign object at 0x7fc4546f1950>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7fc4546f1a50>],
             '$62load_global.26': [<numba.core.ir.Assign object at 0x7fc4546f1bd0>],
             '$64load_method.27': [<numba.core.ir.Assign object at 0x7fc4546f1c90>],
             '$66load_global.28': [<numba.core.ir.Assign object at 0x7fc4546d3910>],
             '$68load_method.29': [<numba.core.ir.Assign object at 0x7fc4546d3050>],
             '$74load_attr.32': [<numba.core.ir.Assign object at 0x7fc4546f1e90>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x7fc4546f1fd0>],
             '$78call_method.34': [<numba.core.ir.Assign object at 0x7fc4546f6110>],
             '$86compare_op.37': [<numba.core.ir.Assign object at 0x7fc4546f64d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc4546ed290>],
             '$94compare_op.2': [<numba.core.ir.Assign object at 0x7fc4546f65d0>],
             '$const84.36': [<numba.core.ir.Assign object at 0x7fc4546f6390>],
             '$const92.1': [<numba.core.ir.Assign object at 0x7fc4546f62d0>],
             '$const98.0': [<numba.core.ir.Assign object at 0x7fc4546f6790>],
             'bias': [<numba.core.ir.Assign object at 0x7fc4546d3bd0>],
             'cent_distx': [<numba.core.ir.Assign object at 0x7fc4546ed350>],
             'cent_disty': [<numba.core.ir.Assign object at 0x7fc4546ed750>],
             'covar': [<numba.core.ir.Assign object at 0x7fc4546f1190>],
             'distx': [<numba.core.ir.Assign object at 0x7fc4546d3cd0>],
             'disty': [<numba.core.ir.Assign object at 0x7fc4546d3e90>],
             'stat': [<numba.core.ir.Assign object at 0x7fc4546f6850>,
                      <numba.core.ir.Assign object at 0x7fc4546f6810>],
             'varx': [<numba.core.ir.Assign object at 0x7fc4546f1ad0>],
             'vary': [<numba.core.ir.Assign object at 0x7fc4546f6190>]})
2020-06-11 12:07:02,157:DEBUG:SSA violators {'stat'}
2020-06-11 12:07:02,157:DEBUG:Fix SSA violator on var stat
2020-06-11 12:07:02,158:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,158:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4546fbad0>
2020-06-11 12:07:02,158:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,158:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:07:02,158:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:07:02,158:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,158:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,158:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:07:02,158:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,158:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,158:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:07:02,158:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,158:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:07:02,158:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,158:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:07:02,158:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,158:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,158:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,158:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:07:02,158:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,158:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:07:02,158:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,159:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:07:02,159:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:07:02,159:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,159:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,159:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:07:02,159:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,159:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:07:02,159:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,159:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:07:02,159:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,159:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,159:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,159:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:07:02,159:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:07:02,159:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:07:02,159:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:07:02,159:DEBUG:==== SSA block rewrite pass on 90
2020-06-11 12:07:02,159:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4546fbad0>
2020-06-11 12:07:02,159:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:07:02,159:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:07:02,159:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:07:02,159:DEBUG:==== SSA block rewrite pass on 98
2020-06-11 12:07:02,159:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4546fbad0>
2020-06-11 12:07:02,159:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:07:02,160:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:07:02,160:DEBUG:first assign: stat
2020-06-11 12:07:02,160:DEBUG:replaced with: stat = $const98.0
2020-06-11 12:07:02,160:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,160:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,160:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4546fbad0>
2020-06-11 12:07:02,160:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,160:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:07:02,160:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,160:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:07:02,160:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:07:02,160:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,160:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,160:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:07:02,160:DEBUG:on stmt: stat = $124binary_true_divide.10
2020-06-11 12:07:02,160:DEBUG:replaced with: stat.1 = $124binary_true_divide.10
2020-06-11 12:07:02,160:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,160:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:02,160:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4546fbad0>
2020-06-11 12:07:02,160:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:07:02,160:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:07:02,160:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {98: [<numba.core.ir.Assign object at 0x7fc4546fb510>],
             104: [<numba.core.ir.Assign object at 0x7fc4546fb910>]})
2020-06-11 12:07:02,161:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,161:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546fbe90>
2020-06-11 12:07:02,161:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,161:DEBUG:on stmt: disty = arg(1, name=disty)
2020-06-11 12:07:02,161:DEBUG:on stmt: bias = arg(2, name=bias)
2020-06-11 12:07:02,161:DEBUG:on stmt: $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,161:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,161:DEBUG:on stmt: cent_distx = $8call_function.3
2020-06-11 12:07:02,161:DEBUG:on stmt: $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>))
2020-06-11 12:07:02,161:DEBUG:on stmt: $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None)
2020-06-11 12:07:02,161:DEBUG:on stmt: cent_disty = $18call_function.7
2020-06-11 12:07:02,161:DEBUG:on stmt: $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,161:DEBUG:on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=sum)
2020-06-11 12:07:02,161:DEBUG:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,161:DEBUG:on stmt: $28load_method.11 = getattr(value=$26load_global.10, attr=multiply)
2020-06-11 12:07:02,161:DEBUG:on stmt: $34load_attr.14 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,161:DEBUG:on stmt: $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,161:DEBUG:on stmt: $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None)
2020-06-11 12:07:02,162:DEBUG:on stmt: covar = $38call_method.16
2020-06-11 12:07:02,162:DEBUG:on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,162:DEBUG:on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=sum)
2020-06-11 12:07:02,162:DEBUG:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,162:DEBUG:on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=multiply)
2020-06-11 12:07:02,162:DEBUG:on stmt: $54load_attr.23 = getattr(value=cent_distx, attr=T)
2020-06-11 12:07:02,162:DEBUG:on stmt: $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,162:DEBUG:on stmt: $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None)
2020-06-11 12:07:02,162:DEBUG:on stmt: varx = $58call_method.25
2020-06-11 12:07:02,162:DEBUG:on stmt: $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,162:DEBUG:on stmt: $64load_method.27 = getattr(value=$62load_global.26, attr=sum)
2020-06-11 12:07:02,162:DEBUG:on stmt: $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,162:DEBUG:on stmt: $68load_method.29 = getattr(value=$66load_global.28, attr=multiply)
2020-06-11 12:07:02,162:DEBUG:on stmt: $74load_attr.32 = getattr(value=cent_disty, attr=T)
2020-06-11 12:07:02,162:DEBUG:on stmt: $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,162:DEBUG:on stmt: $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None)
2020-06-11 12:07:02,162:DEBUG:on stmt: vary = $78call_method.34
2020-06-11 12:07:02,162:DEBUG:on stmt: $const84.36 = const(int, 0)
2020-06-11 12:07:02,162:DEBUG:on stmt: $86compare_op.37 = varx <= $const84.36
2020-06-11 12:07:02,162:DEBUG:on stmt: branch $86compare_op.37, 98, 90
2020-06-11 12:07:02,162:DEBUG:==== SSA block rewrite pass on 90
2020-06-11 12:07:02,162:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546fbe90>
2020-06-11 12:07:02,162:DEBUG:on stmt: $const92.1 = const(int, 0)
2020-06-11 12:07:02,163:DEBUG:on stmt: $94compare_op.2 = vary <= $const92.1
2020-06-11 12:07:02,163:DEBUG:on stmt: branch $94compare_op.2, 98, 104
2020-06-11 12:07:02,163:DEBUG:==== SSA block rewrite pass on 98
2020-06-11 12:07:02,163:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546fbe90>
2020-06-11 12:07:02,163:DEBUG:on stmt: $const98.0 = const(int, 0)
2020-06-11 12:07:02,163:DEBUG:on stmt: stat = $const98.0
2020-06-11 12:07:02,163:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,163:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,163:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546fbe90>
2020-06-11 12:07:02,163:DEBUG:on stmt: $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,163:DEBUG:on stmt: $108load_method.2 = getattr(value=$106load_global.1, attr=real)
2020-06-11 12:07:02,163:DEBUG:on stmt: $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,163:DEBUG:on stmt: $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt)
2020-06-11 12:07:02,163:DEBUG:on stmt: $118binary_multiply.7 = varx * vary
2020-06-11 12:07:02,163:DEBUG:on stmt: $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,163:DEBUG:on stmt: $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None)
2020-06-11 12:07:02,163:DEBUG:on stmt: $124binary_true_divide.10 = covar / $122call_method.9
2020-06-11 12:07:02,163:DEBUG:on stmt: stat.1 = $124binary_true_divide.10
2020-06-11 12:07:02,163:DEBUG:on stmt: jump 128
2020-06-11 12:07:02,163:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:02,163:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546fbe90>
2020-06-11 12:07:02,163:DEBUG:on stmt: $130return_value.1 = cast(value=stat)
2020-06-11 12:07:02,163:DEBUG:find_def var='stat' stmt=$130return_value.1 = cast(value=stat)
2020-06-11 12:07:02,164:DEBUG:find_def_from_top label 128
2020-06-11 12:07:02,164:DEBUG:insert phi node stat.2 = phi(incoming_values=[], incoming_blocks=[]) at 128
2020-06-11 12:07:02,164:DEBUG:find_def_from_bottom label 104
2020-06-11 12:07:02,164:DEBUG:incoming_def stat.1 = $124binary_true_divide.10
2020-06-11 12:07:02,164:DEBUG:find_def_from_bottom label 98
2020-06-11 12:07:02,164:DEBUG:incoming_def stat = $const98.0
2020-06-11 12:07:02,164:DEBUG:replaced with: $130return_value.1 = cast(value=stat.2)
2020-06-11 12:07:02,164:DEBUG:on stmt: return $130return_value.1
2020-06-11 12:07:02,164:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,165:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    disty = arg(1, name=disty)               ['disty']
    bias = arg(2, name=bias)                 ['bias']
    $2load_global.0 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(distx, bias, func=$2load_global.0, args=[Var(distx, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'bias', 'distx']
    cent_distx = $8call_function.3           ['$8call_function.3', 'cent_distx']
    $12load_global.4 = global(_center_distmat: CPUDispatcher(<function _center_distmat at 0x7fc45a23f560>)) ['$12load_global.4']
    $18call_function.7 = call $12load_global.4(disty, bias, func=$12load_global.4, args=[Var(disty, dcorr.py:263), Var(bias, dcorr.py:263)], kws=(), vararg=None) ['$12load_global.4', '$18call_function.7', 'bias', 'disty']
    cent_disty = $18call_function.7          ['$18call_function.7', 'cent_disty']
    $22load_global.8 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=sum) ['$22load_global.8', '$24load_method.9']
    $26load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_method.11 = getattr(value=$26load_global.10, attr=multiply) ['$26load_global.10', '$28load_method.11']
    $34load_attr.14 = getattr(value=cent_disty, attr=T) ['$34load_attr.14', 'cent_disty']
    $36call_method.15 = call $28load_method.11(cent_distx, $34load_attr.14, func=$28load_method.11, args=[Var(cent_distx, dcorr.py:263), Var($34load_attr.14, dcorr.py:267)], kws=(), vararg=None) ['$28load_method.11', '$34load_attr.14', '$36call_method.15', 'cent_distx']
    $38call_method.16 = call $24load_method.9($36call_method.15, func=$24load_method.9, args=[Var($36call_method.15, dcorr.py:267)], kws=(), vararg=None) ['$24load_method.9', '$36call_method.15', '$38call_method.16']
    covar = $38call_method.16                ['$38call_method.16', 'covar']
    $42load_global.17 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=sum) ['$42load_global.17', '$44load_method.18']
    $46load_global.19 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=multiply) ['$46load_global.19', '$48load_method.20']
    $54load_attr.23 = getattr(value=cent_distx, attr=T) ['$54load_attr.23', 'cent_distx']
    $56call_method.24 = call $48load_method.20(cent_distx, $54load_attr.23, func=$48load_method.20, args=[Var(cent_distx, dcorr.py:263), Var($54load_attr.23, dcorr.py:268)], kws=(), vararg=None) ['$48load_method.20', '$54load_attr.23', '$56call_method.24', 'cent_distx']
    $58call_method.25 = call $44load_method.18($56call_method.24, func=$44load_method.18, args=[Var($56call_method.24, dcorr.py:268)], kws=(), vararg=None) ['$44load_method.18', '$56call_method.24', '$58call_method.25']
    varx = $58call_method.25                 ['$58call_method.25', 'varx']
    $62load_global.26 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$62load_global.26']
    $64load_method.27 = getattr(value=$62load_global.26, attr=sum) ['$62load_global.26', '$64load_method.27']
    $66load_global.28 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$66load_global.28']
    $68load_method.29 = getattr(value=$66load_global.28, attr=multiply) ['$66load_global.28', '$68load_method.29']
    $74load_attr.32 = getattr(value=cent_disty, attr=T) ['$74load_attr.32', 'cent_disty']
    $76call_method.33 = call $68load_method.29(cent_disty, $74load_attr.32, func=$68load_method.29, args=[Var(cent_disty, dcorr.py:264), Var($74load_attr.32, dcorr.py:269)], kws=(), vararg=None) ['$68load_method.29', '$74load_attr.32', '$76call_method.33', 'cent_disty']
    $78call_method.34 = call $64load_method.27($76call_method.33, func=$64load_method.27, args=[Var($76call_method.33, dcorr.py:269)], kws=(), vararg=None) ['$64load_method.27', '$76call_method.33', '$78call_method.34']
    vary = $78call_method.34                 ['$78call_method.34', 'vary']
    $const84.36 = const(int, 0)              ['$const84.36']
    $86compare_op.37 = varx <= $const84.36   ['$86compare_op.37', '$const84.36', 'varx']
    branch $86compare_op.37, 98, 90          ['$86compare_op.37']
label 90:
    $const92.1 = const(int, 0)               ['$const92.1']
    $94compare_op.2 = vary <= $const92.1     ['$94compare_op.2', '$const92.1', 'vary']
    branch $94compare_op.2, 98, 104          ['$94compare_op.2']
label 98:
    $const98.0 = const(int, 0)               ['$const98.0']
    stat = $const98.0                        ['$const98.0', 'stat']
    jump 128                                 []
label 104:
    $106load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$106load_global.1']
    $108load_method.2 = getattr(value=$106load_global.1, attr=real) ['$106load_global.1', '$108load_method.2']
    $110load_global.3 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$110load_global.3']
    $112load_method.4 = getattr(value=$110load_global.3, attr=sqrt) ['$110load_global.3', '$112load_method.4']
    $118binary_multiply.7 = varx * vary      ['$118binary_multiply.7', 'varx', 'vary']
    $120call_method.8 = call $112load_method.4($118binary_multiply.7, func=$112load_method.4, args=[Var($118binary_multiply.7, dcorr.py:277)], kws=(), vararg=None) ['$112load_method.4', '$118binary_multiply.7', '$120call_method.8']
    $122call_method.9 = call $108load_method.2($120call_method.8, func=$108load_method.2, args=[Var($120call_method.8, dcorr.py:277)], kws=(), vararg=None) ['$108load_method.2', '$120call_method.8', '$122call_method.9']
    $124binary_true_divide.10 = covar / $122call_method.9 ['$122call_method.9', '$124binary_true_divide.10', 'covar']
    stat.1 = $124binary_true_divide.10       ['$124binary_true_divide.10', 'stat.1']
    jump 128                                 []
label 128:
    stat.2 = phi(incoming_values=[Var(stat.1, dcorr.py:277), Var(stat, dcorr.py:273)], incoming_blocks=[104, 98]) ['stat', 'stat.1', 'stat.2']
    $130return_value.1 = cast(value=stat.2)  ['$130return_value.1', 'stat.2']
    return $130return_value.1                ['$130return_value.1']

2020-06-11 12:07:02,165:DEBUG:================================================================================
2020-06-11 12:07:02,169:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=236)
           2	LOAD_FAST(arg=0, lineno=236)
           4	LOAD_ATTR(arg=0, lineno=236)
           6	LOAD_CONST(arg=1, lineno=236)
           8	BINARY_SUBSCR(arg=None, lineno=236)
          10	STORE_FAST(arg=2, lineno=236)
          12	LOAD_FAST(arg=1, lineno=239)
          14	POP_JUMP_IF_FALSE(arg=100, lineno=239)
          16	LOAD_GLOBAL(arg=1, lineno=244)
          18	LOAD_METHOD(arg=2, lineno=244)
          20	LOAD_FAST(arg=0, lineno=244)
          22	LOAD_ATTR(arg=3, lineno=244)
          24	LOAD_CONST(arg=1, lineno=244)
          26	LOAD_CONST(arg=2, lineno=244)
          28	CALL_FUNCTION_KW(arg=1, lineno=244)
          30	LOAD_FAST(arg=2, lineno=244)
          32	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          34	LOAD_FAST(arg=2, lineno=244)
          36	CALL_METHOD(arg=2, lineno=244)
          38	LOAD_METHOD(arg=4, lineno=244)
          40	LOAD_CONST(arg=3, lineno=244)
          42	LOAD_FAST(arg=2, lineno=244)
          44	CALL_METHOD(arg=2, lineno=244)
          46	LOAD_ATTR(arg=5, lineno=244)
          48	LOAD_GLOBAL(arg=1, lineno=244)
          50	LOAD_METHOD(arg=2, lineno=244)
          52	LOAD_FAST(arg=0, lineno=244)
          54	LOAD_ATTR(arg=3, lineno=244)
          56	LOAD_CONST(arg=4, lineno=244)
          58	LOAD_CONST(arg=2, lineno=244)
          60	CALL_FUNCTION_KW(arg=1, lineno=244)
          62	LOAD_FAST(arg=2, lineno=244)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          66	LOAD_FAST(arg=2, lineno=244)
          68	CALL_METHOD(arg=2, lineno=244)
          70	LOAD_METHOD(arg=4, lineno=244)
          72	LOAD_CONST(arg=3, lineno=244)
          74	LOAD_FAST(arg=2, lineno=244)
          76	CALL_METHOD(arg=2, lineno=244)
          78	BINARY_ADD(arg=None, lineno=244)
          80	LOAD_FAST(arg=0, lineno=244)
          82	LOAD_METHOD(arg=3, lineno=244)
          84	CALL_METHOD(arg=0, lineno=244)
          86	LOAD_FAST(arg=2, lineno=244)
          88	LOAD_FAST(arg=2, lineno=244)
          90	BINARY_MULTIPLY(arg=None, lineno=244)
          92	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
          94	BINARY_SUBTRACT(arg=None, lineno=244)
          96	STORE_FAST(arg=3, lineno=244)
          98	JUMP_FORWARD(arg=98, lineno=244)
>        100	LOAD_GLOBAL(arg=1, lineno=250)
         102	LOAD_METHOD(arg=2, lineno=250)
         104	LOAD_FAST(arg=0, lineno=250)
         106	LOAD_ATTR(arg=3, lineno=250)
         108	LOAD_CONST(arg=1, lineno=250)
         110	LOAD_CONST(arg=2, lineno=250)
         112	CALL_FUNCTION_KW(arg=1, lineno=250)
         114	LOAD_FAST(arg=2, lineno=250)
         116	LOAD_CONST(arg=5, lineno=250)
         118	BINARY_SUBTRACT(arg=None, lineno=250)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         122	LOAD_FAST(arg=2, lineno=250)
         124	CALL_METHOD(arg=2, lineno=250)
         126	LOAD_METHOD(arg=4, lineno=250)
         128	LOAD_CONST(arg=3, lineno=250)
         130	LOAD_FAST(arg=2, lineno=250)
         132	CALL_METHOD(arg=2, lineno=250)
         134	LOAD_ATTR(arg=5, lineno=250)
         136	LOAD_GLOBAL(arg=1, lineno=250)
         138	LOAD_METHOD(arg=2, lineno=250)
         140	LOAD_FAST(arg=0, lineno=250)
         142	LOAD_ATTR(arg=3, lineno=250)
         144	LOAD_CONST(arg=4, lineno=250)
         146	LOAD_CONST(arg=2, lineno=250)
         148	CALL_FUNCTION_KW(arg=1, lineno=250)
         150	LOAD_FAST(arg=2, lineno=250)
         152	LOAD_CONST(arg=5, lineno=250)
         154	BINARY_SUBTRACT(arg=None, lineno=250)
         156	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         158	LOAD_FAST(arg=2, lineno=250)
         160	CALL_METHOD(arg=2, lineno=250)
         162	LOAD_METHOD(arg=4, lineno=250)
         164	LOAD_CONST(arg=3, lineno=250)
         166	LOAD_FAST(arg=2, lineno=250)
         168	CALL_METHOD(arg=2, lineno=250)
         170	BINARY_ADD(arg=None, lineno=250)
         172	LOAD_FAST(arg=0, lineno=250)
         174	LOAD_METHOD(arg=3, lineno=250)
         176	CALL_METHOD(arg=0, lineno=250)
         178	LOAD_FAST(arg=2, lineno=250)
         180	LOAD_CONST(arg=4, lineno=250)
         182	BINARY_SUBTRACT(arg=None, lineno=250)
         184	LOAD_FAST(arg=2, lineno=250)
         186	LOAD_CONST(arg=5, lineno=250)
         188	BINARY_SUBTRACT(arg=None, lineno=250)
         190	BINARY_MULTIPLY(arg=None, lineno=250)
         192	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
         194	BINARY_SUBTRACT(arg=None, lineno=250)
         196	STORE_FAST(arg=3, lineno=250)
>        198	LOAD_FAST(arg=0, lineno=252)
         200	LOAD_FAST(arg=3, lineno=252)
         202	BINARY_SUBTRACT(arg=None, lineno=252)
         204	STORE_FAST(arg=4, lineno=252)
         206	LOAD_FAST(arg=1, lineno=253)
         208	POP_JUMP_IF_TRUE(arg=222, lineno=253)
         210	LOAD_GLOBAL(arg=1, lineno=254)
         212	LOAD_METHOD(arg=6, lineno=254)
         214	LOAD_FAST(arg=4, lineno=254)
         216	LOAD_CONST(arg=1, lineno=254)
         218	CALL_METHOD(arg=2, lineno=254)
         220	POP_TOP(arg=None, lineno=254)
>        222	LOAD_FAST(arg=4, lineno=256)
         224	RETURN_VALUE(arg=None, lineno=256)
2020-06-11 12:07:02,169:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,169:DEBUG:stack: []
2020-06-11 12:07:02,169:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=236)
2020-06-11 12:07:02,169:DEBUG:stack []
2020-06-11 12:07:02,169:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=236)
2020-06-11 12:07:02,169:DEBUG:stack []
2020-06-11 12:07:02,169:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=236)
2020-06-11 12:07:02,169:DEBUG:stack ['$distx2.0']
2020-06-11 12:07:02,169:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=236)
2020-06-11 12:07:02,169:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:02,169:DEBUG:dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=236)
2020-06-11 12:07:02,169:DEBUG:stack ['$4load_attr.1', '$const6.2']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=10, inst=STORE_FAST(arg=2, lineno=236)
2020-06-11 12:07:02,170:DEBUG:stack ['$8binary_subscr.3']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:07:02,170:DEBUG:stack []
2020-06-11 12:07:02,170:DEBUG:dispatch pc=14, inst=POP_JUMP_IF_FALSE(arg=100, lineno=239)
2020-06-11 12:07:02,170:DEBUG:stack ['$bias12.4']
2020-06-11 12:07:02,170:DEBUG:end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=100, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,170:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
2020-06-11 12:07:02,170:DEBUG:stack: []
2020-06-11 12:07:02,170:DEBUG:dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack []
2020-06-11 12:07:02,170:DEBUG:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$16load_global.0']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$18load_method.1']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$18load_method.1', '$distx20.2']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$18load_method.1', '$22load_attr.3']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$18load_method.1', '$22load_attr.3', '$const24.4']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=28, inst=CALL_FUNCTION_KW(arg=1, lineno=244)
2020-06-11 12:07:02,170:DEBUG:stack ['$18load_method.1', '$22load_attr.3', '$const24.4', '$const26.5']
2020-06-11 12:07:02,170:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$18load_method.1', '$28call_function_kw.6']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=32, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$18load_method.1', '$28call_function_kw.6', '$n30.7']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$18load_method.1', '$32binary_true_divide.8']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=36, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$18load_method.1', '$32binary_true_divide.8', '$n34.9']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=38, inst=LOAD_METHOD(arg=4, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$36call_method.10']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=40, inst=LOAD_CONST(arg=3, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$38load_method.11']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$38load_method.11', '$const40.12']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=44, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$38load_method.11', '$const40.12', '$n42.13']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=46, inst=LOAD_ATTR(arg=5, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$44call_method.14']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$46load_attr.15']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$46load_attr.15', '$48load_global.16']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:02,171:DEBUG:stack ['$46load_attr.15', '$50load_method.17']
2020-06-11 12:07:02,171:DEBUG:dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$distx52.18']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=56, inst=LOAD_CONST(arg=4, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19', '$const56.20']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=60, inst=CALL_FUNCTION_KW(arg=1, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$54load_attr.19', '$const56.20', '$const58.21']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$60call_function_kw.22']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$60call_function_kw.22', '$n62.23']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$64binary_true_divide.24']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=68, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$50load_method.17', '$64binary_true_divide.24', '$n66.25']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$68call_method.26']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$70load_method.27']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$70load_method.27', '$const72.28']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$70load_method.27', '$const72.28', '$n74.29']
2020-06-11 12:07:02,172:DEBUG:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=244)
2020-06-11 12:07:02,172:DEBUG:stack ['$46load_attr.15', '$76call_method.30']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=82, inst=LOAD_METHOD(arg=3, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$distx80.32']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=84, inst=CALL_METHOD(arg=0, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$82load_method.33']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$84call_method.34']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$n86.35']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=90, inst=BINARY_MULTIPLY(arg=None, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$n86.35', '$n88.36']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=92, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$84call_method.34', '$90binary_multiply.37']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=94, inst=BINARY_SUBTRACT(arg=None, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$78binary_add.31', '$92binary_true_divide.38']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=96, inst=STORE_FAST(arg=3, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack ['$94binary_subtract.39']
2020-06-11 12:07:02,173:DEBUG:dispatch pc=98, inst=JUMP_FORWARD(arg=98, lineno=244)
2020-06-11 12:07:02,173:DEBUG:stack []
2020-06-11 12:07:02,173:DEBUG:end state. edges=[Edge(pc=198, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,173:DEBUG:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=198 nstack_initial=0)])
2020-06-11 12:07:02,173:DEBUG:stack: []
2020-06-11 12:07:02,174:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=1, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack []
2020-06-11 12:07:02,174:DEBUG:dispatch pc=102, inst=LOAD_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$100load_global.0']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=106, inst=LOAD_ATTR(arg=3, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$distx104.2']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=108, inst=LOAD_CONST(arg=1, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$106load_attr.3']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=2, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$106load_attr.3', '$const108.4']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=112, inst=CALL_FUNCTION_KW(arg=1, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$106load_attr.3', '$const108.4', '$const110.5']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=116, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$n114.7']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=118, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$n114.7', '$const116.8']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$112call_function_kw.6', '$118binary_subtract.9']
2020-06-11 12:07:02,174:DEBUG:dispatch pc=122, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,174:DEBUG:stack ['$102load_method.1', '$120binary_true_divide.10']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=124, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$102load_method.1', '$120binary_true_divide.10', '$n122.11']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=126, inst=LOAD_METHOD(arg=4, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$124call_method.12']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$126load_method.13']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$126load_method.13', '$const128.14']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=132, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$126load_method.13', '$const128.14', '$n130.15']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=134, inst=LOAD_ATTR(arg=5, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$132call_method.16']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=136, inst=LOAD_GLOBAL(arg=1, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=138, inst=LOAD_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17', '$136load_global.18']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=140, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17', '$138load_method.19']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=142, inst=LOAD_ATTR(arg=3, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$distx140.20']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=144, inst=LOAD_CONST(arg=4, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21']
2020-06-11 12:07:02,175:DEBUG:dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=250)
2020-06-11 12:07:02,175:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21', '$const144.22']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=148, inst=CALL_FUNCTION_KW(arg=1, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$142load_attr.21', '$const144.22', '$const146.23']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=152, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$n150.25']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=154, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$n150.25', '$const152.26']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=156, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$148call_function_kw.24', '$154binary_subtract.27']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=158, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$156binary_true_divide.28']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=160, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$138load_method.19', '$156binary_true_divide.28', '$n158.29']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=162, inst=LOAD_METHOD(arg=4, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$160call_method.30']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=164, inst=LOAD_CONST(arg=3, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$162load_method.31']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$162load_method.31', '$const164.32']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=168, inst=CALL_METHOD(arg=2, lineno=250)
2020-06-11 12:07:02,176:DEBUG:stack ['$134load_attr.17', '$162load_method.31', '$const164.32', '$n166.33']
2020-06-11 12:07:02,176:DEBUG:dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$134load_attr.17', '$168call_method.34']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=172, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=174, inst=LOAD_METHOD(arg=3, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$distx172.36']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=176, inst=CALL_METHOD(arg=0, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$174load_method.37']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=180, inst=LOAD_CONST(arg=4, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$n178.39']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=182, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$n178.39', '$const180.40']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=186, inst=LOAD_CONST(arg=5, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$n184.42']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=188, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$n184.42', '$const186.43']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=190, inst=BINARY_MULTIPLY(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$182binary_subtract.41', '$188binary_subtract.44']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=192, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$176call_method.38', '$190binary_multiply.45']
2020-06-11 12:07:02,177:DEBUG:dispatch pc=194, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:02,177:DEBUG:stack ['$170binary_add.35', '$192binary_true_divide.46']
2020-06-11 12:07:02,178:DEBUG:dispatch pc=196, inst=STORE_FAST(arg=3, lineno=250)
2020-06-11 12:07:02,178:DEBUG:stack ['$194binary_subtract.47']
2020-06-11 12:07:02,178:DEBUG:end state. edges=[Edge(pc=198, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,178:DEBUG:pending: deque([State(pc_initial=198 nstack_initial=0), State(pc_initial=198 nstack_initial=0)])
2020-06-11 12:07:02,178:DEBUG:stack: []
2020-06-11 12:07:02,178:DEBUG:dispatch pc=198, inst=LOAD_FAST(arg=0, lineno=252)
2020-06-11 12:07:02,178:DEBUG:stack []
2020-06-11 12:07:02,178:DEBUG:dispatch pc=200, inst=LOAD_FAST(arg=3, lineno=252)
2020-06-11 12:07:02,178:DEBUG:stack ['$distx198.0']
2020-06-11 12:07:02,178:DEBUG:dispatch pc=202, inst=BINARY_SUBTRACT(arg=None, lineno=252)
2020-06-11 12:07:02,178:DEBUG:stack ['$distx198.0', '$exp_distx200.1']
2020-06-11 12:07:02,178:DEBUG:dispatch pc=204, inst=STORE_FAST(arg=4, lineno=252)
2020-06-11 12:07:02,178:DEBUG:stack ['$202binary_subtract.2']
2020-06-11 12:07:02,178:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=1, lineno=253)
2020-06-11 12:07:02,178:DEBUG:stack []
2020-06-11 12:07:02,178:DEBUG:dispatch pc=208, inst=POP_JUMP_IF_TRUE(arg=222, lineno=253)
2020-06-11 12:07:02,178:DEBUG:stack ['$bias206.3']
2020-06-11 12:07:02,178:DEBUG:end state. edges=[Edge(pc=210, stack=(), blockstack=(), npush=0), Edge(pc=222, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,178:DEBUG:pending: deque([State(pc_initial=198 nstack_initial=0), State(pc_initial=210 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:07:02,178:DEBUG:pending: deque([State(pc_initial=210 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:07:02,178:DEBUG:stack: []
2020-06-11 12:07:02,178:DEBUG:dispatch pc=210, inst=LOAD_GLOBAL(arg=1, lineno=254)
2020-06-11 12:07:02,178:DEBUG:stack []
2020-06-11 12:07:02,178:DEBUG:dispatch pc=212, inst=LOAD_METHOD(arg=6, lineno=254)
2020-06-11 12:07:02,179:DEBUG:stack ['$210load_global.0']
2020-06-11 12:07:02,179:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=4, lineno=254)
2020-06-11 12:07:02,179:DEBUG:stack ['$212load_method.1']
2020-06-11 12:07:02,179:DEBUG:dispatch pc=216, inst=LOAD_CONST(arg=1, lineno=254)
2020-06-11 12:07:02,179:DEBUG:stack ['$212load_method.1', '$cent_distx214.2']
2020-06-11 12:07:02,179:DEBUG:dispatch pc=218, inst=CALL_METHOD(arg=2, lineno=254)
2020-06-11 12:07:02,179:DEBUG:stack ['$212load_method.1', '$cent_distx214.2', '$const216.3']
2020-06-11 12:07:02,179:DEBUG:dispatch pc=220, inst=POP_TOP(arg=None, lineno=254)
2020-06-11 12:07:02,179:DEBUG:stack ['$218call_method.4']
2020-06-11 12:07:02,179:DEBUG:end state. edges=[Edge(pc=222, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,179:DEBUG:pending: deque([State(pc_initial=222 nstack_initial=0), State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:07:02,179:DEBUG:stack: []
2020-06-11 12:07:02,179:DEBUG:dispatch pc=222, inst=LOAD_FAST(arg=4, lineno=256)
2020-06-11 12:07:02,179:DEBUG:stack []
2020-06-11 12:07:02,179:DEBUG:dispatch pc=224, inst=RETURN_VALUE(arg=None, lineno=256)
2020-06-11 12:07:02,179:DEBUG:stack ['$cent_distx222.0']
2020-06-11 12:07:02,179:DEBUG:end state. edges=[]
2020-06-11 12:07:02,179:DEBUG:pending: deque([State(pc_initial=222 nstack_initial=0)])
2020-06-11 12:07:02,179:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,179:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=198 nstack_initial=0): set(),
             State(pc_initial=210 nstack_initial=0): set(),
             State(pc_initial=222 nstack_initial=0): set()})
2020-06-11 12:07:02,180:DEBUG:defmap: {}
2020-06-11 12:07:02,180:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,180:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,180:DEBUG:keep phismap: {}
2020-06-11 12:07:02,180:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,180:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$distx2.0'}), (4, {'item': '$distx2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$bias12.4'}), (14, {'pred': '$bias12.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 100: ()})
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$16load_global.0'}), (18, {'item': '$16load_global.0', 'res': '$18load_method.1'}), (20, {'res': '$distx20.2'}), (22, {'item': '$distx20.2', 'res': '$22load_attr.3'}), (24, {'res': '$const24.4'}), (26, {'res': '$const26.5'}), (28, {'func': '$22load_attr.3', 'args': ['$const24.4'], 'names': '$const26.5', 'res': '$28call_function_kw.6'}), (30, {'res': '$n30.7'}), (32, {'lhs': '$28call_function_kw.6', 'rhs': '$n30.7', 'res': '$32binary_true_divide.8'}), (34, {'res': '$n34.9'}), (36, {'func': '$18load_method.1', 'args': ['$32binary_true_divide.8', '$n34.9'], 'res': '$36call_method.10'}), (38, {'item': '$36call_method.10', 'res': '$38load_method.11'}), (40, {'res': '$const40.12'}), (42, {'res': '$n42.13'}), (44, {'func': '$38load_method.11', 'args': ['$const40.12', '$n42.13'], 'res': '$44call_method.14'}), (46, {'item': '$44call_method.14', 'res': '$46load_attr.15'}), (48, {'res': '$48load_global.16'}), (50, {'item': '$48load_global.16', 'res': '$50load_method.17'}), (52, {'res': '$distx52.18'}), (54, {'item': '$distx52.18', 'res': '$54load_attr.19'}), (56, {'res': '$const56.20'}), (58, {'res': '$const58.21'}), (60, {'func': '$54load_attr.19', 'args': ['$const56.20'], 'names': '$const58.21', 'res': '$60call_function_kw.22'}), (62, {'res': '$n62.23'}), (64, {'lhs': '$60call_function_kw.22', 'rhs': '$n62.23', 'res': '$64binary_true_divide.24'}), (66, {'res': '$n66.25'}), (68, {'func': '$50load_method.17', 'args': ['$64binary_true_divide.24', '$n66.25'], 'res': '$68call_method.26'}), (70, {'item': '$68call_method.26', 'res': '$70load_method.27'}), (72, {'res': '$const72.28'}), (74, {'res': '$n74.29'}), (76, {'func': '$70load_method.27', 'args': ['$const72.28', '$n74.29'], 'res': '$76call_method.30'}), (78, {'lhs': '$46load_attr.15', 'rhs': '$76call_method.30', 'res': '$78binary_add.31'}), (80, {'res': '$distx80.32'}), (82, {'item': '$distx80.32', 'res': '$82load_method.33'}), (84, {'func': '$82load_method.33', 'args': [], 'res': '$84call_method.34'}), (86, {'res': '$n86.35'}), (88, {'res': '$n88.36'}), (90, {'lhs': '$n86.35', 'rhs': '$n88.36', 'res': '$90binary_multiply.37'}), (92, {'lhs': '$84call_method.34', 'rhs': '$90binary_multiply.37', 'res': '$92binary_true_divide.38'}), (94, {'lhs': '$78binary_add.31', 'rhs': '$92binary_true_divide.38', 'res': '$94binary_subtract.39'}), (96, {'value': '$94binary_subtract.39'}), (98, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ()})
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$100load_global.0'}), (102, {'item': '$100load_global.0', 'res': '$102load_method.1'}), (104, {'res': '$distx104.2'}), (106, {'item': '$distx104.2', 'res': '$106load_attr.3'}), (108, {'res': '$const108.4'}), (110, {'res': '$const110.5'}), (112, {'func': '$106load_attr.3', 'args': ['$const108.4'], 'names': '$const110.5', 'res': '$112call_function_kw.6'}), (114, {'res': '$n114.7'}), (116, {'res': '$const116.8'}), (118, {'lhs': '$n114.7', 'rhs': '$const116.8', 'res': '$118binary_subtract.9'}), (120, {'lhs': '$112call_function_kw.6', 'rhs': '$118binary_subtract.9', 'res': '$120binary_true_divide.10'}), (122, {'res': '$n122.11'}), (124, {'func': '$102load_method.1', 'args': ['$120binary_true_divide.10', '$n122.11'], 'res': '$124call_method.12'}), (126, {'item': '$124call_method.12', 'res': '$126load_method.13'}), (128, {'res': '$const128.14'}), (130, {'res': '$n130.15'}), (132, {'func': '$126load_method.13', 'args': ['$const128.14', '$n130.15'], 'res': '$132call_method.16'}), (134, {'item': '$132call_method.16', 'res': '$134load_attr.17'}), (136, {'res': '$136load_global.18'}), (138, {'item': '$136load_global.18', 'res': '$138load_method.19'}), (140, {'res': '$distx140.20'}), (142, {'item': '$distx140.20', 'res': '$142load_attr.21'}), (144, {'res': '$const144.22'}), (146, {'res': '$const146.23'}), (148, {'func': '$142load_attr.21', 'args': ['$const144.22'], 'names': '$const146.23', 'res': '$148call_function_kw.24'}), (150, {'res': '$n150.25'}), (152, {'res': '$const152.26'}), (154, {'lhs': '$n150.25', 'rhs': '$const152.26', 'res': '$154binary_subtract.27'}), (156, {'lhs': '$148call_function_kw.24', 'rhs': '$154binary_subtract.27', 'res': '$156binary_true_divide.28'}), (158, {'res': '$n158.29'}), (160, {'func': '$138load_method.19', 'args': ['$156binary_true_divide.28', '$n158.29'], 'res': '$160call_method.30'}), (162, {'item': '$160call_method.30', 'res': '$162load_method.31'}), (164, {'res': '$const164.32'}), (166, {'res': '$n166.33'}), (168, {'func': '$162load_method.31', 'args': ['$const164.32', '$n166.33'], 'res': '$168call_method.34'}), (170, {'lhs': '$134load_attr.17', 'rhs': '$168call_method.34', 'res': '$170binary_add.35'}), (172, {'res': '$distx172.36'}), (174, {'item': '$distx172.36', 'res': '$174load_method.37'}), (176, {'func': '$174load_method.37', 'args': [], 'res': '$176call_method.38'}), (178, {'res': '$n178.39'}), (180, {'res': '$const180.40'}), (182, {'lhs': '$n178.39', 'rhs': '$const180.40', 'res': '$182binary_subtract.41'}), (184, {'res': '$n184.42'}), (186, {'res': '$const186.43'}), (188, {'lhs': '$n184.42', 'rhs': '$const186.43', 'res': '$188binary_subtract.44'}), (190, {'lhs': '$182binary_subtract.41', 'rhs': '$188binary_subtract.44', 'res': '$190binary_multiply.45'}), (192, {'lhs': '$176call_method.38', 'rhs': '$190binary_multiply.45', 'res': '$192binary_true_divide.46'}), (194, {'lhs': '$170binary_add.35', 'rhs': '$192binary_true_divide.46', 'res': '$194binary_subtract.47'}), (196, {'value': '$194binary_subtract.47'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ()})
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=198 nstack_initial=0):
AdaptBlockInfo(insts=((198, {'res': '$distx198.0'}), (200, {'res': '$exp_distx200.1'}), (202, {'lhs': '$distx198.0', 'rhs': '$exp_distx200.1', 'res': '$202binary_subtract.2'}), (204, {'value': '$202binary_subtract.2'}), (206, {'res': '$bias206.3'}), (208, {'pred': '$bias206.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: (), 222: ()})
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=210 nstack_initial=0):
AdaptBlockInfo(insts=((210, {'res': '$210load_global.0'}), (212, {'item': '$210load_global.0', 'res': '$212load_method.1'}), (214, {'res': '$cent_distx214.2'}), (216, {'res': '$const216.3'}), (218, {'func': '$212load_method.1', 'args': ['$cent_distx214.2', '$const216.3'], 'res': '$218call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={222: ()})
2020-06-11 12:07:02,180:DEBUG:block_infos State(pc_initial=222 nstack_initial=0):
AdaptBlockInfo(insts=((222, {'res': '$cent_distx222.0'}), (224, {'retval': '$cent_distx222.0', 'castval': '$224return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,183:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=$4load_attr.1, index=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx = $194binary_subtract.47       ['$194binary_subtract.47', 'exp_distx']
    jump 198                                 []
label 198:
    $202binary_subtract.2 = distx - exp_distx ['$202binary_subtract.2', 'distx', 'exp_distx']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:07:02,193:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,194:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx = $194binary_subtract.47       ['$194binary_subtract.47', 'exp_distx']
    jump 198                                 []
label 198:
    $202binary_subtract.2 = distx - exp_distx ['$202binary_subtract.2', 'distx', 'exp_distx']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:07:02,194:DEBUG:================================================================================
2020-06-11 12:07:02,194:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,194:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,194:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,194:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:07:02,194:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:07:02,194:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:07:02,194:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:07:02,194:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:07:02,194:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:07:02,194:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:07:02,194:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,194:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,194:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:07:02,195:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,195:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:07:02,195:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:07:02,195:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:07:02,195:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:07:02,195:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:07:02,195:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,195:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:07:02,195:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,195:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:07:02,195:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:07:02,195:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:07:02,195:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:07:02,195:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:07:02,195:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,195:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,195:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:07:02,195:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:07:02,196:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:07:02,196:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:07:02,196:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,196:DEBUG:==== SSA block analysis pass on 100
2020-06-11 12:07:02,196:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,196:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,196:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:07:02,196:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,196:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:07:02,196:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,196:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:07:02,196:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:07:02,196:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:07:02,196:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,196:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:07:02,196:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:07:02,196:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,196:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:07:02,196:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,196:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:07:02,196:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,196:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:07:02,196:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,196:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:07:02,196:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:07:02,197:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:07:02,197:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,197:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:07:02,197:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:07:02,197:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,197:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:07:02,197:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,197:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,197:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:07:02,197:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:07:02,197:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:07:02,197:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:07:02,197:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:07:02,197:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:07:02,197:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:07:02,197:DEBUG:on stmt: exp_distx = $194binary_subtract.47
2020-06-11 12:07:02,197:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,197:DEBUG:==== SSA block analysis pass on 198
2020-06-11 12:07:02,197:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,197:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:07:02,197:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:07:02,197:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:07:02,197:DEBUG:==== SSA block analysis pass on 210
2020-06-11 12:07:02,197:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,198:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,198:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:07:02,198:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:07:02,198:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:07:02,198:DEBUG:on stmt: jump 222
2020-06-11 12:07:02,198:DEBUG:==== SSA block analysis pass on 222
2020-06-11 12:07:02,198:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45467a590>
2020-06-11 12:07:02,198:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:07:02,198:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:07:02,199:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.0': [<numba.core.ir.Assign object at 0x7fc454666f50>],
             '$102load_method.1': [<numba.core.ir.Assign object at 0x7fc45466c590>],
             '$106load_attr.3': [<numba.core.ir.Assign object at 0x7fc45466ced0>],
             '$112call_function_kw.6': [<numba.core.ir.Assign object at 0x7fc45466e390>],
             '$118binary_subtract.9': [<numba.core.ir.Assign object at 0x7fc45466e590>],
             '$120binary_true_divide.10': [<numba.core.ir.Assign object at 0x7fc45466e650>],
             '$124call_method.12': [<numba.core.ir.Assign object at 0x7fc45466e850>],
             '$126load_method.13': [<numba.core.ir.Assign object at 0x7fc45466e8d0>],
             '$132call_method.16': [<numba.core.ir.Assign object at 0x7fc45466ebd0>],
             '$134load_attr.17': [<numba.core.ir.Assign object at 0x7fc45466ecd0>],
             '$136load_global.18': [<numba.core.ir.Assign object at 0x7fc45466edd0>],
             '$138load_method.19': [<numba.core.ir.Assign object at 0x7fc45466ee90>],
             '$142load_attr.21': [<numba.core.ir.Assign object at 0x7fc4546730d0>],
             '$148call_function_kw.24': [<numba.core.ir.Assign object at 0x7fc454673510>],
             '$154binary_subtract.27': [<numba.core.ir.Assign object at 0x7fc454673710>],
             '$156binary_true_divide.28': [<numba.core.ir.Assign object at 0x7fc454673810>],
             '$160call_method.30': [<numba.core.ir.Assign object at 0x7fc454673a50>],
             '$162load_method.31': [<numba.core.ir.Assign object at 0x7fc454673ad0>],
             '$168call_method.34': [<numba.core.ir.Assign object at 0x7fc454673dd0>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x7fc454662950>],
             '$170binary_add.35': [<numba.core.ir.Assign object at 0x7fc454673e90>],
             '$174load_method.37': [<numba.core.ir.Assign object at 0x7fc454677090>],
             '$176call_method.38': [<numba.core.ir.Assign object at 0x7fc4546771d0>],
             '$182binary_subtract.41': [<numba.core.ir.Assign object at 0x7fc454677450>],
             '$188binary_subtract.44': [<numba.core.ir.Assign object at 0x7fc454677710>],
             '$18load_method.1': [<numba.core.ir.Assign object at 0x7fc454662a10>],
             '$190binary_multiply.45': [<numba.core.ir.Assign object at 0x7fc454677810>],
             '$192binary_true_divide.46': [<numba.core.ir.Assign object at 0x7fc454677910>],
             '$194binary_subtract.47': [<numba.core.ir.Assign object at 0x7fc454677a10>],
             '$202binary_subtract.2': [<numba.core.ir.Assign object at 0x7fc454677ad0>],
             '$210load_global.0': [<numba.core.ir.Assign object at 0x7fc454677d90>],
             '$212load_method.1': [<numba.core.ir.Assign object at 0x7fc454677e90>],
             '$218call_method.4': [<numba.core.ir.Assign object at 0x7fc45467a1d0>],
             '$224return_value.1': [<numba.core.ir.Assign object at 0x7fc45467a450>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x7fc454662c10>],
             '$28call_function_kw.6': [<numba.core.ir.Assign object at 0x7fc454666090>],
             '$32binary_true_divide.8': [<numba.core.ir.Assign object at 0x7fc454666190>],
             '$36call_method.10': [<numba.core.ir.Assign object at 0x7fc454666350>],
             '$38load_method.11': [<numba.core.ir.Assign object at 0x7fc4546663d0>],
             '$44call_method.14': [<numba.core.ir.Assign object at 0x7fc4546666d0>],
             '$46load_attr.15': [<numba.core.ir.Assign object at 0x7fc4546667d0>],
             '$48load_global.16': [<numba.core.ir.Assign object at 0x7fc4546668d0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc4546624d0>],
             '$50load_method.17': [<numba.core.ir.Assign object at 0x7fc454666990>],
             '$54load_attr.19': [<numba.core.ir.Assign object at 0x7fc454666b90>],
             '$60call_function_kw.22': [<numba.core.ir.Assign object at 0x7fc454652f10>],
             '$64binary_true_divide.24': [<numba.core.ir.Assign object at 0x7fc454652d90>],
             '$68call_method.26': [<numba.core.ir.Assign object at 0x7fc45466c050>],
             '$70load_method.27': [<numba.core.ir.Assign object at 0x7fc45466c0d0>],
             '$76call_method.30': [<numba.core.ir.Assign object at 0x7fc45466c3d0>],
             '$78binary_add.31': [<numba.core.ir.Assign object at 0x7fc45466c4d0>],
             '$82load_method.33': [<numba.core.ir.Assign object at 0x7fc45466c690>],
             '$84call_method.34': [<numba.core.ir.Assign object at 0x7fc45466c7d0>],
             '$8binary_subscr.3': [<numba.core.ir.Assign object at 0x7fc45467acd0>],
             '$90binary_multiply.37': [<numba.core.ir.Assign object at 0x7fc45466ca10>],
             '$92binary_true_divide.38': [<numba.core.ir.Assign object at 0x7fc45466cb10>],
             '$94binary_subtract.39': [<numba.core.ir.Assign object at 0x7fc45466cc10>],
             '$const108.4': [<numba.core.ir.Assign object at 0x7fc45466cfd0>],
             '$const116.8': [<numba.core.ir.Assign object at 0x7fc45466e490>],
             '$const128.14': [<numba.core.ir.Assign object at 0x7fc45466e9d0>],
             '$const144.22': [<numba.core.ir.Assign object at 0x7fc4546731d0>],
             '$const152.26': [<numba.core.ir.Assign object at 0x7fc454673610>],
             '$const164.32': [<numba.core.ir.Assign object at 0x7fc454673bd0>],
             '$const180.40': [<numba.core.ir.Assign object at 0x7fc454677350>],
             '$const186.43': [<numba.core.ir.Assign object at 0x7fc454677610>],
             '$const216.3': [<numba.core.ir.Assign object at 0x7fc45467a090>],
             '$const24.4': [<numba.core.ir.Assign object at 0x7fc454662d10>],
             '$const40.12': [<numba.core.ir.Assign object at 0x7fc4546664d0>],
             '$const56.20': [<numba.core.ir.Assign object at 0x7fc454666c90>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fc454662490>],
             '$const72.28': [<numba.core.ir.Assign object at 0x7fc45466c1d0>],
             'bias': [<numba.core.ir.Assign object at 0x7fc454662150>],
             'cent_distx': [<numba.core.ir.Assign object at 0x7fc454677b90>],
             'distx': [<numba.core.ir.Assign object at 0x7fc4546620d0>],
             'exp_distx': [<numba.core.ir.Assign object at 0x7fc45466ccd0>,
                           <numba.core.ir.Assign object at 0x7fc45466cc90>],
             'n': [<numba.core.ir.Assign object at 0x7fc4546626d0>]})
2020-06-11 12:07:02,199:DEBUG:SSA violators {'exp_distx'}
2020-06-11 12:07:02,199:DEBUG:Fix SSA violator on var exp_distx
2020-06-11 12:07:02,199:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,199:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,199:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,199:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:07:02,199:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:07:02,199:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:07:02,199:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:07:02,199:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:07:02,199:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:07:02,199:DEBUG:==== SSA block rewrite pass on 16
2020-06-11 12:07:02,199:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,199:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,199:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:07:02,199:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,199:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:07:02,199:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:07:02,200:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:07:02,200:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:07:02,200:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:07:02,200:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,200:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:07:02,200:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,200:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:07:02,200:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:07:02,200:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:07:02,200:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:07:02,200:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:07:02,200:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,200:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,200:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:07:02,200:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:07:02,200:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:07:02,200:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:07:02,200:DEBUG:first assign: exp_distx
2020-06-11 12:07:02,200:DEBUG:replaced with: exp_distx = $94binary_subtract.39
2020-06-11 12:07:02,200:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,201:DEBUG:==== SSA block rewrite pass on 100
2020-06-11 12:07:02,201:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,201:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,201:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:07:02,201:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,201:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:07:02,201:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,201:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:07:02,201:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:07:02,201:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:07:02,201:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,201:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:07:02,201:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:07:02,201:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,201:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:07:02,201:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,201:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:07:02,201:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,201:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:07:02,201:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,201:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:07:02,201:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:07:02,201:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:07:02,201:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,201:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:07:02,202:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:07:02,202:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,202:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:07:02,202:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,202:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,202:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:07:02,202:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:07:02,202:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:07:02,202:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:07:02,202:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:07:02,202:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:07:02,202:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:07:02,202:DEBUG:on stmt: exp_distx = $194binary_subtract.47
2020-06-11 12:07:02,202:DEBUG:replaced with: exp_distx.1 = $194binary_subtract.47
2020-06-11 12:07:02,202:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,202:DEBUG:==== SSA block rewrite pass on 198
2020-06-11 12:07:02,202:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,202:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:07:02,202:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:07:02,202:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:07:02,202:DEBUG:==== SSA block rewrite pass on 210
2020-06-11 12:07:02,202:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,202:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,202:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:07:02,202:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:07:02,203:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:07:02,203:DEBUG:on stmt: jump 222
2020-06-11 12:07:02,203:DEBUG:==== SSA block rewrite pass on 222
2020-06-11 12:07:02,203:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454673e10>
2020-06-11 12:07:02,203:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:07:02,203:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:07:02,203:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {16: [<numba.core.ir.Assign object at 0x7fc454612ed0>],
             100: [<numba.core.ir.Assign object at 0x7fc454612e10>]})
2020-06-11 12:07:02,203:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,203:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,203:DEBUG:on stmt: distx = arg(0, name=distx)
2020-06-11 12:07:02,203:DEBUG:on stmt: bias = arg(1, name=bias)
2020-06-11 12:07:02,203:DEBUG:on stmt: $4load_attr.1 = getattr(value=distx, attr=shape)
2020-06-11 12:07:02,203:DEBUG:on stmt: $const6.2 = const(int, 0)
2020-06-11 12:07:02,203:DEBUG:on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2020-06-11 12:07:02,203:DEBUG:on stmt: n = $8binary_subscr.3
2020-06-11 12:07:02,203:DEBUG:on stmt: branch bias, 16, 100
2020-06-11 12:07:02,203:DEBUG:==== SSA block rewrite pass on 16
2020-06-11 12:07:02,203:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,203:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,204:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=repeat)
2020-06-11 12:07:02,204:DEBUG:on stmt: $22load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,204:DEBUG:on stmt: $const24.4 = const(int, 0)
2020-06-11 12:07:02,204:DEBUG:on stmt: $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $32binary_true_divide.8 = $28call_function_kw.6 / n
2020-06-11 12:07:02,204:DEBUG:on stmt: $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $38load_method.11 = getattr(value=$36call_method.10, attr=reshape)
2020-06-11 12:07:02,204:DEBUG:on stmt: $const40.12 = const(int, -1)
2020-06-11 12:07:02,204:DEBUG:on stmt: $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $46load_attr.15 = getattr(value=$44call_method.14, attr=T)
2020-06-11 12:07:02,204:DEBUG:on stmt: $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,204:DEBUG:on stmt: $50load_method.17 = getattr(value=$48load_global.16, attr=repeat)
2020-06-11 12:07:02,204:DEBUG:on stmt: $54load_attr.19 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,204:DEBUG:on stmt: $const56.20 = const(int, 1)
2020-06-11 12:07:02,204:DEBUG:on stmt: $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $64binary_true_divide.24 = $60call_function_kw.22 / n
2020-06-11 12:07:02,204:DEBUG:on stmt: $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $70load_method.27 = getattr(value=$68call_method.26, attr=reshape)
2020-06-11 12:07:02,204:DEBUG:on stmt: $const72.28 = const(int, -1)
2020-06-11 12:07:02,204:DEBUG:on stmt: $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,204:DEBUG:on stmt: $78binary_add.31 = $46load_attr.15 + $76call_method.30
2020-06-11 12:07:02,205:DEBUG:on stmt: $82load_method.33 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,205:DEBUG:on stmt: $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,205:DEBUG:on stmt: $90binary_multiply.37 = n * n
2020-06-11 12:07:02,205:DEBUG:on stmt: $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37
2020-06-11 12:07:02,205:DEBUG:on stmt: $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38
2020-06-11 12:07:02,205:DEBUG:on stmt: exp_distx = $94binary_subtract.39
2020-06-11 12:07:02,205:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,205:DEBUG:==== SSA block rewrite pass on 100
2020-06-11 12:07:02,205:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,205:DEBUG:on stmt: $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,205:DEBUG:on stmt: $102load_method.1 = getattr(value=$100load_global.0, attr=repeat)
2020-06-11 12:07:02,205:DEBUG:on stmt: $106load_attr.3 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,205:DEBUG:on stmt: $const108.4 = const(int, 0)
2020-06-11 12:07:02,205:DEBUG:on stmt: $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,205:DEBUG:on stmt: $const116.8 = const(int, 2)
2020-06-11 12:07:02,205:DEBUG:on stmt: $118binary_subtract.9 = n - $const116.8
2020-06-11 12:07:02,205:DEBUG:on stmt: $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9
2020-06-11 12:07:02,205:DEBUG:on stmt: $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,205:DEBUG:on stmt: $126load_method.13 = getattr(value=$124call_method.12, attr=reshape)
2020-06-11 12:07:02,205:DEBUG:on stmt: $const128.14 = const(int, -1)
2020-06-11 12:07:02,205:DEBUG:on stmt: $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,205:DEBUG:on stmt: $134load_attr.17 = getattr(value=$132call_method.16, attr=T)
2020-06-11 12:07:02,205:DEBUG:on stmt: $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,206:DEBUG:on stmt: $138load_method.19 = getattr(value=$136load_global.18, attr=repeat)
2020-06-11 12:07:02,206:DEBUG:on stmt: $142load_attr.21 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,206:DEBUG:on stmt: $const144.22 = const(int, 1)
2020-06-11 12:07:02,206:DEBUG:on stmt: $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None)
2020-06-11 12:07:02,206:DEBUG:on stmt: $const152.26 = const(int, 2)
2020-06-11 12:07:02,206:DEBUG:on stmt: $154binary_subtract.27 = n - $const152.26
2020-06-11 12:07:02,206:DEBUG:on stmt: $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27
2020-06-11 12:07:02,206:DEBUG:on stmt: $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,206:DEBUG:on stmt: $162load_method.31 = getattr(value=$160call_method.30, attr=reshape)
2020-06-11 12:07:02,206:DEBUG:on stmt: $const164.32 = const(int, -1)
2020-06-11 12:07:02,206:DEBUG:on stmt: $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None)
2020-06-11 12:07:02,206:DEBUG:on stmt: $170binary_add.35 = $134load_attr.17 + $168call_method.34
2020-06-11 12:07:02,206:DEBUG:on stmt: $174load_method.37 = getattr(value=distx, attr=sum)
2020-06-11 12:07:02,206:DEBUG:on stmt: $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,206:DEBUG:on stmt: $const180.40 = const(int, 1)
2020-06-11 12:07:02,206:DEBUG:on stmt: $182binary_subtract.41 = n - $const180.40
2020-06-11 12:07:02,206:DEBUG:on stmt: $const186.43 = const(int, 2)
2020-06-11 12:07:02,206:DEBUG:on stmt: $188binary_subtract.44 = n - $const186.43
2020-06-11 12:07:02,206:DEBUG:on stmt: $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44
2020-06-11 12:07:02,206:DEBUG:on stmt: $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45
2020-06-11 12:07:02,207:DEBUG:on stmt: $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46
2020-06-11 12:07:02,207:DEBUG:on stmt: exp_distx.1 = $194binary_subtract.47
2020-06-11 12:07:02,207:DEBUG:on stmt: jump 198
2020-06-11 12:07:02,207:DEBUG:==== SSA block rewrite pass on 198
2020-06-11 12:07:02,207:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,207:DEBUG:on stmt: $202binary_subtract.2 = distx - exp_distx
2020-06-11 12:07:02,207:DEBUG:find_def var='exp_distx' stmt=$202binary_subtract.2 = distx - exp_distx
2020-06-11 12:07:02,207:DEBUG:find_def_from_top label 198
2020-06-11 12:07:02,207:DEBUG:insert phi node exp_distx.2 = phi(incoming_values=[], incoming_blocks=[]) at 198
2020-06-11 12:07:02,207:DEBUG:find_def_from_bottom label 16
2020-06-11 12:07:02,207:DEBUG:incoming_def exp_distx = $94binary_subtract.39
2020-06-11 12:07:02,207:DEBUG:find_def_from_bottom label 100
2020-06-11 12:07:02,207:DEBUG:incoming_def exp_distx.1 = $194binary_subtract.47
2020-06-11 12:07:02,207:DEBUG:replaced with: $202binary_subtract.2 = distx - exp_distx.2
2020-06-11 12:07:02,207:DEBUG:on stmt: cent_distx = $202binary_subtract.2
2020-06-11 12:07:02,207:DEBUG:on stmt: branch bias, 222, 210
2020-06-11 12:07:02,207:DEBUG:==== SSA block rewrite pass on 210
2020-06-11 12:07:02,207:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,207:DEBUG:on stmt: $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,207:DEBUG:on stmt: $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal)
2020-06-11 12:07:02,207:DEBUG:on stmt: $const216.3 = const(int, 0)
2020-06-11 12:07:02,207:DEBUG:on stmt: $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None)
2020-06-11 12:07:02,207:DEBUG:on stmt: jump 222
2020-06-11 12:07:02,208:DEBUG:==== SSA block rewrite pass on 222
2020-06-11 12:07:02,208:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4546124d0>
2020-06-11 12:07:02,208:DEBUG:on stmt: $224return_value.1 = cast(value=cent_distx)
2020-06-11 12:07:02,208:DEBUG:on stmt: return $224return_value.1
2020-06-11 12:07:02,208:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,209:DEBUG:label 0:
    distx = arg(0, name=distx)               ['distx']
    bias = arg(1, name=bias)                 ['bias']
    $4load_attr.1 = getattr(value=distx, attr=shape) ['$4load_attr.1', 'distx']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    n = $8binary_subscr.3                    ['$8binary_subscr.3', 'n']
    branch bias, 16, 100                     ['bias']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=repeat) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=distx, attr=sum) ['$22load_attr.3', 'distx']
    $const24.4 = const(int, 0)               ['$const24.4']
    $28call_function_kw.6 = call $22load_attr.3(func=$22load_attr.3, args=[], kws=[('axis', Var($const24.4, dcorr.py:244))], vararg=None) ['$22load_attr.3', '$28call_function_kw.6', '$const24.4']
    $32binary_true_divide.8 = $28call_function_kw.6 / n ['$28call_function_kw.6', '$32binary_true_divide.8', 'n']
    $36call_method.10 = call $18load_method.1($32binary_true_divide.8, n, func=$18load_method.1, args=[Var($32binary_true_divide.8, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$18load_method.1', '$32binary_true_divide.8', '$36call_method.10', 'n']
    $38load_method.11 = getattr(value=$36call_method.10, attr=reshape) ['$36call_method.10', '$38load_method.11']
    $const40.12 = const(int, -1)             ['$const40.12']
    $44call_method.14 = call $38load_method.11($const40.12, n, func=$38load_method.11, args=[Var($const40.12, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$38load_method.11', '$44call_method.14', '$const40.12', 'n']
    $46load_attr.15 = getattr(value=$44call_method.14, attr=T) ['$44call_method.14', '$46load_attr.15']
    $48load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$48load_global.16']
    $50load_method.17 = getattr(value=$48load_global.16, attr=repeat) ['$48load_global.16', '$50load_method.17']
    $54load_attr.19 = getattr(value=distx, attr=sum) ['$54load_attr.19', 'distx']
    $const56.20 = const(int, 1)              ['$const56.20']
    $60call_function_kw.22 = call $54load_attr.19(func=$54load_attr.19, args=[], kws=[('axis', Var($const56.20, dcorr.py:244))], vararg=None) ['$54load_attr.19', '$60call_function_kw.22', '$const56.20']
    $64binary_true_divide.24 = $60call_function_kw.22 / n ['$60call_function_kw.22', '$64binary_true_divide.24', 'n']
    $68call_method.26 = call $50load_method.17($64binary_true_divide.24, n, func=$50load_method.17, args=[Var($64binary_true_divide.24, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$50load_method.17', '$64binary_true_divide.24', '$68call_method.26', 'n']
    $70load_method.27 = getattr(value=$68call_method.26, attr=reshape) ['$68call_method.26', '$70load_method.27']
    $const72.28 = const(int, -1)             ['$const72.28']
    $76call_method.30 = call $70load_method.27($const72.28, n, func=$70load_method.27, args=[Var($const72.28, dcorr.py:244), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$70load_method.27', '$76call_method.30', '$const72.28', 'n']
    $78binary_add.31 = $46load_attr.15 + $76call_method.30 ['$46load_attr.15', '$76call_method.30', '$78binary_add.31']
    $82load_method.33 = getattr(value=distx, attr=sum) ['$82load_method.33', 'distx']
    $84call_method.34 = call $82load_method.33(func=$82load_method.33, args=[], kws=(), vararg=None) ['$82load_method.33', '$84call_method.34']
    $90binary_multiply.37 = n * n            ['$90binary_multiply.37', 'n', 'n']
    $92binary_true_divide.38 = $84call_method.34 / $90binary_multiply.37 ['$84call_method.34', '$90binary_multiply.37', '$92binary_true_divide.38']
    $94binary_subtract.39 = $78binary_add.31 - $92binary_true_divide.38 ['$78binary_add.31', '$92binary_true_divide.38', '$94binary_subtract.39']
    exp_distx = $94binary_subtract.39        ['$94binary_subtract.39', 'exp_distx']
    jump 198                                 []
label 100:
    $100load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$100load_global.0']
    $102load_method.1 = getattr(value=$100load_global.0, attr=repeat) ['$100load_global.0', '$102load_method.1']
    $106load_attr.3 = getattr(value=distx, attr=sum) ['$106load_attr.3', 'distx']
    $const108.4 = const(int, 0)              ['$const108.4']
    $112call_function_kw.6 = call $106load_attr.3(func=$106load_attr.3, args=[], kws=[('axis', Var($const108.4, dcorr.py:250))], vararg=None) ['$106load_attr.3', '$112call_function_kw.6', '$const108.4']
    $const116.8 = const(int, 2)              ['$const116.8']
    $118binary_subtract.9 = n - $const116.8  ['$118binary_subtract.9', '$const116.8', 'n']
    $120binary_true_divide.10 = $112call_function_kw.6 / $118binary_subtract.9 ['$112call_function_kw.6', '$118binary_subtract.9', '$120binary_true_divide.10']
    $124call_method.12 = call $102load_method.1($120binary_true_divide.10, n, func=$102load_method.1, args=[Var($120binary_true_divide.10, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$102load_method.1', '$120binary_true_divide.10', '$124call_method.12', 'n']
    $126load_method.13 = getattr(value=$124call_method.12, attr=reshape) ['$124call_method.12', '$126load_method.13']
    $const128.14 = const(int, -1)            ['$const128.14']
    $132call_method.16 = call $126load_method.13($const128.14, n, func=$126load_method.13, args=[Var($const128.14, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$126load_method.13', '$132call_method.16', '$const128.14', 'n']
    $134load_attr.17 = getattr(value=$132call_method.16, attr=T) ['$132call_method.16', '$134load_attr.17']
    $136load_global.18 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$136load_global.18']
    $138load_method.19 = getattr(value=$136load_global.18, attr=repeat) ['$136load_global.18', '$138load_method.19']
    $142load_attr.21 = getattr(value=distx, attr=sum) ['$142load_attr.21', 'distx']
    $const144.22 = const(int, 1)             ['$const144.22']
    $148call_function_kw.24 = call $142load_attr.21(func=$142load_attr.21, args=[], kws=[('axis', Var($const144.22, dcorr.py:250))], vararg=None) ['$142load_attr.21', '$148call_function_kw.24', '$const144.22']
    $const152.26 = const(int, 2)             ['$const152.26']
    $154binary_subtract.27 = n - $const152.26 ['$154binary_subtract.27', '$const152.26', 'n']
    $156binary_true_divide.28 = $148call_function_kw.24 / $154binary_subtract.27 ['$148call_function_kw.24', '$154binary_subtract.27', '$156binary_true_divide.28']
    $160call_method.30 = call $138load_method.19($156binary_true_divide.28, n, func=$138load_method.19, args=[Var($156binary_true_divide.28, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$138load_method.19', '$156binary_true_divide.28', '$160call_method.30', 'n']
    $162load_method.31 = getattr(value=$160call_method.30, attr=reshape) ['$160call_method.30', '$162load_method.31']
    $const164.32 = const(int, -1)            ['$const164.32']
    $168call_method.34 = call $162load_method.31($const164.32, n, func=$162load_method.31, args=[Var($const164.32, dcorr.py:250), Var(n, dcorr.py:236)], kws=(), vararg=None) ['$162load_method.31', '$168call_method.34', '$const164.32', 'n']
    $170binary_add.35 = $134load_attr.17 + $168call_method.34 ['$134load_attr.17', '$168call_method.34', '$170binary_add.35']
    $174load_method.37 = getattr(value=distx, attr=sum) ['$174load_method.37', 'distx']
    $176call_method.38 = call $174load_method.37(func=$174load_method.37, args=[], kws=(), vararg=None) ['$174load_method.37', '$176call_method.38']
    $const180.40 = const(int, 1)             ['$const180.40']
    $182binary_subtract.41 = n - $const180.40 ['$182binary_subtract.41', '$const180.40', 'n']
    $const186.43 = const(int, 2)             ['$const186.43']
    $188binary_subtract.44 = n - $const186.43 ['$188binary_subtract.44', '$const186.43', 'n']
    $190binary_multiply.45 = $182binary_subtract.41 * $188binary_subtract.44 ['$182binary_subtract.41', '$188binary_subtract.44', '$190binary_multiply.45']
    $192binary_true_divide.46 = $176call_method.38 / $190binary_multiply.45 ['$176call_method.38', '$190binary_multiply.45', '$192binary_true_divide.46']
    $194binary_subtract.47 = $170binary_add.35 - $192binary_true_divide.46 ['$170binary_add.35', '$192binary_true_divide.46', '$194binary_subtract.47']
    exp_distx.1 = $194binary_subtract.47     ['$194binary_subtract.47', 'exp_distx.1']
    jump 198                                 []
label 198:
    exp_distx.2 = phi(incoming_values=[Var(exp_distx, dcorr.py:244), Var(exp_distx.1, dcorr.py:250)], incoming_blocks=[16, 100]) ['exp_distx', 'exp_distx.1', 'exp_distx.2']
    $202binary_subtract.2 = distx - exp_distx.2 ['$202binary_subtract.2', 'distx', 'exp_distx.2']
    cent_distx = $202binary_subtract.2       ['$202binary_subtract.2', 'cent_distx']
    branch bias, 222, 210                    ['bias']
label 210:
    $210load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$210load_global.0']
    $212load_method.1 = getattr(value=$210load_global.0, attr=fill_diagonal) ['$210load_global.0', '$212load_method.1']
    $const216.3 = const(int, 0)              ['$const216.3']
    $218call_method.4 = call $212load_method.1(cent_distx, $const216.3, func=$212load_method.1, args=[Var(cent_distx, dcorr.py:252), Var($const216.3, dcorr.py:254)], kws=(), vararg=None) ['$212load_method.1', '$218call_method.4', '$const216.3', 'cent_distx']
    jump 222                                 []
label 222:
    $224return_value.1 = cast(value=cent_distx) ['$224return_value.1', 'cent_distx']
    return $224return_value.1                ['$224return_value.1']

2020-06-11 12:07:02,209:DEBUG:================================================================================
2020-06-11 12:07:02,214:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1972)
           2	LOAD_FAST(arg=1, lineno=1972)
           4	LOAD_CONST(arg=1, lineno=1972)
           6	COMPARE_OP(arg=0, lineno=1972)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=1972)
          10	LOAD_GLOBAL(arg=0, lineno=1973)
          12	LOAD_CONST(arg=2, lineno=1973)
          14	CALL_FUNCTION(arg=1, lineno=1973)
          16	RAISE_VARARGS(arg=1, lineno=1973)
>         18	LOAD_GLOBAL(arg=1, lineno=1974)
          20	LOAD_METHOD(arg=2, lineno=1974)
          22	LOAD_FAST(arg=0, lineno=1974)
          24	CALL_METHOD(arg=1, lineno=1974)
          26	STORE_FAST(arg=2, lineno=1974)
          28	LOAD_FAST(arg=2, lineno=1975)
          30	LOAD_METHOD(arg=3, lineno=1975)
          32	CALL_METHOD(arg=0, lineno=1975)
          34	STORE_FAST(arg=3, lineno=1975)
          36	LOAD_FAST(arg=3, lineno=1976)
          38	LOAD_ATTR(arg=4, lineno=1976)
          40	LOAD_CONST(arg=1, lineno=1976)
          42	BINARY_SUBSCR(arg=None, lineno=1976)
          44	STORE_FAST(arg=4, lineno=1976)
          46	LOAD_FAST(arg=1, lineno=1977)
          48	LOAD_CONST(arg=1, lineno=1977)
          50	COMPARE_OP(arg=2, lineno=1977)
          52	POP_JUMP_IF_FALSE(arg=70, lineno=1977)
          54	LOAD_GLOBAL(arg=1, lineno=1978)
          56	LOAD_ATTR(arg=5, lineno=1978)
          58	LOAD_CONST(arg=1, lineno=1978)
          60	LOAD_FAST(arg=2, lineno=1978)
          62	LOAD_ATTR(arg=6, lineno=1978)
          64	LOAD_CONST(arg=3, lineno=1978)
          66	CALL_FUNCTION_KW(arg=2, lineno=1978)
          68	RETURN_VALUE(arg=None, lineno=1978)
>         70	LOAD_FAST(arg=1, lineno=1979)
          72	LOAD_CONST(arg=4, lineno=1979)
          74	COMPARE_OP(arg=2, lineno=1979)
          76	POP_JUMP_IF_FALSE(arg=88, lineno=1979)
          78	LOAD_GLOBAL(arg=1, lineno=1980)
          80	LOAD_METHOD(arg=7, lineno=1980)
          82	LOAD_FAST(arg=3, lineno=1980)
          84	CALL_METHOD(arg=1, lineno=1980)
          86	RETURN_VALUE(arg=None, lineno=1980)
>         88	LOAD_GLOBAL(arg=1, lineno=1982)
          90	LOAD_ATTR(arg=5, lineno=1982)
          92	LOAD_FAST(arg=4, lineno=1982)
          94	LOAD_FAST(arg=1, lineno=1982)
          96	BINARY_MULTIPLY(arg=None, lineno=1982)
          98	LOAD_FAST(arg=2, lineno=1982)
         100	LOAD_ATTR(arg=6, lineno=1982)
         102	LOAD_CONST(arg=3, lineno=1982)
         104	CALL_FUNCTION_KW(arg=2, lineno=1982)
         106	STORE_FAST(arg=5, lineno=1982)
         108	SETUP_LOOP(arg=44, lineno=1983)
         110	LOAD_GLOBAL(arg=8, lineno=1983)
         112	LOAD_FAST(arg=4, lineno=1983)
         114	CALL_FUNCTION(arg=1, lineno=1983)
         116	GET_ITER(arg=None, lineno=1983)
>        118	FOR_ITER(arg=32, lineno=1983)
         120	STORE_FAST(arg=6, lineno=1983)
         122	LOAD_FAST(arg=3, lineno=1984)
         124	LOAD_FAST(arg=6, lineno=1984)
         126	BINARY_SUBSCR(arg=None, lineno=1984)
         128	LOAD_FAST(arg=5, lineno=1984)
         130	LOAD_FAST(arg=6, lineno=1984)
         132	LOAD_FAST(arg=1, lineno=1984)
         134	BINARY_MULTIPLY(arg=None, lineno=1984)
         136	LOAD_FAST(arg=6, lineno=1984)
         138	LOAD_CONST(arg=4, lineno=1984)
         140	BINARY_ADD(arg=None, lineno=1984)
         142	LOAD_FAST(arg=1, lineno=1984)
         144	BINARY_MULTIPLY(arg=None, lineno=1984)
         146	BUILD_SLICE(arg=2, lineno=1984)
         148	STORE_SUBSCR(arg=None, lineno=1984)
         150	JUMP_ABSOLUTE(arg=118, lineno=1984)
>        152	POP_BLOCK(arg=None, lineno=1984)
>        154	LOAD_FAST(arg=5, lineno=1985)
         156	RETURN_VALUE(arg=None, lineno=1985)
         158	LOAD_CONST(arg=0, lineno=1985)
         160	RETURN_VALUE(arg=None, lineno=1985)
2020-06-11 12:07:02,214:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,214:DEBUG:stack: []
2020-06-11 12:07:02,214:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1972)
2020-06-11 12:07:02,214:DEBUG:stack []
2020-06-11 12:07:02,214:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1972)
2020-06-11 12:07:02,214:DEBUG:stack []
2020-06-11 12:07:02,214:DEBUG:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1972)
2020-06-11 12:07:02,214:DEBUG:stack ['$repeats2.0']
2020-06-11 12:07:02,215:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=1972)
2020-06-11 12:07:02,215:DEBUG:stack ['$repeats2.0', '$const4.1']
2020-06-11 12:07:02,215:DEBUG:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=1972)
2020-06-11 12:07:02,215:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:07:02,215:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,215:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
2020-06-11 12:07:02,215:DEBUG:stack: []
2020-06-11 12:07:02,215:DEBUG:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1973)
2020-06-11 12:07:02,215:DEBUG:stack []
2020-06-11 12:07:02,215:DEBUG:dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=1973)
2020-06-11 12:07:02,215:DEBUG:stack ['$10load_global.0']
2020-06-11 12:07:02,215:DEBUG:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1973)
2020-06-11 12:07:02,215:DEBUG:stack ['$10load_global.0', '$const12.1']
2020-06-11 12:07:02,215:DEBUG:dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=1973)
2020-06-11 12:07:02,215:DEBUG:stack ['$14call_function.2']
2020-06-11 12:07:02,215:DEBUG:end state. edges=[]
2020-06-11 12:07:02,215:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=0)])
2020-06-11 12:07:02,215:DEBUG:stack: []
2020-06-11 12:07:02,215:DEBUG:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=1974)
2020-06-11 12:07:02,215:DEBUG:stack []
2020-06-11 12:07:02,215:DEBUG:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=1974)
2020-06-11 12:07:02,215:DEBUG:stack ['$18load_global.0']
2020-06-11 12:07:02,215:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1974)
2020-06-11 12:07:02,215:DEBUG:stack ['$20load_method.1']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=1974)
2020-06-11 12:07:02,216:DEBUG:stack ['$20load_method.1', '$a22.2']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=26, inst=STORE_FAST(arg=2, lineno=1974)
2020-06-11 12:07:02,216:DEBUG:stack ['$24call_method.3']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=1975)
2020-06-11 12:07:02,216:DEBUG:stack []
2020-06-11 12:07:02,216:DEBUG:dispatch pc=30, inst=LOAD_METHOD(arg=3, lineno=1975)
2020-06-11 12:07:02,216:DEBUG:stack ['$asa28.4']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=32, inst=CALL_METHOD(arg=0, lineno=1975)
2020-06-11 12:07:02,216:DEBUG:stack ['$30load_method.5']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=34, inst=STORE_FAST(arg=3, lineno=1975)
2020-06-11 12:07:02,216:DEBUG:stack ['$32call_method.6']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=1976)
2020-06-11 12:07:02,216:DEBUG:stack []
2020-06-11 12:07:02,216:DEBUG:dispatch pc=38, inst=LOAD_ATTR(arg=4, lineno=1976)
2020-06-11 12:07:02,216:DEBUG:stack ['$aravel36.7']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1976)
2020-06-11 12:07:02,216:DEBUG:stack ['$38load_attr.8']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=1976)
2020-06-11 12:07:02,216:DEBUG:stack ['$38load_attr.8', '$const40.9']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=44, inst=STORE_FAST(arg=4, lineno=1976)
2020-06-11 12:07:02,216:DEBUG:stack ['$42binary_subscr.10']
2020-06-11 12:07:02,216:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=1977)
2020-06-11 12:07:02,217:DEBUG:stack []
2020-06-11 12:07:02,217:DEBUG:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1977)
2020-06-11 12:07:02,217:DEBUG:stack ['$repeats46.11']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=50, inst=COMPARE_OP(arg=2, lineno=1977)
2020-06-11 12:07:02,217:DEBUG:stack ['$repeats46.11', '$const48.12']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=70, lineno=1977)
2020-06-11 12:07:02,217:DEBUG:stack ['$50compare_op.13']
2020-06-11 12:07:02,217:DEBUG:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,217:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:07:02,217:DEBUG:stack: []
2020-06-11 12:07:02,217:DEBUG:dispatch pc=54, inst=LOAD_GLOBAL(arg=1, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack []
2020-06-11 12:07:02,217:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=5, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$54load_global.0']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$56load_attr.1']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$56load_attr.1', '$const58.2']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=62, inst=LOAD_ATTR(arg=6, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$56load_attr.1', '$const58.2', '$asa60.3']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=3, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$56load_attr.1', '$const58.2', '$62load_attr.4']
2020-06-11 12:07:02,217:DEBUG:dispatch pc=66, inst=CALL_FUNCTION_KW(arg=2, lineno=1978)
2020-06-11 12:07:02,217:DEBUG:stack ['$56load_attr.1', '$const58.2', '$62load_attr.4', '$const64.5']
2020-06-11 12:07:02,218:DEBUG:dispatch pc=68, inst=RETURN_VALUE(arg=None, lineno=1978)
2020-06-11 12:07:02,218:DEBUG:stack ['$66call_function_kw.6']
2020-06-11 12:07:02,218:DEBUG:end state. edges=[]
2020-06-11 12:07:02,218:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:07:02,218:DEBUG:stack: []
2020-06-11 12:07:02,218:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=1, lineno=1979)
2020-06-11 12:07:02,218:DEBUG:stack []
2020-06-11 12:07:02,218:DEBUG:dispatch pc=72, inst=LOAD_CONST(arg=4, lineno=1979)
2020-06-11 12:07:02,218:DEBUG:stack ['$repeats70.0']
2020-06-11 12:07:02,218:DEBUG:dispatch pc=74, inst=COMPARE_OP(arg=2, lineno=1979)
2020-06-11 12:07:02,218:DEBUG:stack ['$repeats70.0', '$const72.1']
2020-06-11 12:07:02,218:DEBUG:dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1979)
2020-06-11 12:07:02,218:DEBUG:stack ['$74compare_op.2']
2020-06-11 12:07:02,218:DEBUG:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,218:DEBUG:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:07:02,218:DEBUG:stack: []
2020-06-11 12:07:02,218:DEBUG:dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1980)
2020-06-11 12:07:02,218:DEBUG:stack []
2020-06-11 12:07:02,218:DEBUG:dispatch pc=80, inst=LOAD_METHOD(arg=7, lineno=1980)
2020-06-11 12:07:02,218:DEBUG:stack ['$78load_global.0']
2020-06-11 12:07:02,218:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=1980)
2020-06-11 12:07:02,218:DEBUG:stack ['$80load_method.1']
2020-06-11 12:07:02,218:DEBUG:dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1980)
2020-06-11 12:07:02,219:DEBUG:stack ['$80load_method.1', '$aravel82.2']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=1980)
2020-06-11 12:07:02,219:DEBUG:stack ['$84call_method.3']
2020-06-11 12:07:02,219:DEBUG:end state. edges=[]
2020-06-11 12:07:02,219:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:07:02,219:DEBUG:stack: []
2020-06-11 12:07:02,219:DEBUG:dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack []
2020-06-11 12:07:02,219:DEBUG:dispatch pc=90, inst=LOAD_ATTR(arg=5, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$88load_global.0']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$n92.2']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=96, inst=BINARY_MULTIPLY(arg=None, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$n92.2', '$repeats94.3']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=98, inst=LOAD_FAST(arg=2, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=100, inst=LOAD_ATTR(arg=6, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$asa98.5']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=102, inst=LOAD_CONST(arg=3, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$100load_attr.6']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=104, inst=CALL_FUNCTION_KW(arg=2, lineno=1982)
2020-06-11 12:07:02,219:DEBUG:stack ['$90load_attr.1', '$96binary_multiply.4', '$100load_attr.6', '$const102.7']
2020-06-11 12:07:02,219:DEBUG:dispatch pc=106, inst=STORE_FAST(arg=5, lineno=1982)
2020-06-11 12:07:02,220:DEBUG:stack ['$104call_function_kw.8']
2020-06-11 12:07:02,220:DEBUG:end state. edges=[Edge(pc=108, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,220:DEBUG:pending: deque([State(pc_initial=108 nstack_initial=0)])
2020-06-11 12:07:02,220:DEBUG:stack: []
2020-06-11 12:07:02,220:DEBUG:dispatch pc=108, inst=SETUP_LOOP(arg=44, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack []
2020-06-11 12:07:02,220:DEBUG:dispatch pc=110, inst=LOAD_GLOBAL(arg=8, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack []
2020-06-11 12:07:02,220:DEBUG:dispatch pc=112, inst=LOAD_FAST(arg=4, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack ['$110load_global.0']
2020-06-11 12:07:02,220:DEBUG:dispatch pc=114, inst=CALL_FUNCTION(arg=1, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack ['$110load_global.0', '$n112.1']
2020-06-11 12:07:02,220:DEBUG:dispatch pc=116, inst=GET_ITER(arg=None, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack ['$114call_function.2']
2020-06-11 12:07:02,220:DEBUG:end state. edges=[Edge(pc=118, stack=('$116get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,220:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:07:02,220:DEBUG:stack: ['$phi118.0']
2020-06-11 12:07:02,220:DEBUG:dispatch pc=118, inst=FOR_ITER(arg=32, lineno=1983)
2020-06-11 12:07:02,220:DEBUG:stack ['$phi118.0']
2020-06-11 12:07:02,220:DEBUG:end state. edges=[Edge(pc=152, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi118.0', '$118for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,220:DEBUG:pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=120 nstack_initial=2)])
2020-06-11 12:07:02,221:DEBUG:stack: []
2020-06-11 12:07:02,221:DEBUG:dispatch pc=152, inst=POP_BLOCK(arg=None, lineno=1984)
2020-06-11 12:07:02,221:DEBUG:stack []
2020-06-11 12:07:02,221:DEBUG:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,221:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=2), State(pc_initial=154 nstack_initial=0)])
2020-06-11 12:07:02,221:DEBUG:stack: ['$phi120.0', '$phi120.1']
2020-06-11 12:07:02,221:DEBUG:dispatch pc=120, inst=STORE_FAST(arg=6, lineno=1983)
2020-06-11 12:07:02,221:DEBUG:stack ['$phi120.0', '$phi120.1']
2020-06-11 12:07:02,221:DEBUG:dispatch pc=122, inst=LOAD_FAST(arg=3, lineno=1984)
2020-06-11 12:07:02,221:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:02,221:DEBUG:dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:07:02,221:DEBUG:stack ['$phi120.0', '$aravel122.2']
2020-06-11 12:07:02,221:DEBUG:dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=1984)
2020-06-11 12:07:02,221:DEBUG:stack ['$phi120.0', '$aravel122.2', '$i124.3']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=5, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$i130.6']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$i130.6', '$repeats132.7']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=138, inst=LOAD_CONST(arg=4, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$i136.9']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=140, inst=BINARY_ADD(arg=None, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$i136.9', '$const138.10']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=1, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$140binary_add.11']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=144, inst=BINARY_MULTIPLY(arg=None, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$140binary_add.11', '$repeats142.12']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$134binary_multiply.8', '$144binary_multiply.13']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=148, inst=STORE_SUBSCR(arg=None, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0', '$126binary_subscr.4', '$to_return128.5', '$146build_slice.15']
2020-06-11 12:07:02,222:DEBUG:dispatch pc=150, inst=JUMP_ABSOLUTE(arg=118, lineno=1984)
2020-06-11 12:07:02,222:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:02,222:DEBUG:end state. edges=[Edge(pc=118, stack=('$phi120.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,223:DEBUG:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:07:02,223:DEBUG:stack: []
2020-06-11 12:07:02,223:DEBUG:dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1985)
2020-06-11 12:07:02,223:DEBUG:stack []
2020-06-11 12:07:02,223:DEBUG:dispatch pc=156, inst=RETURN_VALUE(arg=None, lineno=1985)
2020-06-11 12:07:02,223:DEBUG:stack ['$to_return154.0']
2020-06-11 12:07:02,223:DEBUG:end state. edges=[]
2020-06-11 12:07:02,223:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=1)])
2020-06-11 12:07:02,223:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,223:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=1): {'$phi118.0'},
             State(pc_initial=120 nstack_initial=2): {'$phi120.1'},
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set()})
2020-06-11 12:07:02,223:DEBUG:defmap: {'$phi118.0': State(pc_initial=108 nstack_initial=0),
 '$phi120.1': State(pc_initial=118 nstack_initial=1)}
2020-06-11 12:07:02,223:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0)),
                           ('$phi120.0',
                            State(pc_initial=120 nstack_initial=2))},
             '$phi120.0': {('$phi118.0',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:07:02,224:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0)),
                           ('$phi118.0',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:07:02,224:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:07:02,224:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.0': {('$116get_iter.3',
                            State(pc_initial=108 nstack_initial=0))},
             '$phi120.1': {('$118for_iter.2',
                            State(pc_initial=118 nstack_initial=1))}})
2020-06-11 12:07:02,224:DEBUG:keep phismap: {'$phi118.0': {('$116get_iter.3', State(pc_initial=108 nstack_initial=0))},
 '$phi120.1': {('$118for_iter.2', State(pc_initial=118 nstack_initial=1))}}
2020-06-11 12:07:02,224:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=108 nstack_initial=0): {'$phi118.0': '$116get_iter.3'},
             State(pc_initial=118 nstack_initial=1): {'$phi120.1': '$118for_iter.2'}})
2020-06-11 12:07:02,224:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,224:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$repeats2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$repeats2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'item': '$18load_global.0', 'res': '$20load_method.1'}), (22, {'res': '$a22.2'}), (24, {'func': '$20load_method.1', 'args': ['$a22.2'], 'res': '$24call_method.3'}), (26, {'value': '$24call_method.3'}), (28, {'res': '$asa28.4'}), (30, {'item': '$asa28.4', 'res': '$30load_method.5'}), (32, {'func': '$30load_method.5', 'args': [], 'res': '$32call_method.6'}), (34, {'value': '$32call_method.6'}), (36, {'res': '$aravel36.7'}), (38, {'item': '$aravel36.7', 'res': '$38load_attr.8'}), (40, {'res': '$const40.9'}), (42, {'index': '$const40.9', 'target': '$38load_attr.8', 'res': '$42binary_subscr.10'}), (44, {'value': '$42binary_subscr.10'}), (46, {'res': '$repeats46.11'}), (48, {'res': '$const48.12'}), (50, {'lhs': '$repeats46.11', 'rhs': '$const48.12', 'res': '$50compare_op.13'}), (52, {'pred': '$50compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 70: ()})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'item': '$54load_global.0', 'res': '$56load_attr.1'}), (58, {'res': '$const58.2'}), (60, {'res': '$asa60.3'}), (62, {'item': '$asa60.3', 'res': '$62load_attr.4'}), (64, {'res': '$const64.5'}), (66, {'func': '$56load_attr.1', 'args': ['$const58.2', '$62load_attr.4'], 'names': '$const64.5', 'res': '$66call_function_kw.6'}), (68, {'retval': '$66call_function_kw.6', 'castval': '$68return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$repeats70.0'}), (72, {'res': '$const72.1'}), (74, {'lhs': '$repeats70.0', 'rhs': '$const72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 88: ()})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'item': '$78load_global.0', 'res': '$80load_method.1'}), (82, {'res': '$aravel82.2'}), (84, {'func': '$80load_method.1', 'args': ['$aravel82.2'], 'res': '$84call_method.3'}), (86, {'retval': '$84call_method.3', 'castval': '$86return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$88load_global.0'}), (90, {'item': '$88load_global.0', 'res': '$90load_attr.1'}), (92, {'res': '$n92.2'}), (94, {'res': '$repeats94.3'}), (96, {'lhs': '$n92.2', 'rhs': '$repeats94.3', 'res': '$96binary_multiply.4'}), (98, {'res': '$asa98.5'}), (100, {'item': '$asa98.5', 'res': '$100load_attr.6'}), (102, {'res': '$const102.7'}), (104, {'func': '$90load_attr.1', 'args': ['$96binary_multiply.4', '$100load_attr.6'], 'names': '$const102.7', 'res': '$104call_function_kw.8'}), (106, {'value': '$104call_function_kw.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ()})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=108 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$110load_global.0'}), (112, {'res': '$n112.1'}), (114, {'func': '$110load_global.0', 'args': ['$n112.1'], 'res': '$114call_function.2'}), (116, {'value': '$114call_function.2', 'res': '$116get_iter.3'})), outgoing_phis={'$phi118.0': '$116get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: ('$116get_iter.3',)})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=118 nstack_initial=1):
AdaptBlockInfo(insts=((118, {'iterator': '$phi118.0', 'pair': '$118for_iter.1', 'indval': '$118for_iter.2', 'pred': '$118for_iter.3'}),), outgoing_phis={'$phi120.1': '$118for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={152: (), 120: ('$phi118.0', '$118for_iter.2')})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=120 nstack_initial=2):
AdaptBlockInfo(insts=((120, {'value': '$phi120.1'}), (122, {'res': '$aravel122.2'}), (124, {'res': '$i124.3'}), (126, {'index': '$i124.3', 'target': '$aravel122.2', 'res': '$126binary_subscr.4'}), (128, {'res': '$to_return128.5'}), (130, {'res': '$i130.6'}), (132, {'res': '$repeats132.7'}), (134, {'lhs': '$i130.6', 'rhs': '$repeats132.7', 'res': '$134binary_multiply.8'}), (136, {'res': '$i136.9'}), (138, {'res': '$const138.10'}), (140, {'lhs': '$i136.9', 'rhs': '$const138.10', 'res': '$140binary_add.11'}), (142, {'res': '$repeats142.12'}), (144, {'lhs': '$140binary_add.11', 'rhs': '$repeats142.12', 'res': '$144binary_multiply.13'}), (146, {'start': '$134binary_multiply.8', 'stop': '$144binary_multiply.13', 'step': None, 'res': '$146build_slice.15', 'slicevar': '$146build_slice.14'}), (148, {'target': '$to_return128.5', 'index': '$146build_slice.15', 'value': '$126binary_subscr.4'}), (150, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={118: ('$phi120.0',)})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 154, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={154: ()})
2020-06-11 12:07:02,225:DEBUG:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$to_return154.0'}), (156, {'retval': '$to_return154.0', 'castval': '$156return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,227:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = getitem(value=$38load_attr.8, index=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:07:02,238:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,239:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise <class 'ValueError'>('negative dimensions are not allowed') []
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:07:02,239:DEBUG:================================================================================
2020-06-11 12:07:02,239:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,239:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,239:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:02,239:DEBUG:on stmt: repeats = arg(1, name=repeats)
2020-06-11 12:07:02,239:DEBUG:on stmt: $const4.1 = const(int, 0)
2020-06-11 12:07:02,239:DEBUG:on stmt: $6compare_op.2 = repeats < $const4.1
2020-06-11 12:07:02,239:DEBUG:on stmt: branch $6compare_op.2, 10, 18
2020-06-11 12:07:02,239:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:07:02,239:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,239:DEBUG:on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,239:DEBUG:on stmt: $const12.1 = const(str, negative dimensions are not allowed)
2020-06-11 12:07:02,239:DEBUG:on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None)
2020-06-11 12:07:02,239:DEBUG:on stmt: raise <class 'ValueError'>('negative dimensions are not allowed')
2020-06-11 12:07:02,239:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:07:02,239:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,239:DEBUG:on stmt: $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,239:DEBUG:on stmt: $20load_method.1 = getattr(value=$18load_global.0, attr=asarray)
2020-06-11 12:07:02,239:DEBUG:on stmt: $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None)
2020-06-11 12:07:02,239:DEBUG:on stmt: asa = $24call_method.3
2020-06-11 12:07:02,239:DEBUG:on stmt: $30load_method.5 = getattr(value=asa, attr=ravel)
2020-06-11 12:07:02,239:DEBUG:on stmt: $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,240:DEBUG:on stmt: aravel = $32call_method.6
2020-06-11 12:07:02,240:DEBUG:on stmt: $38load_attr.8 = getattr(value=aravel, attr=shape)
2020-06-11 12:07:02,240:DEBUG:on stmt: $const40.9 = const(int, 0)
2020-06-11 12:07:02,240:DEBUG:on stmt: $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9)
2020-06-11 12:07:02,240:DEBUG:on stmt: n = $42binary_subscr.10
2020-06-11 12:07:02,240:DEBUG:on stmt: $const48.12 = const(int, 0)
2020-06-11 12:07:02,240:DEBUG:on stmt: $50compare_op.13 = repeats == $const48.12
2020-06-11 12:07:02,240:DEBUG:on stmt: branch $50compare_op.13, 54, 70
2020-06-11 12:07:02,240:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:07:02,240:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,240:DEBUG:on stmt: $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,240:DEBUG:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=empty)
2020-06-11 12:07:02,240:DEBUG:on stmt: $const58.2 = const(int, 0)
2020-06-11 12:07:02,240:DEBUG:on stmt: $62load_attr.4 = getattr(value=asa, attr=dtype)
2020-06-11 12:07:02,240:DEBUG:on stmt: $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None)
2020-06-11 12:07:02,240:DEBUG:on stmt: $68return_value.7 = cast(value=$66call_function_kw.6)
2020-06-11 12:07:02,240:DEBUG:on stmt: return $68return_value.7
2020-06-11 12:07:02,240:DEBUG:==== SSA block analysis pass on 70
2020-06-11 12:07:02,240:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,240:DEBUG:on stmt: $const72.1 = const(int, 1)
2020-06-11 12:07:02,240:DEBUG:on stmt: $74compare_op.2 = repeats == $const72.1
2020-06-11 12:07:02,240:DEBUG:on stmt: branch $74compare_op.2, 78, 88
2020-06-11 12:07:02,240:DEBUG:==== SSA block analysis pass on 78
2020-06-11 12:07:02,240:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,241:DEBUG:on stmt: $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,241:DEBUG:on stmt: $80load_method.1 = getattr(value=$78load_global.0, attr=copy)
2020-06-11 12:07:02,241:DEBUG:on stmt: $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None)
2020-06-11 12:07:02,241:DEBUG:on stmt: $86return_value.4 = cast(value=$84call_method.3)
2020-06-11 12:07:02,241:DEBUG:on stmt: return $86return_value.4
2020-06-11 12:07:02,241:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:07:02,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,241:DEBUG:on stmt: $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,241:DEBUG:on stmt: $90load_attr.1 = getattr(value=$88load_global.0, attr=empty)
2020-06-11 12:07:02,241:DEBUG:on stmt: $96binary_multiply.4 = n * repeats
2020-06-11 12:07:02,241:DEBUG:on stmt: $100load_attr.6 = getattr(value=asa, attr=dtype)
2020-06-11 12:07:02,241:DEBUG:on stmt: $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None)
2020-06-11 12:07:02,241:DEBUG:on stmt: to_return = $104call_function_kw.8
2020-06-11 12:07:02,241:DEBUG:on stmt: jump 108
2020-06-11 12:07:02,241:DEBUG:==== SSA block analysis pass on 108
2020-06-11 12:07:02,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,241:DEBUG:on stmt: $110load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:02,241:DEBUG:on stmt: $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None)
2020-06-11 12:07:02,241:DEBUG:on stmt: $116get_iter.3 = getiter(value=$114call_function.2)
2020-06-11 12:07:02,241:DEBUG:on stmt: $phi118.0 = $116get_iter.3
2020-06-11 12:07:02,241:DEBUG:on stmt: jump 118
2020-06-11 12:07:02,241:DEBUG:==== SSA block analysis pass on 118
2020-06-11 12:07:02,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,241:DEBUG:on stmt: $118for_iter.1 = iternext(value=$phi118.0)
2020-06-11 12:07:02,241:DEBUG:on stmt: $118for_iter.2 = pair_first(value=$118for_iter.1)
2020-06-11 12:07:02,241:DEBUG:on stmt: $118for_iter.3 = pair_second(value=$118for_iter.1)
2020-06-11 12:07:02,242:DEBUG:on stmt: $phi120.1 = $118for_iter.2
2020-06-11 12:07:02,242:DEBUG:on stmt: branch $118for_iter.3, 120, 152
2020-06-11 12:07:02,242:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:07:02,242:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,242:DEBUG:on stmt: i = $phi120.1
2020-06-11 12:07:02,242:DEBUG:on stmt: $126binary_subscr.4 = getitem(value=aravel, index=i)
2020-06-11 12:07:02,242:DEBUG:on stmt: $134binary_multiply.8 = i * repeats
2020-06-11 12:07:02,242:DEBUG:on stmt: $const138.10 = const(int, 1)
2020-06-11 12:07:02,242:DEBUG:on stmt: $140binary_add.11 = i + $const138.10
2020-06-11 12:07:02,242:DEBUG:on stmt: $144binary_multiply.13 = $140binary_add.11 * repeats
2020-06-11 12:07:02,242:DEBUG:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
2020-06-11 12:07:02,242:DEBUG:on stmt: $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None)
2020-06-11 12:07:02,242:DEBUG:on stmt: to_return[$146build_slice.15] = $126binary_subscr.4
2020-06-11 12:07:02,242:DEBUG:on stmt: jump 118
2020-06-11 12:07:02,242:DEBUG:==== SSA block analysis pass on 152
2020-06-11 12:07:02,242:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,242:DEBUG:on stmt: jump 154
2020-06-11 12:07:02,242:DEBUG:==== SSA block analysis pass on 154
2020-06-11 12:07:02,242:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545e9a90>
2020-06-11 12:07:02,242:DEBUG:on stmt: $156return_value.1 = cast(value=to_return)
2020-06-11 12:07:02,243:DEBUG:on stmt: return $156return_value.1
2020-06-11 12:07:02,243:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_attr.6': [<numba.core.ir.Assign object at 0x7fc4545e1c50>],
             '$104call_function_kw.8': [<numba.core.ir.Assign object at 0x7fc4545e1fd0>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x7fc4545d3750>],
             '$110load_global.0': [<numba.core.ir.Assign object at 0x7fc4545e5110>],
             '$114call_function.2': [<numba.core.ir.Assign object at 0x7fc4545e5310>],
             '$116get_iter.3': [<numba.core.ir.Assign object at 0x7fc4545e5410>],
             '$118for_iter.1': [<numba.core.ir.Assign object at 0x7fc4545e5690>],
             '$118for_iter.2': [<numba.core.ir.Assign object at 0x7fc4545e5750>],
             '$118for_iter.3': [<numba.core.ir.Assign object at 0x7fc4545e5810>],
             '$126binary_subscr.4': [<numba.core.ir.Assign object at 0x7fc4545e5c90>],
             '$134binary_multiply.8': [<numba.core.ir.Assign object at 0x7fc4545e9050>],
             '$140binary_add.11': [<numba.core.ir.Assign object at 0x7fc4545e9310>],
             '$144binary_multiply.13': [<numba.core.ir.Assign object at 0x7fc4545e94d0>],
             '$146build_slice.14': [<numba.core.ir.Assign object at 0x7fc4545e9610>],
             '$146build_slice.15': [<numba.core.ir.Assign object at 0x7fc4545e96d0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7fc4545d3a90>],
             '$156return_value.1': [<numba.core.ir.Assign object at 0x7fc4545e9950>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x7fc4545d3c50>],
             '$20load_method.1': [<numba.core.ir.Assign object at 0x7fc454642f90>],
             '$24call_method.3': [<numba.core.ir.Assign object at 0x7fc45467ad10>],
             '$30load_method.5': [<numba.core.ir.Assign object at 0x7fc4546c4ed0>],
             '$32call_method.6': [<numba.core.ir.Assign object at 0x7fc4546c4f50>],
             '$38load_attr.8': [<numba.core.ir.Assign object at 0x7fc4545d3dd0>],
             '$42binary_subscr.10': [<numba.core.ir.Assign object at 0x7fc4545e9d50>],
             '$50compare_op.13': [<numba.core.ir.Assign object at 0x7fc4545de390>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x7fc4545de490>],
             '$56load_attr.1': [<numba.core.ir.Assign object at 0x7fc4545de590>],
             '$62load_attr.4': [<numba.core.ir.Assign object at 0x7fc4545de850>],
             '$66call_function_kw.6': [<numba.core.ir.Assign object at 0x7fc4545deb90>],
             '$68return_value.7': [<numba.core.ir.Assign object at 0x7fc4545dec10>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc4545d32d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fc4545def50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fc4545e1150>],
             '$80load_method.1': [<numba.core.ir.Assign object at 0x7fc4545e1210>],
             '$84call_method.3': [<numba.core.ir.Assign object at 0x7fc4545e1410>],
             '$86return_value.4': [<numba.core.ir.Assign object at 0x7fc4545e14d0>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x7fc4545e1690>],
             '$90load_attr.1': [<numba.core.ir.Assign object at 0x7fc4545e17d0>],
             '$96binary_multiply.4': [<numba.core.ir.Assign object at 0x7fc4545e1a50>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7fc4545d3950>],
             '$const138.10': [<numba.core.ir.Assign object at 0x7fc4545e91d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc4545d3890>],
             '$const40.9': [<numba.core.ir.Assign object at 0x7fc4545d3ed0>],
             '$const48.12': [<numba.core.ir.Assign object at 0x7fc4545de290>],
             '$const58.2': [<numba.core.ir.Assign object at 0x7fc4545de690>],
             '$const72.1': [<numba.core.ir.Assign object at 0x7fc4545dee50>],
             '$phi118.0': [<numba.core.ir.Assign object at 0x7fc4545e51d0>],
             '$phi120.1': [<numba.core.ir.Assign object at 0x7fc4545e55d0>],
             'a': [<numba.core.ir.Assign object at 0x7fc4545d31d0>],
             'aravel': [<numba.core.ir.Assign object at 0x7fc454685350>],
             'asa': [<numba.core.ir.Assign object at 0x7fc45467af50>],
             'i': [<numba.core.ir.Assign object at 0x7fc4545e5a10>],
             'n': [<numba.core.ir.Assign object at 0x7fc4545de0d0>],
             'repeats': [<numba.core.ir.Assign object at 0x7fc4545d3710>],
             'to_return': [<numba.core.ir.Assign object at 0x7fc4545e1e90>]})
2020-06-11 12:07:02,243:DEBUG:SSA violators set()
2020-06-11 12:07:02,243:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,244:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    repeats = arg(1, name=repeats)           ['repeats']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = repeats < $const4.1     ['$6compare_op.2', '$const4.1', 'repeats']
    branch $6compare_op.2, 10, 18            ['$6compare_op.2']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, negative dimensions are not allowed) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arrayobj.py:1973)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise <class 'ValueError'>('negative dimensions are not allowed') []
label 18:
    $18load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$18load_global.0']
    $20load_method.1 = getattr(value=$18load_global.0, attr=asarray) ['$18load_global.0', '$20load_method.1']
    $24call_method.3 = call $20load_method.1(a, func=$20load_method.1, args=[Var(a, arrayobj.py:1972)], kws=(), vararg=None) ['$20load_method.1', '$24call_method.3', 'a']
    asa = $24call_method.3                   ['$24call_method.3', 'asa']
    $30load_method.5 = getattr(value=asa, attr=ravel) ['$30load_method.5', 'asa']
    $32call_method.6 = call $30load_method.5(func=$30load_method.5, args=[], kws=(), vararg=None) ['$30load_method.5', '$32call_method.6']
    aravel = $32call_method.6                ['$32call_method.6', 'aravel']
    $38load_attr.8 = getattr(value=aravel, attr=shape) ['$38load_attr.8', 'aravel']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42binary_subscr.10 = static_getitem(value=$38load_attr.8, index=0, index_var=$const40.9) ['$38load_attr.8', '$42binary_subscr.10', '$const40.9']
    n = $42binary_subscr.10                  ['$42binary_subscr.10', 'n']
    $const48.12 = const(int, 0)              ['$const48.12']
    $50compare_op.13 = repeats == $const48.12 ['$50compare_op.13', '$const48.12', 'repeats']
    branch $50compare_op.13, 54, 70          ['$50compare_op.13']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=empty) ['$54load_global.0', '$56load_attr.1']
    $const58.2 = const(int, 0)               ['$const58.2']
    $62load_attr.4 = getattr(value=asa, attr=dtype) ['$62load_attr.4', 'asa']
    $66call_function_kw.6 = call $56load_attr.1($const58.2, func=$56load_attr.1, args=[Var($const58.2, arrayobj.py:1978)], kws=[('dtype', Var($62load_attr.4, arrayobj.py:1978))], vararg=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', '$const58.2']
    $68return_value.7 = cast(value=$66call_function_kw.6) ['$66call_function_kw.6', '$68return_value.7']
    return $68return_value.7                 ['$68return_value.7']
label 70:
    $const72.1 = const(int, 1)               ['$const72.1']
    $74compare_op.2 = repeats == $const72.1  ['$74compare_op.2', '$const72.1', 'repeats']
    branch $74compare_op.2, 78, 88           ['$74compare_op.2']
label 78:
    $78load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$78load_global.0']
    $80load_method.1 = getattr(value=$78load_global.0, attr=copy) ['$78load_global.0', '$80load_method.1']
    $84call_method.3 = call $80load_method.1(aravel, func=$80load_method.1, args=[Var(aravel, arrayobj.py:1975)], kws=(), vararg=None) ['$80load_method.1', '$84call_method.3', 'aravel']
    $86return_value.4 = cast(value=$84call_method.3) ['$84call_method.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$88load_global.0']
    $90load_attr.1 = getattr(value=$88load_global.0, attr=empty) ['$88load_global.0', '$90load_attr.1']
    $96binary_multiply.4 = n * repeats       ['$96binary_multiply.4', 'n', 'repeats']
    $100load_attr.6 = getattr(value=asa, attr=dtype) ['$100load_attr.6', 'asa']
    $104call_function_kw.8 = call $90load_attr.1($96binary_multiply.4, func=$90load_attr.1, args=[Var($96binary_multiply.4, arrayobj.py:1982)], kws=[('dtype', Var($100load_attr.6, arrayobj.py:1982))], vararg=None) ['$100load_attr.6', '$104call_function_kw.8', '$90load_attr.1', '$96binary_multiply.4']
    to_return = $104call_function_kw.8       ['$104call_function_kw.8', 'to_return']
    jump 108                                 []
label 108:
    $110load_global.0 = global(range: <class 'range'>) ['$110load_global.0']
    $114call_function.2 = call $110load_global.0(n, func=$110load_global.0, args=[Var(n, arrayobj.py:1976)], kws=(), vararg=None) ['$110load_global.0', '$114call_function.2', 'n']
    $116get_iter.3 = getiter(value=$114call_function.2) ['$114call_function.2', '$116get_iter.3']
    $phi118.0 = $116get_iter.3               ['$116get_iter.3', '$phi118.0']
    jump 118                                 []
label 118:
    $118for_iter.1 = iternext(value=$phi118.0) ['$118for_iter.1', '$phi118.0']
    $118for_iter.2 = pair_first(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.2']
    $118for_iter.3 = pair_second(value=$118for_iter.1) ['$118for_iter.1', '$118for_iter.3']
    $phi120.1 = $118for_iter.2               ['$118for_iter.2', '$phi120.1']
    branch $118for_iter.3, 120, 152          ['$118for_iter.3']
label 120:
    i = $phi120.1                            ['$phi120.1', 'i']
    $126binary_subscr.4 = getitem(value=aravel, index=i) ['$126binary_subscr.4', 'aravel', 'i']
    $134binary_multiply.8 = i * repeats      ['$134binary_multiply.8', 'i', 'repeats']
    $const138.10 = const(int, 1)             ['$const138.10']
    $140binary_add.11 = i + $const138.10     ['$140binary_add.11', '$const138.10', 'i']
    $144binary_multiply.13 = $140binary_add.11 * repeats ['$140binary_add.11', '$144binary_multiply.13', 'repeats']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($134binary_multiply.8, $144binary_multiply.13, func=$146build_slice.14, args=(Var($134binary_multiply.8, arrayobj.py:1984), Var($144binary_multiply.13, arrayobj.py:1984)), kws=(), vararg=None) ['$134binary_multiply.8', '$144binary_multiply.13', '$146build_slice.14', '$146build_slice.15']
    to_return[$146build_slice.15] = $126binary_subscr.4 ['$126binary_subscr.4', '$146build_slice.15', 'to_return']
    jump 118                                 []
label 152:
    jump 154                                 []
label 154:
    $156return_value.1 = cast(value=to_return) ['$156return_value.1', 'to_return']
    return $156return_value.1                ['$156return_value.1']

2020-06-11 12:07:02,244:DEBUG:================================================================================
2020-06-11 12:07:02,248:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3864)
           2	LOAD_FAST(arg=0, lineno=3864)
           4	RETURN_VALUE(arg=None, lineno=3864)
2020-06-11 12:07:02,248:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,248:DEBUG:stack: []
2020-06-11 12:07:02,248:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3864)
2020-06-11 12:07:02,248:DEBUG:stack []
2020-06-11 12:07:02,248:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3864)
2020-06-11 12:07:02,248:DEBUG:stack []
2020-06-11 12:07:02,248:DEBUG:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=3864)
2020-06-11 12:07:02,248:DEBUG:stack ['$a2.0']
2020-06-11 12:07:02,248:DEBUG:end state. edges=[]
2020-06-11 12:07:02,248:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,248:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,248:DEBUG:defmap: {}
2020-06-11 12:07:02,248:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,248:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,249:DEBUG:keep phismap: {}
2020-06-11 12:07:02,249:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,249:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,249:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,249:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:02,250:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,250:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:02,250:DEBUG:================================================================================
2020-06-11 12:07:02,250:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,250:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454577e10>
2020-06-11 12:07:02,250:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:02,250:DEBUG:on stmt: dtype = arg(1, name=dtype)
2020-06-11 12:07:02,250:DEBUG:on stmt: $4return_value.1 = cast(value=a)
2020-06-11 12:07:02,250:DEBUG:on stmt: return $4return_value.1
2020-06-11 12:07:02,251:DEBUG:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fc454568910>],
             'a': [<numba.core.ir.Assign object at 0x7fc454568650>],
             'dtype': [<numba.core.ir.Assign object at 0x7fc454568790>]})
2020-06-11 12:07:02,251:DEBUG:SSA violators set()
2020-06-11 12:07:02,251:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,251:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:02,251:DEBUG:================================================================================
2020-06-11 12:07:02,294:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1740)
           2	LOAD_FAST(arg=0, lineno=1740)
           4	LOAD_METHOD(arg=0, lineno=1740)
           6	LOAD_FAST(arg=0, lineno=1740)
           8	LOAD_ATTR(arg=1, lineno=1740)
          10	CALL_METHOD(arg=1, lineno=1740)
          12	RETURN_VALUE(arg=None, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,294:DEBUG:stack: []
2020-06-11 12:07:02,294:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:stack []
2020-06-11 12:07:02,294:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:stack []
2020-06-11 12:07:02,294:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:stack ['$ary2.0']
2020-06-11 12:07:02,294:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:stack ['$4load_method.1']
2020-06-11 12:07:02,294:DEBUG:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1740)
2020-06-11 12:07:02,294:DEBUG:stack ['$4load_method.1', '$ary6.2']
2020-06-11 12:07:02,295:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1740)
2020-06-11 12:07:02,295:DEBUG:stack ['$4load_method.1', '$8load_attr.3']
2020-06-11 12:07:02,295:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1740)
2020-06-11 12:07:02,295:DEBUG:stack ['$10call_method.4']
2020-06-11 12:07:02,295:DEBUG:end state. edges=[]
2020-06-11 12:07:02,295:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,295:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,295:DEBUG:defmap: {}
2020-06-11 12:07:02,295:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,295:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,295:DEBUG:keep phismap: {}
2020-06-11 12:07:02,295:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,295:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,295:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,295:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:02,297:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,298:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:02,298:DEBUG:================================================================================
2020-06-11 12:07:02,298:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,298:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544a8950>
2020-06-11 12:07:02,298:DEBUG:on stmt: ary = arg(0, name=ary)
2020-06-11 12:07:02,298:DEBUG:on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2020-06-11 12:07:02,298:DEBUG:on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2020-06-11 12:07:02,298:DEBUG:on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None)
2020-06-11 12:07:02,298:DEBUG:on stmt: $12return_value.5 = cast(value=$10call_method.4)
2020-06-11 12:07:02,298:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:07:02,298:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc4544ad0d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc4544ad190>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc4544a8cd0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7fc4544a8ed0>],
             'ary': [<numba.core.ir.Assign object at 0x7fc4544a8b90>]})
2020-06-11 12:07:02,298:DEBUG:SSA violators set()
2020-06-11 12:07:02,298:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,298:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1740)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:02,298:DEBUG:================================================================================
2020-06-11 12:07:02,305:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1602)
           2	LOAD_CONST(arg=1, lineno=1602)
           4	STORE_FAST(arg=2, lineno=1602)
           6	LOAD_CONST(arg=2, lineno=1603)
           8	STORE_FAST(arg=3, lineno=1603)
          10	SETUP_LOOP(arg=50, lineno=1604)
          12	LOAD_GLOBAL(arg=0, lineno=1604)
          14	LOAD_FAST(arg=1, lineno=1604)
          16	CALL_FUNCTION(arg=1, lineno=1604)
          18	GET_ITER(arg=None, lineno=1604)
>         20	FOR_ITER(arg=38, lineno=1604)
          22	UNPACK_SEQUENCE(arg=2, lineno=1604)
          24	STORE_FAST(arg=4, lineno=1604)
          26	STORE_FAST(arg=5, lineno=1604)
          28	LOAD_FAST(arg=5, lineno=1605)
          30	LOAD_CONST(arg=1, lineno=1605)
          32	COMPARE_OP(arg=0, lineno=1605)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1605)
          36	LOAD_FAST(arg=2, lineno=1606)
          38	LOAD_CONST(arg=2, lineno=1606)
          40	INPLACE_ADD(arg=None, lineno=1606)
          42	STORE_FAST(arg=2, lineno=1606)
          44	LOAD_FAST(arg=4, lineno=1607)
          46	STORE_FAST(arg=6, lineno=1607)
          48	JUMP_ABSOLUTE(arg=20, lineno=1607)
>         50	LOAD_FAST(arg=3, lineno=1609)
          52	LOAD_FAST(arg=5, lineno=1609)
          54	INPLACE_MULTIPLY(arg=None, lineno=1609)
          56	STORE_FAST(arg=3, lineno=1609)
          58	JUMP_ABSOLUTE(arg=20, lineno=1609)
>         60	POP_BLOCK(arg=None, lineno=1609)
>         62	LOAD_FAST(arg=2, lineno=1611)
          64	LOAD_CONST(arg=1, lineno=1611)
          66	COMPARE_OP(arg=2, lineno=1611)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1611)
          70	LOAD_FAST(arg=0, lineno=1612)
          72	LOAD_FAST(arg=3, lineno=1612)
          74	COMPARE_OP(arg=3, lineno=1612)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1612)
          78	LOAD_GLOBAL(arg=1, lineno=1613)
          80	LOAD_CONST(arg=3, lineno=1613)
          82	CALL_FUNCTION(arg=1, lineno=1613)
          84	RAISE_VARARGS(arg=1, lineno=1613)
          86	JUMP_FORWARD(arg=80, lineno=1613)
>         88	LOAD_FAST(arg=2, lineno=1615)
          90	LOAD_CONST(arg=2, lineno=1615)
          92	COMPARE_OP(arg=2, lineno=1615)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1615)
          96	LOAD_FAST(arg=3, lineno=1617)
          98	LOAD_CONST(arg=1, lineno=1617)
         100	COMPARE_OP(arg=2, lineno=1617)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1617)
         104	LOAD_CONST(arg=1, lineno=1618)
         106	STORE_FAST(arg=7, lineno=1618)
         108	LOAD_FAST(arg=0, lineno=1619)
         110	LOAD_CONST(arg=1, lineno=1619)
         112	COMPARE_OP(arg=2, lineno=1619)
         114	STORE_FAST(arg=8, lineno=1619)
         116	JUMP_FORWARD(arg=20, lineno=1619)
>        118	LOAD_FAST(arg=0, lineno=1621)
         120	LOAD_FAST(arg=3, lineno=1621)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
         124	STORE_FAST(arg=7, lineno=1621)
         126	LOAD_FAST(arg=0, lineno=1622)
         128	LOAD_FAST(arg=3, lineno=1622)
         130	BINARY_MODULO(arg=None, lineno=1622)
         132	LOAD_CONST(arg=1, lineno=1622)
         134	COMPARE_OP(arg=2, lineno=1622)
         136	STORE_FAST(arg=8, lineno=1622)
>        138	LOAD_FAST(arg=8, lineno=1623)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1623)
         142	LOAD_GLOBAL(arg=1, lineno=1624)
         144	LOAD_CONST(arg=3, lineno=1624)
         146	CALL_FUNCTION(arg=1, lineno=1624)
         148	RAISE_VARARGS(arg=1, lineno=1624)
>        150	LOAD_FAST(arg=7, lineno=1625)
         152	LOAD_FAST(arg=1, lineno=1625)
         154	LOAD_FAST(arg=6, lineno=1625)
         156	STORE_SUBSCR(arg=None, lineno=1625)
         158	JUMP_FORWARD(arg=8, lineno=1625)
>        160	LOAD_GLOBAL(arg=1, lineno=1628)
         162	LOAD_CONST(arg=4, lineno=1628)
         164	CALL_FUNCTION(arg=1, lineno=1628)
         166	RAISE_VARARGS(arg=1, lineno=1628)
>        168	LOAD_CONST(arg=0, lineno=1628)
         170	RETURN_VALUE(arg=None, lineno=1628)
2020-06-11 12:07:02,305:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,306:DEBUG:stack: []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1602)
2020-06-11 12:07:02,306:DEBUG:stack []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1602)
2020-06-11 12:07:02,306:DEBUG:stack []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1602)
2020-06-11 12:07:02,306:DEBUG:stack ['$const2.0']
2020-06-11 12:07:02,306:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1603)
2020-06-11 12:07:02,306:DEBUG:stack []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1603)
2020-06-11 12:07:02,306:DEBUG:stack ['$const6.1']
2020-06-11 12:07:02,306:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,306:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:07:02,306:DEBUG:stack: []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1604)
2020-06-11 12:07:02,306:DEBUG:stack []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1604)
2020-06-11 12:07:02,306:DEBUG:stack []
2020-06-11 12:07:02,306:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1604)
2020-06-11 12:07:02,306:DEBUG:stack ['$12load_global.0']
2020-06-11 12:07:02,306:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1604)
2020-06-11 12:07:02,306:DEBUG:stack ['$12load_global.0', '$shape14.1']
2020-06-11 12:07:02,306:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=1604)
2020-06-11 12:07:02,307:DEBUG:stack ['$16call_function.2']
2020-06-11 12:07:02,307:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,307:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,307:DEBUG:stack: ['$phi20.0']
2020-06-11 12:07:02,307:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1604)
2020-06-11 12:07:02,307:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:02,307:DEBUG:end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,307:DEBUG:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:07:02,307:DEBUG:stack: []
2020-06-11 12:07:02,307:DEBUG:dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1609)
2020-06-11 12:07:02,307:DEBUG:stack []
2020-06-11 12:07:02,307:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,307:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
2020-06-11 12:07:02,307:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:07:02,307:DEBUG:dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1604)
2020-06-11 12:07:02,307:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:07:02,307:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1604)
2020-06-11 12:07:02,307:DEBUG:stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
2020-06-11 12:07:02,307:DEBUG:dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1604)
2020-06-11 12:07:02,307:DEBUG:stack ['$phi22.0', '$22unpack_sequence.3']
2020-06-11 12:07:02,307:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1605)
2020-06-11 12:07:02,308:DEBUG:stack ['$phi22.0']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1605)
2020-06-11 12:07:02,308:DEBUG:stack ['$phi22.0', '$s28.5']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1605)
2020-06-11 12:07:02,308:DEBUG:stack ['$phi22.0', '$s28.5', '$const30.6']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1605)
2020-06-11 12:07:02,308:DEBUG:stack ['$phi22.0', '$32compare_op.7']
2020-06-11 12:07:02,308:DEBUG:end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,308:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
2020-06-11 12:07:02,308:DEBUG:stack: []
2020-06-11 12:07:02,308:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1611)
2020-06-11 12:07:02,308:DEBUG:stack []
2020-06-11 12:07:02,308:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1611)
2020-06-11 12:07:02,308:DEBUG:stack ['$num_neg_value62.0']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1611)
2020-06-11 12:07:02,308:DEBUG:stack ['$num_neg_value62.0', '$const64.1']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1611)
2020-06-11 12:07:02,308:DEBUG:stack ['$66compare_op.2']
2020-06-11 12:07:02,308:DEBUG:end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,308:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:07:02,308:DEBUG:stack: ['$phi36.0']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1606)
2020-06-11 12:07:02,308:DEBUG:stack ['$phi36.0']
2020-06-11 12:07:02,308:DEBUG:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1606)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0', '$num_neg_value36.1']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1606)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1606)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0', '$40inplace_add.3']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1607)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1607)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0', '$ax44.4']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1607)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi36.0']
2020-06-11 12:07:02,309:DEBUG:end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,309:DEBUG:pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,309:DEBUG:stack: ['$phi50.0']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1609)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi50.0']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1609)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi50.0', '$known_size50.1']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1609)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi50.0', '$known_size50.1', '$s52.2']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1609)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi50.0', '$54inplace_multiply.3']
2020-06-11 12:07:02,309:DEBUG:dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1609)
2020-06-11 12:07:02,309:DEBUG:stack ['$phi50.0']
2020-06-11 12:07:02,309:DEBUG:end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,309:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,310:DEBUG:stack: []
2020-06-11 12:07:02,310:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1612)
2020-06-11 12:07:02,310:DEBUG:stack []
2020-06-11 12:07:02,310:DEBUG:dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1612)
2020-06-11 12:07:02,310:DEBUG:stack ['$origsize70.0']
2020-06-11 12:07:02,310:DEBUG:dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1612)
2020-06-11 12:07:02,310:DEBUG:stack ['$origsize70.0', '$known_size72.1']
2020-06-11 12:07:02,310:DEBUG:dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1612)
2020-06-11 12:07:02,310:DEBUG:stack ['$74compare_op.2']
2020-06-11 12:07:02,310:DEBUG:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,310:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2020-06-11 12:07:02,310:DEBUG:stack: []
2020-06-11 12:07:02,310:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1615)
2020-06-11 12:07:02,310:DEBUG:stack []
2020-06-11 12:07:02,310:DEBUG:dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1615)
2020-06-11 12:07:02,310:DEBUG:stack ['$num_neg_value88.0']
2020-06-11 12:07:02,310:DEBUG:dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1615)
2020-06-11 12:07:02,310:DEBUG:stack ['$num_neg_value88.0', '$const90.1']
2020-06-11 12:07:02,310:DEBUG:dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1615)
2020-06-11 12:07:02,310:DEBUG:stack ['$92compare_op.2']
2020-06-11 12:07:02,310:DEBUG:end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,310:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:07:02,310:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:07:02,310:DEBUG:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:07:02,310:DEBUG:stack: []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1613)
2020-06-11 12:07:02,311:DEBUG:stack []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1613)
2020-06-11 12:07:02,311:DEBUG:stack ['$78load_global.0']
2020-06-11 12:07:02,311:DEBUG:dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1613)
2020-06-11 12:07:02,311:DEBUG:stack ['$78load_global.0', '$const80.1']
2020-06-11 12:07:02,311:DEBUG:dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1613)
2020-06-11 12:07:02,311:DEBUG:stack ['$82call_function.2']
2020-06-11 12:07:02,311:DEBUG:end state. edges=[]
2020-06-11 12:07:02,311:DEBUG:pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:07:02,311:DEBUG:stack: []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1628)
2020-06-11 12:07:02,311:DEBUG:stack []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1628)
2020-06-11 12:07:02,311:DEBUG:stack ['$const168.0']
2020-06-11 12:07:02,311:DEBUG:end state. edges=[]
2020-06-11 12:07:02,311:DEBUG:pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2020-06-11 12:07:02,311:DEBUG:stack: []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1617)
2020-06-11 12:07:02,311:DEBUG:stack []
2020-06-11 12:07:02,311:DEBUG:dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1617)
2020-06-11 12:07:02,311:DEBUG:stack ['$known_size96.0']
2020-06-11 12:07:02,311:DEBUG:dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1617)
2020-06-11 12:07:02,311:DEBUG:stack ['$known_size96.0', '$const98.1']
2020-06-11 12:07:02,311:DEBUG:dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1617)
2020-06-11 12:07:02,312:DEBUG:stack ['$100compare_op.2']
2020-06-11 12:07:02,312:DEBUG:end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,312:DEBUG:pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2020-06-11 12:07:02,312:DEBUG:stack: []
2020-06-11 12:07:02,312:DEBUG:dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1628)
2020-06-11 12:07:02,312:DEBUG:stack []
2020-06-11 12:07:02,312:DEBUG:dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1628)
2020-06-11 12:07:02,312:DEBUG:stack ['$160load_global.0']
2020-06-11 12:07:02,312:DEBUG:dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1628)
2020-06-11 12:07:02,312:DEBUG:stack ['$160load_global.0', '$const162.1']
2020-06-11 12:07:02,312:DEBUG:dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1628)
2020-06-11 12:07:02,312:DEBUG:stack ['$164call_function.2']
2020-06-11 12:07:02,312:DEBUG:end state. edges=[]
2020-06-11 12:07:02,312:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2020-06-11 12:07:02,312:DEBUG:stack: []
2020-06-11 12:07:02,312:DEBUG:dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1618)
2020-06-11 12:07:02,312:DEBUG:stack []
2020-06-11 12:07:02,312:DEBUG:dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1618)
2020-06-11 12:07:02,312:DEBUG:stack ['$const104.0']
2020-06-11 12:07:02,312:DEBUG:dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1619)
2020-06-11 12:07:02,312:DEBUG:stack []
2020-06-11 12:07:02,312:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1619)
2020-06-11 12:07:02,312:DEBUG:stack ['$origsize108.1']
2020-06-11 12:07:02,312:DEBUG:dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1619)
2020-06-11 12:07:02,312:DEBUG:stack ['$origsize108.1', '$const110.2']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1619)
2020-06-11 12:07:02,313:DEBUG:stack ['$112compare_op.3']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1619)
2020-06-11 12:07:02,313:DEBUG:stack []
2020-06-11 12:07:02,313:DEBUG:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,313:DEBUG:pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2020-06-11 12:07:02,313:DEBUG:stack: []
2020-06-11 12:07:02,313:DEBUG:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1621)
2020-06-11 12:07:02,313:DEBUG:stack []
2020-06-11 12:07:02,313:DEBUG:dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1621)
2020-06-11 12:07:02,313:DEBUG:stack ['$origsize118.0']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
2020-06-11 12:07:02,313:DEBUG:stack ['$origsize118.0', '$known_size120.1']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1621)
2020-06-11 12:07:02,313:DEBUG:stack ['$122binary_floor_divide.2']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1622)
2020-06-11 12:07:02,313:DEBUG:stack []
2020-06-11 12:07:02,313:DEBUG:dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1622)
2020-06-11 12:07:02,313:DEBUG:stack ['$origsize126.3']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1622)
2020-06-11 12:07:02,313:DEBUG:stack ['$origsize126.3', '$known_size128.4']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1622)
2020-06-11 12:07:02,313:DEBUG:stack ['$130binary_modulo.5']
2020-06-11 12:07:02,313:DEBUG:dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1622)
2020-06-11 12:07:02,313:DEBUG:stack ['$130binary_modulo.5', '$const132.6']
2020-06-11 12:07:02,314:DEBUG:dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1622)
2020-06-11 12:07:02,314:DEBUG:stack ['$134compare_op.7']
2020-06-11 12:07:02,314:DEBUG:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,314:DEBUG:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2020-06-11 12:07:02,314:DEBUG:stack: []
2020-06-11 12:07:02,314:DEBUG:dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1623)
2020-06-11 12:07:02,314:DEBUG:stack []
2020-06-11 12:07:02,314:DEBUG:dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1623)
2020-06-11 12:07:02,314:DEBUG:stack ['$ok138.0']
2020-06-11 12:07:02,314:DEBUG:end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,314:DEBUG:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:07:02,314:DEBUG:pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:07:02,314:DEBUG:stack: []
2020-06-11 12:07:02,314:DEBUG:dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1624)
2020-06-11 12:07:02,314:DEBUG:stack []
2020-06-11 12:07:02,314:DEBUG:dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1624)
2020-06-11 12:07:02,314:DEBUG:stack ['$142load_global.0']
2020-06-11 12:07:02,314:DEBUG:dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1624)
2020-06-11 12:07:02,314:DEBUG:stack ['$142load_global.0', '$const144.1']
2020-06-11 12:07:02,314:DEBUG:dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1624)
2020-06-11 12:07:02,314:DEBUG:stack ['$146call_function.2']
2020-06-11 12:07:02,315:DEBUG:end state. edges=[]
2020-06-11 12:07:02,315:DEBUG:pending: deque([State(pc_initial=150 nstack_initial=0)])
2020-06-11 12:07:02,315:DEBUG:stack: []
2020-06-11 12:07:02,315:DEBUG:dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1625)
2020-06-11 12:07:02,315:DEBUG:stack []
2020-06-11 12:07:02,315:DEBUG:dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1625)
2020-06-11 12:07:02,315:DEBUG:stack ['$inferred150.0']
2020-06-11 12:07:02,315:DEBUG:dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1625)
2020-06-11 12:07:02,315:DEBUG:stack ['$inferred150.0', '$shape152.1']
2020-06-11 12:07:02,315:DEBUG:dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1625)
2020-06-11 12:07:02,315:DEBUG:stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
2020-06-11 12:07:02,315:DEBUG:dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1625)
2020-06-11 12:07:02,315:DEBUG:stack []
2020-06-11 12:07:02,315:DEBUG:end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,315:DEBUG:pending: deque([State(pc_initial=168 nstack_initial=0)])
2020-06-11 12:07:02,316:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,316:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
2020-06-11 12:07:02,316:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:07:02,316:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:07:02,316:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,316:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,317:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,317:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:07:02,317:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:07:02,317:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
2020-06-11 12:07:02,317:DEBUG:block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,318:DEBUG:block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,320:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size ['$122binary_floor_divide.2', 'known_size', 'origsize']
    inferred = $122binary_floor_divide.2     ['$122binary_floor_divide.2', 'inferred']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok = $134compare_op.7                    ['$134compare_op.7', 'ok']
    jump 138                                 []
label 138:
    branch ok, 150, 142                      ['ok']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

2020-06-11 12:07:02,334:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,335:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 169                                 []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 169                                 []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size ['$122binary_floor_divide.2', 'known_size', 'origsize']
    inferred = $122binary_floor_divide.2     ['$122binary_floor_divide.2', 'inferred']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok = $134compare_op.7                    ['$134compare_op.7', 'ok']
    jump 138                                 []
label 138:
    branch ok, 150, 142                      ['ok']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise <class 'ValueError'>('multiple negative shape values') []
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']
label 169:
    jump 20                                  []

2020-06-11 12:07:02,335:DEBUG:================================================================================
2020-06-11 12:07:02,335:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,335:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,335:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,335:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,335:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,335:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,335:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,335:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,335:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,335:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:07:02,335:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,335:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,335:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,335:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,335:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,335:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,335:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:07:02,335:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,335:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,335:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,335:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,335:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,336:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,336:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:07:02,336:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,336:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,336:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,336:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,336:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,336:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,336:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,336:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,336:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,336:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:02,336:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,336:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,336:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,336:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,336:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,336:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,336:DEBUG:==== SSA block analysis pass on 50
2020-06-11 12:07:02,336:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,336:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,336:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:07:02,336:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,336:DEBUG:==== SSA block analysis pass on 60
2020-06-11 12:07:02,336:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,336:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,336:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:07:02,336:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,336:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,337:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,337:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,337:DEBUG:==== SSA block analysis pass on 70
2020-06-11 12:07:02,337:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,337:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,337:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,337:DEBUG:==== SSA block analysis pass on 78
2020-06-11 12:07:02,337:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,337:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,337:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,337:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,337:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,337:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:07:02,337:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,337:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,337:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,337:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,337:DEBUG:==== SSA block analysis pass on 96
2020-06-11 12:07:02,337:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,337:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,337:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,337:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,337:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:07:02,337:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,337:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,337:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,337:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,337:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,338:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,338:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,338:DEBUG:==== SSA block analysis pass on 118
2020-06-11 12:07:02,338:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,338:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,338:DEBUG:on stmt: inferred = $122binary_floor_divide.2
2020-06-11 12:07:02,338:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,338:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,338:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,338:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,338:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,338:DEBUG:==== SSA block analysis pass on 138
2020-06-11 12:07:02,338:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,338:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,338:DEBUG:==== SSA block analysis pass on 142
2020-06-11 12:07:02,338:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,338:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,338:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,338:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,338:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,338:DEBUG:==== SSA block analysis pass on 150
2020-06-11 12:07:02,338:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,338:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:07:02,338:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,338:DEBUG:==== SSA block analysis pass on 160
2020-06-11 12:07:02,338:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,338:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,339:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,339:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,339:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,339:DEBUG:==== SSA block analysis pass on 168
2020-06-11 12:07:02,339:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,339:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,339:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,339:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,339:DEBUG:==== SSA block analysis pass on 169
2020-06-11 12:07:02,339:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454411ed0>
2020-06-11 12:07:02,339:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,339:DEBUG:defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fc454409ad0>],
             '$112compare_op.3': [<numba.core.ir.Assign object at 0x7fc45440d050>],
             '$122binary_floor_divide.2': [<numba.core.ir.Assign object at 0x7fc45440d4d0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fc45447c250>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fc45440d810>],
             '$134compare_op.7': [<numba.core.ir.Assign object at 0x7fc45440da10>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fc45440dcd0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fc45440df10>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fc454411450>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fc454411690>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fc45447c450>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fc454411990>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fc45447c550>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fc45447c7d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fc45447c890>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fc45447c950>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fc45447cc50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fc45447cd10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fc45447cb50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fc4544851d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fc454485590>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fc454485ad0>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fc454485f50>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fc4544092d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fc454409410>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fc454409650>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc454458790>],
             '$const104.0': [<numba.core.ir.Assign object at 0x7fc454409c90>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fc454409f10>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fc45440d910>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fc45440ddd0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fc454411550>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fc454411850>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fc454462d10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fc454485090>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fc454485450>],
             '$const6.1': [<numba.core.ir.Assign object at 0x7fc454462e50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fc454485e50>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fc454409510>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc454458690>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fc4544099d0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fc45447c350>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fc45447c710>],
             'ax': [<numba.core.ir.Assign object at 0x7fc45447cd90>],
             'inferred': [<numba.core.ir.Assign object at 0x7fc454409d50>,
                          <numba.core.ir.Assign object at 0x7fc45440d110>],
             'known_size': [<numba.core.ir.Assign object at 0x7fc45447c050>,
                            <numba.core.ir.Assign object at 0x7fc454485790>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fc4544857d0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fc454462d50>,
                               <numba.core.ir.Assign object at 0x7fc45447ce10>],
             'ok': [<numba.core.ir.Assign object at 0x7fc45440d150>,
                    <numba.core.ir.Assign object at 0x7fc45440d550>],
             'origsize': [<numba.core.ir.Assign object at 0x7fc454462c90>],
             's': [<numba.core.ir.Assign object at 0x7fc45447ce50>],
             'shape': [<numba.core.ir.Assign object at 0x7fc454462bd0>]})
2020-06-11 12:07:02,340:DEBUG:SSA violators {'inferred', 'known_size', 'ok', 'num_neg_value'}
2020-06-11 12:07:02,340:DEBUG:Fix SSA violator on var inferred
2020-06-11 12:07:02,340:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,340:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,340:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,340:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,340:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,340:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,340:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,340:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,340:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,340:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,340:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,340:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,340:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,340:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,340:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,340:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,340:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,340:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,340:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,340:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,340:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,340:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,340:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,340:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,340:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,341:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,341:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,341:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,341:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,341:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,341:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,341:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,341:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,341:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,341:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,341:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,341:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,341:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,341:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,341:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,341:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,341:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,341:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,341:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:07:02,341:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,341:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,341:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,341:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,341:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,341:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,341:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,341:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,341:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,341:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,342:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,342:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,342:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,342:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,342:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,342:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,342:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,342:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,342:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,342:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,342:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,342:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,342:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,342:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,342:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,342:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,342:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,342:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,342:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,342:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,342:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,342:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,342:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,342:DEBUG:first assign: inferred
2020-06-11 12:07:02,343:DEBUG:replaced with: inferred = $const104.0
2020-06-11 12:07:02,343:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,343:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,343:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,343:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,343:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,343:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,343:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,343:DEBUG:on stmt: inferred = $122binary_floor_divide.2
2020-06-11 12:07:02,343:DEBUG:replaced with: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,343:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,343:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,343:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,343:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,343:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,343:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,343:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,343:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,343:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,343:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,343:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,343:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,343:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,343:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,343:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,343:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,343:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:07:02,343:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,343:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,344:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,344:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,344:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,344:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,344:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,344:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,344:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,344:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,344:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,344:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,344:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,344:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458310>
2020-06-11 12:07:02,344:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,344:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc454420750>],
             118: [<numba.core.ir.Assign object at 0x7fc454420110>]})
2020-06-11 12:07:02,345:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,345:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,345:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,345:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,345:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,345:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,345:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,345:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,345:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,345:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,345:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,345:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,345:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,345:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,345:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,345:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,345:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,345:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,345:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,346:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,346:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,346:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,346:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,346:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,346:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,346:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,346:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,346:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,346:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,346:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,346:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,346:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,346:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,346:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,346:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,346:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,346:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,346:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,346:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,346:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,346:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,346:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,347:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:07:02,347:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,347:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,347:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,347:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,347:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,347:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,347:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,347:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,347:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,347:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,347:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,347:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,347:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,347:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,347:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,347:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,347:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,347:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,347:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,348:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,348:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,348:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,348:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,348:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,348:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,348:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,348:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,348:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,348:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,348:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,348:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,348:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,348:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,348:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,348:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,348:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,348:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,348:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,348:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,348:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,348:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,348:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,348:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,349:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,349:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,349:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,349:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,349:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,349:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,349:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,349:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,349:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,349:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,349:DEBUG:on stmt: shape[neg_ax] = inferred
2020-06-11 12:07:02,349:DEBUG:find_def var='inferred' stmt=shape[neg_ax] = inferred
2020-06-11 12:07:02,349:DEBUG:find_def_from_top label 150
2020-06-11 12:07:02,349:DEBUG:idom 138 from label 150
2020-06-11 12:07:02,349:DEBUG:find_def_from_bottom label 138
2020-06-11 12:07:02,349:DEBUG:find_def_from_top label 138
2020-06-11 12:07:02,349:DEBUG:insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2020-06-11 12:07:02,349:DEBUG:find_def_from_bottom label 104
2020-06-11 12:07:02,349:DEBUG:incoming_def inferred = $const104.0
2020-06-11 12:07:02,349:DEBUG:find_def_from_bottom label 118
2020-06-11 12:07:02,349:DEBUG:incoming_def inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,349:DEBUG:replaced with: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,349:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,349:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,349:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,349:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,350:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,350:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,350:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,350:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,350:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,350:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,350:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,350:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,350:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,350:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45440da90>
2020-06-11 12:07:02,350:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,350:DEBUG:Fix SSA violator on var known_size
2020-06-11 12:07:02,350:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,350:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,350:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,350:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,350:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,350:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,350:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,350:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,350:DEBUG:first assign: known_size
2020-06-11 12:07:02,350:DEBUG:replaced with: known_size = $const6.1
2020-06-11 12:07:02,350:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,350:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,350:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,351:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,351:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,351:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,351:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,351:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,351:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,351:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,351:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,351:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,351:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,351:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,351:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,351:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,351:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,351:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,351:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,351:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,351:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,351:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,351:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,351:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,351:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,351:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,351:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,351:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,351:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,352:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,352:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,352:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,352:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,352:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,352:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,352:DEBUG:on stmt: known_size = $54inplace_multiply.3
2020-06-11 12:07:02,352:DEBUG:replaced with: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,352:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,352:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,352:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,352:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,352:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,352:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,352:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,352:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,352:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,352:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,352:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,352:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,352:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,352:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,352:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,352:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,352:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,352:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,352:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,353:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,353:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,353:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,353:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,353:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,353:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,353:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,353:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,353:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,353:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,353:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,353:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,353:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,353:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,353:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,353:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,353:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,353:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,353:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,353:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,353:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,353:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,353:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,353:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,353:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,353:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,353:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,353:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,354:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,354:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,354:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,354:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,354:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,354:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,354:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,354:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,354:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,354:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,354:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,354:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,354:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,354:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,354:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,354:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454411e90>
2020-06-11 12:07:02,354:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,355:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc45447ce90>],
             50: [<numba.core.ir.Assign object at 0x7fc454458e50>]})
2020-06-11 12:07:02,355:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,355:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,355:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,355:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,355:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,355:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,355:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,355:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,355:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,355:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,356:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,356:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,356:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,356:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,356:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,356:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,356:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,356:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,356:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,356:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,356:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,356:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,356:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,356:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,356:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,356:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,356:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,356:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,356:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,356:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,356:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,356:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,356:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,357:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,357:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,357:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,357:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,357:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,357:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,357:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,357:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,357:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,357:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,357:DEBUG:find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,357:DEBUG:find_def_from_top label 50
2020-06-11 12:07:02,357:DEBUG:idom 22 from label 50
2020-06-11 12:07:02,357:DEBUG:find_def_from_bottom label 22
2020-06-11 12:07:02,357:DEBUG:find_def_from_top label 22
2020-06-11 12:07:02,357:DEBUG:idom 20 from label 22
2020-06-11 12:07:02,357:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,357:DEBUG:find_def_from_top label 20
2020-06-11 12:07:02,357:DEBUG:insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2020-06-11 12:07:02,357:DEBUG:find_def_from_bottom label 169
2020-06-11 12:07:02,357:DEBUG:find_def_from_top label 169
2020-06-11 12:07:02,357:DEBUG:insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2020-06-11 12:07:02,357:DEBUG:find_def_from_bottom label 50
2020-06-11 12:07:02,357:DEBUG:incoming_def known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,357:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,358:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,358:DEBUG:idom 22 from label 36
2020-06-11 12:07:02,358:DEBUG:find_def_from_bottom label 22
2020-06-11 12:07:02,358:DEBUG:find_def_from_top label 22
2020-06-11 12:07:02,358:DEBUG:idom 20 from label 22
2020-06-11 12:07:02,358:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,358:DEBUG:incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
2020-06-11 12:07:02,358:DEBUG:incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,358:DEBUG:find_def_from_bottom label 10
2020-06-11 12:07:02,358:DEBUG:find_def_from_top label 10
2020-06-11 12:07:02,358:DEBUG:idom 0 from label 10
2020-06-11 12:07:02,358:DEBUG:find_def_from_bottom label 0
2020-06-11 12:07:02,358:DEBUG:incoming_def known_size = $const6.1
2020-06-11 12:07:02,358:DEBUG:replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,358:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,358:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,358:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,358:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,358:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,358:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,358:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,358:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,358:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,358:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,359:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,359:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,359:DEBUG:on stmt: $74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,359:DEBUG:find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
2020-06-11 12:07:02,359:DEBUG:find_def_from_top label 70
2020-06-11 12:07:02,359:DEBUG:idom 62 from label 70
2020-06-11 12:07:02,359:DEBUG:find_def_from_bottom label 62
2020-06-11 12:07:02,359:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,359:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,359:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,359:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,359:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,359:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,359:DEBUG:replaced with: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:07:02,359:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,359:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,359:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,359:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,359:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,359:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,359:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,359:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,359:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,359:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,359:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,360:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,360:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,360:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,360:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,360:DEBUG:on stmt: $100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,360:DEBUG:find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
2020-06-11 12:07:02,360:DEBUG:find_def_from_top label 96
2020-06-11 12:07:02,360:DEBUG:idom 88 from label 96
2020-06-11 12:07:02,360:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,360:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,360:DEBUG:idom 62 from label 88
2020-06-11 12:07:02,360:DEBUG:find_def_from_bottom label 62
2020-06-11 12:07:02,360:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,360:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,360:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,360:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,360:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,360:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,360:DEBUG:replaced with: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:07:02,360:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,360:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,360:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,360:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,360:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,360:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,361:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,361:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,361:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,361:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,361:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,361:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,361:DEBUG:find_def var='known_size' stmt=$122binary_floor_divide.2 = origsize // known_size
2020-06-11 12:07:02,361:DEBUG:find_def_from_top label 118
2020-06-11 12:07:02,361:DEBUG:idom 96 from label 118
2020-06-11 12:07:02,361:DEBUG:find_def_from_bottom label 96
2020-06-11 12:07:02,361:DEBUG:find_def_from_top label 96
2020-06-11 12:07:02,361:DEBUG:idom 88 from label 96
2020-06-11 12:07:02,361:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,361:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,361:DEBUG:idom 62 from label 88
2020-06-11 12:07:02,361:DEBUG:find_def_from_bottom label 62
2020-06-11 12:07:02,361:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,361:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,361:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,361:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,361:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,361:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,361:DEBUG:replaced with: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:07:02,361:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,361:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,361:DEBUG:find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
2020-06-11 12:07:02,362:DEBUG:find_def_from_top label 118
2020-06-11 12:07:02,362:DEBUG:idom 96 from label 118
2020-06-11 12:07:02,362:DEBUG:find_def_from_bottom label 96
2020-06-11 12:07:02,362:DEBUG:find_def_from_top label 96
2020-06-11 12:07:02,362:DEBUG:idom 88 from label 96
2020-06-11 12:07:02,362:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,362:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,362:DEBUG:idom 62 from label 88
2020-06-11 12:07:02,362:DEBUG:find_def_from_bottom label 62
2020-06-11 12:07:02,362:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,362:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,362:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,362:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,362:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,362:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,362:DEBUG:replaced with: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:07:02,362:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,362:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,362:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,362:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,362:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,362:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,362:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,362:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,363:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,363:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,363:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,363:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,363:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,363:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,363:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,363:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,363:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,363:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,363:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,363:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,363:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,363:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,363:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,363:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,363:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,363:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,363:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,363:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,363:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,363:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,363:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454462610>
2020-06-11 12:07:02,363:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,363:DEBUG:Fix SSA violator on var ok
2020-06-11 12:07:02,364:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,364:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,364:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,364:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,364:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,364:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,364:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,364:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,364:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,364:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,364:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,364:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,364:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,364:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,364:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,364:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,364:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,364:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,364:DEBUG:on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10])
2020-06-11 12:07:02,364:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,364:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,364:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,364:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,364:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,364:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,364:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,364:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,365:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,365:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,365:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,365:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,365:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,365:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,365:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,365:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,365:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,365:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,365:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,365:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,365:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,365:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,365:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,365:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,365:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,365:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,365:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,365:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,365:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,365:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,365:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,365:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,365:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,365:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,365:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,366:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,366:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,366:DEBUG:on stmt: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:07:02,366:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,366:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,366:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,366:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,366:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,366:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,366:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,366:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,366:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,366:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,366:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,366:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,366:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,366:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,366:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,366:DEBUG:on stmt: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:07:02,366:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,366:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,366:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,366:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,366:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,366:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,366:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,366:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,366:DEBUG:first assign: ok
2020-06-11 12:07:02,367:DEBUG:replaced with: ok = $112compare_op.3
2020-06-11 12:07:02,367:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,367:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,367:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,367:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:07:02,367:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,367:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:07:02,367:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,367:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,367:DEBUG:on stmt: ok = $134compare_op.7
2020-06-11 12:07:02,367:DEBUG:replaced with: ok.1 = $134compare_op.7
2020-06-11 12:07:02,367:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,367:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,367:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,367:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,367:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,367:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,367:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,367:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,367:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,367:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,367:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,367:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,367:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,367:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,367:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,368:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,368:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,368:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,368:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,368:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,368:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,368:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,368:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,368:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,368:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,368:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,368:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,368:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454458710>
2020-06-11 12:07:02,368:DEBUG:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,368:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,368:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc454420090>],
             118: [<numba.core.ir.Assign object at 0x7fc454420450>]})
2020-06-11 12:07:02,369:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,369:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,369:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,369:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,369:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,369:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,369:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,369:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,369:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,369:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,369:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,369:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,369:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,369:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,369:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,369:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,369:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,369:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,369:DEBUG:on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10])
2020-06-11 12:07:02,369:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,369:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,370:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,370:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,370:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,370:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,370:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,370:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,370:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,370:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,370:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,370:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,370:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,370:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,370:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,370:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,370:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,370:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,370:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,370:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,370:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,370:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,370:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,370:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,370:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,371:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,371:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,371:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,371:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,371:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,371:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,371:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,371:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,371:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,371:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,371:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,371:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,371:DEBUG:on stmt: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:07:02,371:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,371:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,371:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,371:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,371:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,371:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,371:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,371:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,371:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,371:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,371:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,371:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,372:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,372:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,372:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,372:DEBUG:on stmt: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:07:02,372:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,372:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,372:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,372:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,372:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,372:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,372:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,372:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,372:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,372:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,372:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,372:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:07:02,372:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,372:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:07:02,372:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,372:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,372:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:07:02,372:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,372:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,372:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,372:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,372:DEBUG:on stmt: branch ok, 150, 142
2020-06-11 12:07:02,373:DEBUG:find_def var='ok' stmt=branch ok, 150, 142
2020-06-11 12:07:02,373:DEBUG:find_def_from_top label 138
2020-06-11 12:07:02,373:DEBUG:insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2020-06-11 12:07:02,373:DEBUG:find_def_from_bottom label 104
2020-06-11 12:07:02,373:DEBUG:incoming_def ok = $112compare_op.3
2020-06-11 12:07:02,373:DEBUG:find_def_from_bottom label 118
2020-06-11 12:07:02,373:DEBUG:incoming_def ok.1 = $134compare_op.7
2020-06-11 12:07:02,373:DEBUG:replaced with: branch ok.2, 150, 142
2020-06-11 12:07:02,373:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,373:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,373:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,373:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,373:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,373:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,373:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,373:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,373:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,373:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,373:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,373:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,373:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,373:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,373:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,374:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,374:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,374:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,374:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,374:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,374:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,374:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,374:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454420d10>
2020-06-11 12:07:02,374:DEBUG:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,374:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,374:DEBUG:Fix SSA violator on var num_neg_value
2020-06-11 12:07:02,374:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,374:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,374:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,374:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,374:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,374:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,374:DEBUG:first assign: num_neg_value
2020-06-11 12:07:02,374:DEBUG:replaced with: num_neg_value = $const2.0
2020-06-11 12:07:02,374:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,374:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,374:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,374:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,374:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,374:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,375:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,375:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,375:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,375:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,375:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,375:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,375:DEBUG:on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10])
2020-06-11 12:07:02,375:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,375:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,375:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,375:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,375:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,375:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,375:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,375:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,375:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,375:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,375:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,375:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,375:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,375:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,375:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,375:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,375:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,375:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,375:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,375:DEBUG:on stmt: num_neg_value = $40inplace_add.3
2020-06-11 12:07:02,376:DEBUG:replaced with: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:07:02,376:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,376:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,376:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,376:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,376:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,376:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:07:02,376:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,376:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,376:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,376:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,376:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,376:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,376:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,376:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,377:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,377:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,377:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,377:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,377:DEBUG:on stmt: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:07:02,377:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,377:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,377:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,377:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,377:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,377:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,377:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,377:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,377:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,377:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,377:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,377:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:07:02,377:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,377:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:07:02,377:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,377:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,377:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:07:02,377:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,377:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,377:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,377:DEBUG:on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,377:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,377:DEBUG:on stmt: branch ok.2, 150, 142
2020-06-11 12:07:02,377:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,378:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,378:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,378:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,378:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,378:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,378:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,378:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,378:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,378:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,378:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,378:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,378:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,378:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,378:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,378:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,378:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,378:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,378:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,378:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,378:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,378:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,378:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc454462610>
2020-06-11 12:07:02,378:DEBUG:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,378:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,379:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc45447c690>],
             36: [<numba.core.ir.Assign object at 0x7fc454420e90>]})
2020-06-11 12:07:02,379:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,379:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,379:DEBUG:on stmt: origsize = arg(0, name=origsize)
2020-06-11 12:07:02,379:DEBUG:on stmt: shape = arg(1, name=shape)
2020-06-11 12:07:02,379:DEBUG:on stmt: $const2.0 = const(int, 0)
2020-06-11 12:07:02,379:DEBUG:on stmt: num_neg_value = $const2.0
2020-06-11 12:07:02,379:DEBUG:on stmt: $const6.1 = const(int, 1)
2020-06-11 12:07:02,379:DEBUG:on stmt: known_size = $const6.1
2020-06-11 12:07:02,379:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,379:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,379:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,379:DEBUG:on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
2020-06-11 12:07:02,379:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2020-06-11 12:07:02,379:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,380:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,380:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,380:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:02,380:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,380:DEBUG:on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10])
2020-06-11 12:07:02,380:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,380:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,380:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,380:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,380:DEBUG:on stmt: branch $20for_iter.3, 22, 60
2020-06-11 12:07:02,380:DEBUG:==== SSA block rewrite pass on 22
2020-06-11 12:07:02,380:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,380:DEBUG:on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
2020-06-11 12:07:02,380:DEBUG:on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None)
2020-06-11 12:07:02,380:DEBUG:on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None)
2020-06-11 12:07:02,380:DEBUG:on stmt: ax = $22unpack_sequence.2
2020-06-11 12:07:02,380:DEBUG:on stmt: s = $22unpack_sequence.3
2020-06-11 12:07:02,380:DEBUG:on stmt: $const30.6 = const(int, 0)
2020-06-11 12:07:02,380:DEBUG:on stmt: $32compare_op.7 = s < $const30.6
2020-06-11 12:07:02,380:DEBUG:on stmt: branch $32compare_op.7, 36, 50
2020-06-11 12:07:02,380:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,380:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,380:DEBUG:on stmt: $const38.2 = const(int, 1)
2020-06-11 12:07:02,380:DEBUG:on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,380:DEBUG:find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,381:DEBUG:idom 22 from label 36
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 22
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 22
2020-06-11 12:07:02,381:DEBUG:idom 20 from label 22
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 20
2020-06-11 12:07:02,381:DEBUG:insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 169
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 169
2020-06-11 12:07:02,381:DEBUG:insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 50
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 50
2020-06-11 12:07:02,381:DEBUG:idom 22 from label 50
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 22
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 22
2020-06-11 12:07:02,381:DEBUG:idom 20 from label 22
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,381:DEBUG:incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,381:DEBUG:incoming_def num_neg_value.1 = $40inplace_add.3
2020-06-11 12:07:02,381:DEBUG:incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 10
2020-06-11 12:07:02,381:DEBUG:find_def_from_top label 10
2020-06-11 12:07:02,381:DEBUG:idom 0 from label 10
2020-06-11 12:07:02,381:DEBUG:find_def_from_bottom label 0
2020-06-11 12:07:02,381:DEBUG:incoming_def num_neg_value = $const2.0
2020-06-11 12:07:02,381:DEBUG:replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,381:DEBUG:on stmt: num_neg_value.1 = $40inplace_add.3
2020-06-11 12:07:02,382:DEBUG:on stmt: neg_ax = ax
2020-06-11 12:07:02,382:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,382:DEBUG:==== SSA block rewrite pass on 50
2020-06-11 12:07:02,382:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,382:DEBUG:on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,382:DEBUG:on stmt: known_size.1 = $54inplace_multiply.3
2020-06-11 12:07:02,382:DEBUG:on stmt: jump 169
2020-06-11 12:07:02,382:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,382:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,382:DEBUG:on stmt: jump 62
2020-06-11 12:07:02,382:DEBUG:==== SSA block rewrite pass on 62
2020-06-11 12:07:02,382:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,382:DEBUG:on stmt: $const64.1 = const(int, 0)
2020-06-11 12:07:02,382:DEBUG:on stmt: $66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,382:DEBUG:find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
2020-06-11 12:07:02,382:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,382:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,382:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,382:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,382:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,382:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,382:DEBUG:replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
2020-06-11 12:07:02,382:DEBUG:on stmt: branch $66compare_op.2, 70, 88
2020-06-11 12:07:02,382:DEBUG:==== SSA block rewrite pass on 70
2020-06-11 12:07:02,383:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,383:DEBUG:on stmt: $74compare_op.2 = origsize != known_size.2
2020-06-11 12:07:02,383:DEBUG:on stmt: branch $74compare_op.2, 78, 168
2020-06-11 12:07:02,383:DEBUG:==== SSA block rewrite pass on 78
2020-06-11 12:07:02,383:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,383:DEBUG:on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,383:DEBUG:on stmt: $const80.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,383:DEBUG:on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None)
2020-06-11 12:07:02,383:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,383:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,383:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,383:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,383:DEBUG:on stmt: $92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,383:DEBUG:find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
2020-06-11 12:07:02,383:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,383:DEBUG:idom 62 from label 88
2020-06-11 12:07:02,383:DEBUG:find_def_from_bottom label 62
2020-06-11 12:07:02,383:DEBUG:find_def_from_top label 62
2020-06-11 12:07:02,383:DEBUG:idom 60 from label 62
2020-06-11 12:07:02,383:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,383:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,383:DEBUG:idom 20 from label 60
2020-06-11 12:07:02,383:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:02,383:DEBUG:replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
2020-06-11 12:07:02,383:DEBUG:on stmt: branch $92compare_op.2, 96, 160
2020-06-11 12:07:02,384:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,384:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,384:DEBUG:on stmt: $const98.1 = const(int, 0)
2020-06-11 12:07:02,384:DEBUG:on stmt: $100compare_op.2 = known_size.2 == $const98.1
2020-06-11 12:07:02,384:DEBUG:on stmt: branch $100compare_op.2, 104, 118
2020-06-11 12:07:02,384:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,384:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,384:DEBUG:on stmt: $const104.0 = const(int, 0)
2020-06-11 12:07:02,384:DEBUG:on stmt: inferred = $const104.0
2020-06-11 12:07:02,384:DEBUG:on stmt: $const110.2 = const(int, 0)
2020-06-11 12:07:02,384:DEBUG:on stmt: $112compare_op.3 = origsize == $const110.2
2020-06-11 12:07:02,384:DEBUG:on stmt: ok = $112compare_op.3
2020-06-11 12:07:02,384:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,384:DEBUG:==== SSA block rewrite pass on 118
2020-06-11 12:07:02,384:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,384:DEBUG:on stmt: $122binary_floor_divide.2 = origsize // known_size.2
2020-06-11 12:07:02,384:DEBUG:on stmt: inferred.1 = $122binary_floor_divide.2
2020-06-11 12:07:02,384:DEBUG:on stmt: $130binary_modulo.5 = origsize % known_size.2
2020-06-11 12:07:02,384:DEBUG:on stmt: $const132.6 = const(int, 0)
2020-06-11 12:07:02,384:DEBUG:on stmt: $134compare_op.7 = $130binary_modulo.5 == $const132.6
2020-06-11 12:07:02,384:DEBUG:on stmt: ok.1 = $134compare_op.7
2020-06-11 12:07:02,384:DEBUG:on stmt: jump 138
2020-06-11 12:07:02,384:DEBUG:==== SSA block rewrite pass on 138
2020-06-11 12:07:02,384:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,384:DEBUG:on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,384:DEBUG:on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2020-06-11 12:07:02,384:DEBUG:on stmt: branch ok.2, 150, 142
2020-06-11 12:07:02,385:DEBUG:==== SSA block rewrite pass on 142
2020-06-11 12:07:02,385:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,385:DEBUG:on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,385:DEBUG:on stmt: $const144.1 = const(str, total size of new array must be unchanged)
2020-06-11 12:07:02,385:DEBUG:on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None)
2020-06-11 12:07:02,385:DEBUG:on stmt: raise <class 'ValueError'>('total size of new array must be unchanged')
2020-06-11 12:07:02,385:DEBUG:==== SSA block rewrite pass on 150
2020-06-11 12:07:02,385:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,385:DEBUG:on stmt: shape[neg_ax] = inferred.2
2020-06-11 12:07:02,385:DEBUG:on stmt: jump 168
2020-06-11 12:07:02,385:DEBUG:==== SSA block rewrite pass on 160
2020-06-11 12:07:02,385:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,385:DEBUG:on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,385:DEBUG:on stmt: $const162.1 = const(str, multiple negative shape values)
2020-06-11 12:07:02,385:DEBUG:on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None)
2020-06-11 12:07:02,385:DEBUG:on stmt: raise <class 'ValueError'>('multiple negative shape values')
2020-06-11 12:07:02,385:DEBUG:==== SSA block rewrite pass on 168
2020-06-11 12:07:02,385:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,385:DEBUG:on stmt: $const168.0 = const(NoneType, None)
2020-06-11 12:07:02,385:DEBUG:on stmt: $170return_value.1 = cast(value=$const168.0)
2020-06-11 12:07:02,385:DEBUG:on stmt: return $170return_value.1
2020-06-11 12:07:02,385:DEBUG:==== SSA block rewrite pass on 169
2020-06-11 12:07:02,385:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454411a50>
2020-06-11 12:07:02,385:DEBUG:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2020-06-11 12:07:02,385:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,385:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,386:DEBUG:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    $const2.0 = const(int, 0)                ['$const2.0']
    num_neg_value = $const2.0                ['$const2.0', 'num_neg_value']
    $const6.1 = const(int, 1)                ['$const6.1']
    known_size = $const6.1                   ['$const6.1', 'known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 10]) ['num_neg_value', 'num_neg_value.2', 'num_neg_value.3']
    known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 10]) ['known_size', 'known_size.2', 'known_size.3']
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    branch $32compare_op.7, 36, 50           ['$32compare_op.7']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value.2']
    num_neg_value.1 = $40inplace_add.3       ['$40inplace_add.3', 'num_neg_value.1']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 169                                 []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size.2', 's']
    known_size.1 = $54inplace_multiply.3     ['$54inplace_multiply.3', 'known_size.1']
    jump 169                                 []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value.2 == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value.2']
    branch $66compare_op.2, 70, 88           ['$66compare_op.2']
label 70:
    $74compare_op.2 = origsize != known_size.2 ['$74compare_op.2', 'known_size.2', 'origsize']
    branch $74compare_op.2, 78, 168          ['$74compare_op.2']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1613)], kws=(), vararg=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value.2 == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value.2']
    branch $92compare_op.2, 96, 160          ['$92compare_op.2']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size.2 == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size.2']
    branch $100compare_op.2, 104, 118        ['$100compare_op.2']
label 104:
    $const104.0 = const(int, 0)              ['$const104.0']
    inferred = $const104.0                   ['$const104.0', 'inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    $112compare_op.3 = origsize == $const110.2 ['$112compare_op.3', '$const110.2', 'origsize']
    ok = $112compare_op.3                    ['$112compare_op.3', 'ok']
    jump 138                                 []
label 118:
    $122binary_floor_divide.2 = origsize // known_size.2 ['$122binary_floor_divide.2', 'known_size.2', 'origsize']
    inferred.1 = $122binary_floor_divide.2   ['$122binary_floor_divide.2', 'inferred.1']
    $130binary_modulo.5 = origsize % known_size.2 ['$130binary_modulo.5', 'known_size.2', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    $134compare_op.7 = $130binary_modulo.5 == $const132.6 ['$130binary_modulo.5', '$134compare_op.7', '$const132.6']
    ok.1 = $134compare_op.7                  ['$134compare_op.7', 'ok.1']
    jump 138                                 []
label 138:
    ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1619), Var(ok.1, arrayobj.py:1622)], incoming_blocks=[104, 118]) ['ok', 'ok.1', 'ok.2']
    inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118]) ['inferred', 'inferred.1', 'inferred.2']
    branch ok.2, 150, 142                    ['ok.2']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1624)], kws=(), vararg=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise <class 'ValueError'>('total size of new array must be unchanged') []
label 150:
    shape[neg_ax] = inferred.2               ['inferred.2', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1628)], kws=(), vararg=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise <class 'ValueError'>('multiple negative shape values') []
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']
label 169:
    num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36]) ['num_neg_value.1', 'num_neg_value.2', 'num_neg_value.3']
    known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36]) ['known_size.1', 'known_size.2', 'known_size.3']
    jump 20                                  []

2020-06-11 12:07:02,386:DEBUG:================================================================================
2020-06-11 12:07:02,668:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2781)
           2	LOAD_GLOBAL(arg=0, lineno=2781)
           4	LOAD_FAST(arg=1, lineno=2781)
           6	CALL_FUNCTION(arg=1, lineno=2781)
           8	LOAD_METHOD(arg=1, lineno=2781)
          10	CALL_METHOD(arg=0, lineno=2781)
          12	STORE_FAST(arg=3, lineno=2781)
          14	LOAD_DEREF(arg=0, lineno=2782)
          16	LOAD_FAST(arg=0, lineno=2782)
          18	LOAD_FAST(arg=3, lineno=2782)
          20	CALL_FUNCTION(arg=2, lineno=2782)
          22	POP_TOP(arg=None, lineno=2782)
          24	LOAD_GLOBAL(arg=2, lineno=2783)
          26	LOAD_FAST(arg=0, lineno=2783)
          28	LOAD_FAST(arg=1, lineno=2783)
          30	LOAD_FAST(arg=2, lineno=2783)
          32	CALL_FUNCTION(arg=3, lineno=2783)
          34	POP_TOP(arg=None, lineno=2783)
          36	LOAD_CONST(arg=0, lineno=2783)
          38	RETURN_VALUE(arg=None, lineno=2783)
2020-06-11 12:07:02,668:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,668:DEBUG:stack: []
2020-06-11 12:07:02,668:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack []
2020-06-11 12:07:02,668:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack []
2020-06-11 12:07:02,668:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,668:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack ['$2load_global.0', '$val4.1']
2020-06-11 12:07:02,668:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack ['$6call_function.2']
2020-06-11 12:07:02,668:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack ['$8load_method.3']
2020-06-11 12:07:02,668:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=2781)
2020-06-11 12:07:02,668:DEBUG:stack ['$10call_method.4']
2020-06-11 12:07:02,668:DEBUG:dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=2782)
2020-06-11 12:07:02,668:DEBUG:stack []
2020-06-11 12:07:02,669:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2782)
2020-06-11 12:07:02,669:DEBUG:stack ['$14load_deref.5']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=2782)
2020-06-11 12:07:02,669:DEBUG:stack ['$14load_deref.5', '$a16.6']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=2782)
2020-06-11 12:07:02,669:DEBUG:stack ['$14load_deref.5', '$a16.6', '$tmpval18.7']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=22, inst=POP_TOP(arg=None, lineno=2782)
2020-06-11 12:07:02,669:DEBUG:stack ['$20call_function.8']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack []
2020-06-11 12:07:02,669:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack ['$24load_global.9']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack ['$24load_global.9', '$a26.10']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack ['$24load_global.9', '$a26.10', '$val28.11']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=3, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack ['$24load_global.9', '$a26.10', '$val28.11', '$wrap30.12']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=34, inst=POP_TOP(arg=None, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack ['$32call_function.13']
2020-06-11 12:07:02,669:DEBUG:dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=2783)
2020-06-11 12:07:02,669:DEBUG:stack []
2020-06-11 12:07:02,669:DEBUG:dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=2783)
2020-06-11 12:07:02,670:DEBUG:stack ['$const36.14']
2020-06-11 12:07:02,670:DEBUG:end state. edges=[]
2020-06-11 12:07:02,670:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,670:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,670:DEBUG:defmap: {}
2020-06-11 12:07:02,670:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,670:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,670:DEBUG:keep phismap: {}
2020-06-11 12:07:02,670:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,670:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,670:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val4.1'}), (6, {'func': '$2load_global.0', 'args': ['$val4.1'], 'res': '$6call_function.2'}), (8, {'item': '$6call_function.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'res': '$a16.6'}), (18, {'res': '$tmpval18.7'}), (20, {'func': '$14load_deref.5', 'args': ['$a16.6', '$tmpval18.7'], 'res': '$20call_function.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$a26.10'}), (28, {'res': '$val28.11'}), (30, {'res': '$wrap30.12'}), (32, {'func': '$24load_global.9', 'args': ['$a26.10', '$val28.11', '$wrap30.12'], 'res': '$32call_function.13'}), (36, {'res': '$const36.14'}), (38, {'retval': '$const36.14', 'castval': '$38return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,671:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7fc4548ae3b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7fc4548ae170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7fc4548a1e60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:07:02,674:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,674:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7fc4548ae3b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7fc4548ae170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7fc4548a1e60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:07:02,674:DEBUG:================================================================================
2020-06-11 12:07:02,674:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,674:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544ce390>
2020-06-11 12:07:02,674:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:02,674:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:07:02,674:DEBUG:on stmt: wrap = arg(2, name=wrap)
2020-06-11 12:07:02,674:DEBUG:on stmt: $2load_global.0 = global(_asarray: <function _asarray at 0x7fc4548ae3b0>)
2020-06-11 12:07:02,674:DEBUG:on stmt: $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:07:02,674:DEBUG:on stmt: $8load_method.3 = getattr(value=$6call_function.2, attr=flatten)
2020-06-11 12:07:02,675:DEBUG:on stmt: $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,675:DEBUG:on stmt: tmpval = $10call_method.4
2020-06-11 12:07:02,675:DEBUG:on stmt: $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7fc4548ae170>)
2020-06-11 12:07:02,675:DEBUG:on stmt: $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:07:02,675:DEBUG:on stmt: $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7fc4548a1e60>)
2020-06-11 12:07:02,675:DEBUG:on stmt: $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None)
2020-06-11 12:07:02,675:DEBUG:on stmt: $const36.14 = const(NoneType, None)
2020-06-11 12:07:02,675:DEBUG:on stmt: $38return_value.15 = cast(value=$const36.14)
2020-06-11 12:07:02,675:DEBUG:on stmt: return $38return_value.15
2020-06-11 12:07:02,675:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc44e6eb910>],
             '$14load_deref.5': [<numba.core.ir.Assign object at 0x7fc44e6ebad0>],
             '$20call_function.8': [<numba.core.ir.Assign object at 0x7fc44e6ebd90>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x7fc44e6ebe50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e6eb4d0>],
             '$32call_function.13': [<numba.core.ir.Assign object at 0x7fc44e6f0210>],
             '$38return_value.15': [<numba.core.ir.Assign object at 0x7fc44e6f0410>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fc44e6eb710>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fc44e6eb7d0>],
             '$const36.14': [<numba.core.ir.Assign object at 0x7fc44e6f02d0>],
             'a': [<numba.core.ir.Assign object at 0x7fc44e6eb190>],
             'tmpval': [<numba.core.ir.Assign object at 0x7fc44e6eb9d0>],
             'val': [<numba.core.ir.Assign object at 0x7fc44e6eb2d0>],
             'wrap': [<numba.core.ir.Assign object at 0x7fc44e6eb390>]})
2020-06-11 12:07:02,675:DEBUG:SSA violators set()
2020-06-11 12:07:02,675:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,675:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_asarray: <function _asarray at 0x7fc4548ae3b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, arraymath.py:2781)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val']
    $8load_method.3 = getattr(value=$6call_function.2, attr=flatten) ['$6call_function.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None) ['$10call_method.4', '$8load_method.3']
    tmpval = $10call_method.4                ['$10call_method.4', 'tmpval']
    $14load_deref.5 = freevar(checker: <function _check_val_float at 0x7fc4548ae170>) ['$14load_deref.5']
    $20call_function.8 = call $14load_deref.5(a, tmpval, func=$14load_deref.5, args=[Var(a, arraymath.py:2781), Var(tmpval, arraymath.py:2781)], kws=(), vararg=None) ['$14load_deref.5', '$20call_function.8', 'a', 'tmpval']
    $24load_global.9 = global(_fill_diagonal_scalar: <function _fill_diagonal_scalar at 0x7fc4548a1e60>) ['$24load_global.9']
    $32call_function.13 = call $24load_global.9(a, val, wrap, func=$24load_global.9, args=[Var(a, arraymath.py:2781), Var(val, arraymath.py:2781), Var(wrap, arraymath.py:2781)], kws=(), vararg=None) ['$24load_global.9', '$32call_function.13', 'a', 'val', 'wrap']
    $const36.14 = const(NoneType, None)      ['$const36.14']
    $38return_value.15 = cast(value=$const36.14) ['$38return_value.15', '$const36.14']
    return $38return_value.15                ['$38return_value.15']

2020-06-11 12:07:02,675:DEBUG:================================================================================
2020-06-11 12:07:02,677:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2763)
           2	LOAD_GLOBAL(arg=0, lineno=2763)
           4	LOAD_ATTR(arg=1, lineno=2763)
           6	LOAD_FAST(arg=0, lineno=2763)
           8	BUILD_LIST(arg=1, lineno=2763)
          10	LOAD_DEREF(arg=0, lineno=2763)
          12	LOAD_CONST(arg=1, lineno=2763)
          14	CALL_FUNCTION_KW(arg=2, lineno=2763)
          16	RETURN_VALUE(arg=None, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,677:DEBUG:stack: []
2020-06-11 12:07:02,677:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack []
2020-06-11 12:07:02,677:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack []
2020-06-11 12:07:02,677:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,677:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:02,677:DEBUG:dispatch pc=8, inst=BUILD_LIST(arg=1, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack ['$4load_attr.1', '$x6.2']
2020-06-11 12:07:02,677:DEBUG:dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack ['$4load_attr.1', '$8build_list.3']
2020-06-11 12:07:02,677:DEBUG:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=2763)
2020-06-11 12:07:02,677:DEBUG:stack ['$4load_attr.1', '$8build_list.3', '$10load_deref.4']
2020-06-11 12:07:02,678:DEBUG:dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=2763)
2020-06-11 12:07:02,678:DEBUG:stack ['$4load_attr.1', '$8build_list.3', '$10load_deref.4', '$const12.5']
2020-06-11 12:07:02,678:DEBUG:dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=2763)
2020-06-11 12:07:02,678:DEBUG:stack ['$14call_function_kw.6']
2020-06-11 12:07:02,678:DEBUG:end state. edges=[]
2020-06-11 12:07:02,678:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,678:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,678:DEBUG:defmap: {}
2020-06-11 12:07:02,678:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,678:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,678:DEBUG:keep phismap: {}
2020-06-11 12:07:02,678:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,678:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,678:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$x6.2'}), (8, {'items': ['$x6.2'], 'res': '$8build_list.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8build_list.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'retval': '$14call_function_kw.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,679:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:02,681:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,681:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:02,681:DEBUG:================================================================================
2020-06-11 12:07:02,681:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,681:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6b6590>
2020-06-11 12:07:02,681:DEBUG:on stmt: x = arg(0, name=x)
2020-06-11 12:07:02,681:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,681:DEBUG:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=array)
2020-06-11 12:07:02,681:DEBUG:on stmt: $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)])
2020-06-11 12:07:02,681:DEBUG:on stmt: $10load_deref.4 = freevar(ty: int64)
2020-06-11 12:07:02,681:DEBUG:on stmt: $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None)
2020-06-11 12:07:02,681:DEBUG:on stmt: $16return_value.7 = cast(value=$14call_function_kw.6)
2020-06-11 12:07:02,681:DEBUG:on stmt: return $16return_value.7
2020-06-11 12:07:02,681:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x7fc44e6ba110>],
             '$14call_function_kw.6': [<numba.core.ir.Assign object at 0x7fc44e6b6850>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7fc44e6b6050>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e6b6c90>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc44e6b6d90>],
             '$8build_list.3': [<numba.core.ir.Assign object at 0x7fc44e6b6fd0>],
             'x': [<numba.core.ir.Assign object at 0x7fc44e6b6b90>]})
2020-06-11 12:07:02,681:DEBUG:SSA violators set()
2020-06-11 12:07:02,682:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,682:DEBUG:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_attr.1']
    $8build_list.3 = build_list(items=[Var(x, arraymath.py:2763)]) ['$8build_list.3', 'x']
    $10load_deref.4 = freevar(ty: int64)     ['$10load_deref.4']
    $14call_function_kw.6 = call $4load_attr.1($8build_list.3, func=$4load_attr.1, args=[Var($8build_list.3, arraymath.py:2763)], kws=[('dtype', Var($10load_deref.4, arraymath.py:2763))], vararg=None) ['$10load_deref.4', '$14call_function_kw.6', '$4load_attr.1', '$8build_list.3']
    $16return_value.7 = cast(value=$14call_function_kw.6) ['$14call_function_kw.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:02,682:DEBUG:================================================================================
2020-06-11 12:07:02,707:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2737)
           2	LOAD_GLOBAL(arg=0, lineno=2737)
           4	LOAD_METHOD(arg=1, lineno=2737)
           6	LOAD_FAST(arg=0, lineno=2737)
           8	LOAD_ATTR(arg=2, lineno=2737)
          10	CALL_METHOD(arg=1, lineno=2737)
          12	STORE_FAST(arg=2, lineno=2737)
          14	LOAD_FAST(arg=2, lineno=2738)
          16	LOAD_ATTR(arg=3, lineno=2738)
          18	STORE_FAST(arg=3, lineno=2738)
          20	LOAD_FAST(arg=2, lineno=2739)
          22	LOAD_ATTR(arg=4, lineno=2739)
          24	STORE_FAST(arg=4, lineno=2739)
          26	LOAD_FAST(arg=1, lineno=2742)
          28	LOAD_GLOBAL(arg=0, lineno=2742)
          30	LOAD_METHOD(arg=5, lineno=2742)
          32	LOAD_FAST(arg=1, lineno=2742)
          34	CALL_METHOD(arg=1, lineno=2742)
          36	BINARY_SUBSCR(arg=None, lineno=2742)
          38	STORE_FAST(arg=5, lineno=2742)
          40	LOAD_GLOBAL(arg=0, lineno=2743)
          42	LOAD_METHOD(arg=6, lineno=2743)
          44	LOAD_FAST(arg=5, lineno=2743)
          46	LOAD_FAST(arg=3, lineno=2743)
          48	COMPARE_OP(arg=0, lineno=2743)
          50	CALL_METHOD(arg=1, lineno=2743)
          52	POP_JUMP_IF_TRUE(arg=68, lineno=2743)
          54	LOAD_GLOBAL(arg=0, lineno=2743)
          56	LOAD_METHOD(arg=6, lineno=2743)
          58	LOAD_FAST(arg=5, lineno=2743)
          60	LOAD_FAST(arg=4, lineno=2743)
          62	COMPARE_OP(arg=4, lineno=2743)
          64	CALL_METHOD(arg=1, lineno=2743)
          66	POP_JUMP_IF_FALSE(arg=76, lineno=2743)
>         68	LOAD_GLOBAL(arg=7, lineno=2744)
          70	LOAD_CONST(arg=1, lineno=2744)
          72	CALL_FUNCTION(arg=1, lineno=2744)
          74	RAISE_VARARGS(arg=1, lineno=2744)
>         76	LOAD_CONST(arg=0, lineno=2744)
          78	RETURN_VALUE(arg=None, lineno=2744)
2020-06-11 12:07:02,707:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,707:DEBUG:stack: []
2020-06-11 12:07:02,707:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2737)
2020-06-11 12:07:02,707:DEBUG:stack []
2020-06-11 12:07:02,707:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2737)
2020-06-11 12:07:02,707:DEBUG:stack []
2020-06-11 12:07:02,707:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2737)
2020-06-11 12:07:02,707:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,707:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2737)
2020-06-11 12:07:02,707:DEBUG:stack ['$4load_method.1']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=2737)
2020-06-11 12:07:02,708:DEBUG:stack ['$4load_method.1', '$a6.2']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2737)
2020-06-11 12:07:02,708:DEBUG:stack ['$4load_method.1', '$8load_attr.3']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=2737)
2020-06-11 12:07:02,708:DEBUG:stack ['$10call_method.4']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2738)
2020-06-11 12:07:02,708:DEBUG:stack []
2020-06-11 12:07:02,708:DEBUG:dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=2738)
2020-06-11 12:07:02,708:DEBUG:stack ['$finfo14.5']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=18, inst=STORE_FAST(arg=3, lineno=2738)
2020-06-11 12:07:02,708:DEBUG:stack ['$16load_attr.6']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2739)
2020-06-11 12:07:02,708:DEBUG:stack []
2020-06-11 12:07:02,708:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2739)
2020-06-11 12:07:02,708:DEBUG:stack ['$finfo20.7']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=2739)
2020-06-11 12:07:02,708:DEBUG:stack ['$22load_attr.8']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:07:02,708:DEBUG:stack []
2020-06-11 12:07:02,708:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=0, lineno=2742)
2020-06-11 12:07:02,708:DEBUG:stack ['$val26.9']
2020-06-11 12:07:02,708:DEBUG:dispatch pc=30, inst=LOAD_METHOD(arg=5, lineno=2742)
2020-06-11 12:07:02,708:DEBUG:stack ['$val26.9', '$28load_global.10']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:07:02,709:DEBUG:stack ['$val26.9', '$30load_method.11']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=2742)
2020-06-11 12:07:02,709:DEBUG:stack ['$val26.9', '$30load_method.11', '$val32.12']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=2742)
2020-06-11 12:07:02,709:DEBUG:stack ['$val26.9', '$34call_method.13']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=38, inst=STORE_FAST(arg=5, lineno=2742)
2020-06-11 12:07:02,709:DEBUG:stack ['$36binary_subscr.14']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=40, inst=LOAD_GLOBAL(arg=0, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack []
2020-06-11 12:07:02,709:DEBUG:dispatch pc=42, inst=LOAD_METHOD(arg=6, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$40load_global.15']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$42load_method.16']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$42load_method.16', '$finite_vals44.17']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=0, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$42load_method.16', '$finite_vals44.17', '$v_min46.18']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$42load_method.16', '$48compare_op.19']
2020-06-11 12:07:02,709:DEBUG:dispatch pc=52, inst=POP_JUMP_IF_TRUE(arg=68, lineno=2743)
2020-06-11 12:07:02,709:DEBUG:stack ['$50call_method.20']
2020-06-11 12:07:02,709:DEBUG:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,709:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2020-06-11 12:07:02,710:DEBUG:stack: []
2020-06-11 12:07:02,710:DEBUG:dispatch pc=54, inst=LOAD_GLOBAL(arg=0, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack []
2020-06-11 12:07:02,710:DEBUG:dispatch pc=56, inst=LOAD_METHOD(arg=6, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$54load_global.0']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$56load_method.1']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$56load_method.1', '$finite_vals58.2']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=62, inst=COMPARE_OP(arg=4, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$56load_method.1', '$finite_vals58.2', '$v_max60.3']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$56load_method.1', '$62compare_op.4']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=76, lineno=2743)
2020-06-11 12:07:02,710:DEBUG:stack ['$64call_method.5']
2020-06-11 12:07:02,710:DEBUG:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,710:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:07:02,710:DEBUG:stack: []
2020-06-11 12:07:02,710:DEBUG:dispatch pc=68, inst=LOAD_GLOBAL(arg=7, lineno=2744)
2020-06-11 12:07:02,710:DEBUG:stack []
2020-06-11 12:07:02,710:DEBUG:dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=2744)
2020-06-11 12:07:02,710:DEBUG:stack ['$68load_global.0']
2020-06-11 12:07:02,710:DEBUG:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=2744)
2020-06-11 12:07:02,711:DEBUG:stack ['$68load_global.0', '$const70.1']
2020-06-11 12:07:02,711:DEBUG:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=2744)
2020-06-11 12:07:02,711:DEBUG:stack ['$72call_function.2']
2020-06-11 12:07:02,711:DEBUG:end state. edges=[]
2020-06-11 12:07:02,711:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:07:02,711:DEBUG:pending: deque([State(pc_initial=76 nstack_initial=0)])
2020-06-11 12:07:02,711:DEBUG:stack: []
2020-06-11 12:07:02,711:DEBUG:dispatch pc=76, inst=LOAD_CONST(arg=0, lineno=2744)
2020-06-11 12:07:02,711:DEBUG:stack []
2020-06-11 12:07:02,711:DEBUG:dispatch pc=78, inst=RETURN_VALUE(arg=None, lineno=2744)
2020-06-11 12:07:02,711:DEBUG:stack ['$const76.0']
2020-06-11 12:07:02,711:DEBUG:end state. edges=[]
2020-06-11 12:07:02,711:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,711:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set()})
2020-06-11 12:07:02,711:DEBUG:defmap: {}
2020-06-11 12:07:02,711:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,711:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,711:DEBUG:keep phismap: {}
2020-06-11 12:07:02,711:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,712:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,712:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'item': '$a6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$finfo14.5'}), (16, {'item': '$finfo14.5', 'res': '$16load_attr.6'}), (18, {'value': '$16load_attr.6'}), (20, {'res': '$finfo20.7'}), (22, {'item': '$finfo20.7', 'res': '$22load_attr.8'}), (24, {'value': '$22load_attr.8'}), (26, {'res': '$val26.9'}), (28, {'res': '$28load_global.10'}), (30, {'item': '$28load_global.10', 'res': '$30load_method.11'}), (32, {'res': '$val32.12'}), (34, {'func': '$30load_method.11', 'args': ['$val32.12'], 'res': '$34call_method.13'}), (36, {'index': '$34call_method.13', 'target': '$val26.9', 'res': '$36binary_subscr.14'}), (38, {'value': '$36binary_subscr.14'}), (40, {'res': '$40load_global.15'}), (42, {'item': '$40load_global.15', 'res': '$42load_method.16'}), (44, {'res': '$finite_vals44.17'}), (46, {'res': '$v_min46.18'}), (48, {'lhs': '$finite_vals44.17', 'rhs': '$v_min46.18', 'res': '$48compare_op.19'}), (50, {'func': '$42load_method.16', 'args': ['$48compare_op.19'], 'res': '$50call_method.20'}), (52, {'pred': '$50call_method.20'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 68: ()})
2020-06-11 12:07:02,712:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'item': '$54load_global.0', 'res': '$56load_method.1'}), (58, {'res': '$finite_vals58.2'}), (60, {'res': '$v_max60.3'}), (62, {'lhs': '$finite_vals58.2', 'rhs': '$v_max60.3', 'res': '$62compare_op.4'}), (64, {'func': '$56load_method.1', 'args': ['$62compare_op.4'], 'res': '$64call_method.5'}), (66, {'pred': '$64call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 76: ()})
2020-06-11 12:07:02,712:DEBUG:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,712:DEBUG:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$const76.0'}), (78, {'retval': '$const76.0', 'castval': '$78return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,713:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:07:02,718:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,719:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise <class 'ValueError'>('Unable to safely conform val to a.dtype') []
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:07:02,719:DEBUG:================================================================================
2020-06-11 12:07:02,719:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,719:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6897d0>
2020-06-11 12:07:02,719:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:02,719:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:07:02,719:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,719:DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=finfo)
2020-06-11 12:07:02,719:DEBUG:on stmt: $8load_attr.3 = getattr(value=a, attr=dtype)
2020-06-11 12:07:02,719:DEBUG:on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None)
2020-06-11 12:07:02,719:DEBUG:on stmt: finfo = $10call_method.4
2020-06-11 12:07:02,719:DEBUG:on stmt: $16load_attr.6 = getattr(value=finfo, attr=min)
2020-06-11 12:07:02,719:DEBUG:on stmt: v_min = $16load_attr.6
2020-06-11 12:07:02,719:DEBUG:on stmt: $22load_attr.8 = getattr(value=finfo, attr=max)
2020-06-11 12:07:02,719:DEBUG:on stmt: v_max = $22load_attr.8
2020-06-11 12:07:02,719:DEBUG:on stmt: $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,719:DEBUG:on stmt: $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite)
2020-06-11 12:07:02,719:DEBUG:on stmt: $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None)
2020-06-11 12:07:02,720:DEBUG:on stmt: $36binary_subscr.14 = getitem(value=val, index=$34call_method.13)
2020-06-11 12:07:02,720:DEBUG:on stmt: finite_vals = $36binary_subscr.14
2020-06-11 12:07:02,720:DEBUG:on stmt: $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,720:DEBUG:on stmt: $42load_method.16 = getattr(value=$40load_global.15, attr=any)
2020-06-11 12:07:02,720:DEBUG:on stmt: $48compare_op.19 = finite_vals < v_min
2020-06-11 12:07:02,720:DEBUG:on stmt: $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None)
2020-06-11 12:07:02,720:DEBUG:on stmt: branch $50call_method.20, 68, 54
2020-06-11 12:07:02,720:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:07:02,720:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6897d0>
2020-06-11 12:07:02,720:DEBUG:on stmt: $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,720:DEBUG:on stmt: $56load_method.1 = getattr(value=$54load_global.0, attr=any)
2020-06-11 12:07:02,720:DEBUG:on stmt: $62compare_op.4 = finite_vals > v_max
2020-06-11 12:07:02,720:DEBUG:on stmt: $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None)
2020-06-11 12:07:02,720:DEBUG:on stmt: branch $64call_method.5, 68, 76
2020-06-11 12:07:02,720:DEBUG:==== SSA block analysis pass on 68
2020-06-11 12:07:02,720:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6897d0>
2020-06-11 12:07:02,720:DEBUG:on stmt: $68load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,720:DEBUG:on stmt: $const70.1 = const(str, Unable to safely conform val to a.dtype)
2020-06-11 12:07:02,720:DEBUG:on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None)
2020-06-11 12:07:02,720:DEBUG:on stmt: raise <class 'ValueError'>('Unable to safely conform val to a.dtype')
2020-06-11 12:07:02,720:DEBUG:==== SSA block analysis pass on 76
2020-06-11 12:07:02,720:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6897d0>
2020-06-11 12:07:02,720:DEBUG:on stmt: $const76.0 = const(NoneType, None)
2020-06-11 12:07:02,721:DEBUG:on stmt: $78return_value.1 = cast(value=$const76.0)
2020-06-11 12:07:02,721:DEBUG:on stmt: return $78return_value.1
2020-06-11 12:07:02,721:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc44e685050>],
             '$16load_attr.6': [<numba.core.ir.Assign object at 0x7fc44e685290>],
             '$22load_attr.8': [<numba.core.ir.Assign object at 0x7fc44e685510>],
             '$28load_global.10': [<numba.core.ir.Assign object at 0x7fc44e685790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e67fad0>],
             '$30load_method.11': [<numba.core.ir.Assign object at 0x7fc44e685850>],
             '$34call_method.13': [<numba.core.ir.Assign object at 0x7fc44e685a50>],
             '$36binary_subscr.14': [<numba.core.ir.Assign object at 0x7fc44e685b10>],
             '$40load_global.15': [<numba.core.ir.Assign object at 0x7fc44e685cd0>],
             '$42load_method.16': [<numba.core.ir.Assign object at 0x7fc44e685dd0>],
             '$48compare_op.19': [<numba.core.ir.Assign object at 0x7fc44e6890d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc44e67fc90>],
             '$50call_method.20': [<numba.core.ir.Assign object at 0x7fc44e689210>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x7fc44e67fd50>],
             '$56load_method.1': [<numba.core.ir.Assign object at 0x7fc44e689310>],
             '$62compare_op.4': [<numba.core.ir.Assign object at 0x7fc44e689590>],
             '$64call_method.5': [<numba.core.ir.Assign object at 0x7fc44e689710>],
             '$68load_global.0': [<numba.core.ir.Assign object at 0x7fc44e689810>],
             '$72call_function.2': [<numba.core.ir.Assign object at 0x7fc44e689a50>],
             '$78return_value.1': [<numba.core.ir.Assign object at 0x7fc44e689d50>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7fc44e67fed0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fc44e689910>],
             '$const76.0': [<numba.core.ir.Assign object at 0x7fc44e689c10>],
             'a': [<numba.core.ir.Assign object at 0x7fc44e67f910>],
             'finfo': [<numba.core.ir.Assign object at 0x7fc44e685110>],
             'finite_vals': [<numba.core.ir.Assign object at 0x7fc44e685bd0>],
             'v_max': [<numba.core.ir.Assign object at 0x7fc44e6855d0>],
             'v_min': [<numba.core.ir.Assign object at 0x7fc44e685350>],
             'val': [<numba.core.ir.Assign object at 0x7fc44e67fb50>]})
2020-06-11 12:07:02,721:DEBUG:SSA violators set()
2020-06-11 12:07:02,721:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,721:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=finfo) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=a, attr=dtype) ['$8load_attr.3', 'a']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:2737)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    finfo = $10call_method.4                 ['$10call_method.4', 'finfo']
    $16load_attr.6 = getattr(value=finfo, attr=min) ['$16load_attr.6', 'finfo']
    v_min = $16load_attr.6                   ['$16load_attr.6', 'v_min']
    $22load_attr.8 = getattr(value=finfo, attr=max) ['$22load_attr.8', 'finfo']
    v_max = $22load_attr.8                   ['$22load_attr.8', 'v_max']
    $28load_global.10 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$28load_global.10']
    $30load_method.11 = getattr(value=$28load_global.10, attr=isfinite) ['$28load_global.10', '$30load_method.11']
    $34call_method.13 = call $30load_method.11(val, func=$30load_method.11, args=[Var(val, arraymath.py:2737)], kws=(), vararg=None) ['$30load_method.11', '$34call_method.13', 'val']
    $36binary_subscr.14 = getitem(value=val, index=$34call_method.13) ['$34call_method.13', '$36binary_subscr.14', 'val']
    finite_vals = $36binary_subscr.14        ['$36binary_subscr.14', 'finite_vals']
    $40load_global.15 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.15']
    $42load_method.16 = getattr(value=$40load_global.15, attr=any) ['$40load_global.15', '$42load_method.16']
    $48compare_op.19 = finite_vals < v_min   ['$48compare_op.19', 'finite_vals', 'v_min']
    $50call_method.20 = call $42load_method.16($48compare_op.19, func=$42load_method.16, args=[Var($48compare_op.19, arraymath.py:2743)], kws=(), vararg=None) ['$42load_method.16', '$48compare_op.19', '$50call_method.20']
    branch $50call_method.20, 68, 54         ['$50call_method.20']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$54load_global.0']
    $56load_method.1 = getattr(value=$54load_global.0, attr=any) ['$54load_global.0', '$56load_method.1']
    $62compare_op.4 = finite_vals > v_max    ['$62compare_op.4', 'finite_vals', 'v_max']
    $64call_method.5 = call $56load_method.1($62compare_op.4, func=$56load_method.1, args=[Var($62compare_op.4, arraymath.py:2743)], kws=(), vararg=None) ['$56load_method.1', '$62compare_op.4', '$64call_method.5']
    branch $64call_method.5, 68, 76          ['$64call_method.5']
label 68:
    $68load_global.0 = global(ValueError: <class 'ValueError'>) ['$68load_global.0']
    $const70.1 = const(str, Unable to safely conform val to a.dtype) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, arraymath.py:2744)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise <class 'ValueError'>('Unable to safely conform val to a.dtype') []
label 76:
    $const76.0 = const(NoneType, None)       ['$const76.0']
    $78return_value.1 = cast(value=$const76.0) ['$78return_value.1', '$const76.0']
    return $78return_value.1                 ['$78return_value.1']

2020-06-11 12:07:02,722:DEBUG:================================================================================
2020-06-11 12:07:02,724:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3658)
           2	LOAD_DEREF(arg=0, lineno=3658)
           4	LOAD_DEREF(arg=1, lineno=3658)
           6	CALL_FUNCTION_EX(arg=0, lineno=3658)
           8	RETURN_VALUE(arg=None, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,724:DEBUG:stack: []
2020-06-11 12:07:02,724:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:stack []
2020-06-11 12:07:02,724:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:stack []
2020-06-11 12:07:02,724:DEBUG:dispatch pc=4, inst=LOAD_DEREF(arg=1, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:02,724:DEBUG:dispatch pc=6, inst=CALL_FUNCTION_EX(arg=0, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:stack ['$2load_deref.0', '$4load_deref.1']
2020-06-11 12:07:02,724:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3658)
2020-06-11 12:07:02,724:DEBUG:stack ['$6call_function_ex.2']
2020-06-11 12:07:02,724:DEBUG:end state. edges=[]
2020-06-11 12:07:02,724:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,724:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,724:DEBUG:defmap: {}
2020-06-11 12:07:02,724:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,724:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,725:DEBUG:keep phismap: {}
2020-06-11 12:07:02,725:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,725:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,725:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_deref.1'}), (6, {'func': '$2load_deref.0', 'vararg': '$4load_deref.1', 'res': '$6call_function_ex.2'}), (8, {'retval': '$6call_function_ex.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,725:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,726:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,727:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,727:DEBUG:================================================================================
2020-06-11 12:07:02,727:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,727:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e695e90>
2020-06-11 12:07:02,727:DEBUG:on stmt: arg = arg(0, name=arg)
2020-06-11 12:07:02,727:DEBUG:on stmt: $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>)
2020-06-11 12:07:02,727:DEBUG:on stmt: $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64))
2020-06-11 12:07:02,727:DEBUG:on stmt: $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1)
2020-06-11 12:07:02,727:DEBUG:on stmt: $8return_value.3 = cast(value=$6call_function_ex.2)
2020-06-11 12:07:02,727:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:02,727:DEBUG:defs defaultdict(<class 'list'>,
            {'$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e699b10>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x7fc44e699c10>],
             '$6call_function_ex.2': [<numba.core.ir.Assign object at 0x7fc44e699d10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e691f90>],
             'arg': [<numba.core.ir.Assign object at 0x7fc44e699a50>]})
2020-06-11 12:07:02,727:DEBUG:SSA violators set()
2020-06-11 12:07:02,727:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,727:DEBUG:label 0:
    arg = arg(0, name=arg)                   ['arg']
    $2load_deref.0 = freevar(container: <class 'numba.np.arraymath.finfo'>) ['$2load_deref.0']
    $4load_deref.1 = freevar(data: (2.220446049250313e-16, 1.1102230246251565e-16, 11, -52, 1.7976931348623157e+308, 1024, -1.7976931348623157e+308, -1022, -53, 11, 52, 15, 1e-15, 2.2250738585072014e-308, 64)) ['$4load_deref.1']
    $6call_function_ex.2 = call $2load_deref.0(*$4load_deref.1, func=$2load_deref.0, args=[], kws=[], vararg=$4load_deref.1) ['$2load_deref.0', '$4load_deref.1', '$6call_function_ex.2']
    $8return_value.3 = cast(value=$6call_function_ex.2) ['$6call_function_ex.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,727:DEBUG:================================================================================
2020-06-11 12:07:02,751:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=651)
           2	SETUP_LOOP(arg=30, lineno=651)
           4	LOAD_GLOBAL(arg=0, lineno=651)
           6	LOAD_METHOD(arg=1, lineno=651)
           8	LOAD_FAST(arg=0, lineno=651)
          10	CALL_METHOD(arg=1, lineno=651)
          12	GET_ITER(arg=None, lineno=651)
>         14	FOR_ITER(arg=16, lineno=651)
          16	STORE_FAST(arg=1, lineno=651)
          18	LOAD_FAST(arg=1, lineno=652)
          20	LOAD_METHOD(arg=2, lineno=652)
          22	CALL_METHOD(arg=0, lineno=652)
          24	POP_JUMP_IF_FALSE(arg=14, lineno=652)
          26	LOAD_CONST(arg=1, lineno=653)
          28	RETURN_VALUE(arg=None, lineno=653)
          30	JUMP_ABSOLUTE(arg=14, lineno=653)
>         32	POP_BLOCK(arg=None, lineno=653)
>         34	LOAD_CONST(arg=2, lineno=654)
          36	RETURN_VALUE(arg=None, lineno=654)
2020-06-11 12:07:02,751:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,751:DEBUG:stack: []
2020-06-11 12:07:02,751:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=651)
2020-06-11 12:07:02,751:DEBUG:stack []
2020-06-11 12:07:02,751:DEBUG:end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,751:DEBUG:pending: deque([State(pc_initial=2 nstack_initial=0)])
2020-06-11 12:07:02,751:DEBUG:stack: []
2020-06-11 12:07:02,751:DEBUG:dispatch pc=2, inst=SETUP_LOOP(arg=30, lineno=651)
2020-06-11 12:07:02,751:DEBUG:stack []
2020-06-11 12:07:02,751:DEBUG:dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=651)
2020-06-11 12:07:02,751:DEBUG:stack []
2020-06-11 12:07:02,751:DEBUG:dispatch pc=6, inst=LOAD_METHOD(arg=1, lineno=651)
2020-06-11 12:07:02,751:DEBUG:stack ['$4load_global.0']
2020-06-11 12:07:02,751:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=651)
2020-06-11 12:07:02,752:DEBUG:stack ['$6load_method.1']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=651)
2020-06-11 12:07:02,752:DEBUG:stack ['$6load_method.1', '$a8.2']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=12, inst=GET_ITER(arg=None, lineno=651)
2020-06-11 12:07:02,752:DEBUG:stack ['$10call_method.3']
2020-06-11 12:07:02,752:DEBUG:end state. edges=[Edge(pc=14, stack=('$12get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,752:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:02,752:DEBUG:stack: ['$phi14.0']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=14, inst=FOR_ITER(arg=16, lineno=651)
2020-06-11 12:07:02,752:DEBUG:stack ['$phi14.0']
2020-06-11 12:07:02,752:DEBUG:end state. edges=[Edge(pc=32, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,752:DEBUG:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
2020-06-11 12:07:02,752:DEBUG:stack: []
2020-06-11 12:07:02,752:DEBUG:dispatch pc=32, inst=POP_BLOCK(arg=None, lineno=653)
2020-06-11 12:07:02,752:DEBUG:stack []
2020-06-11 12:07:02,752:DEBUG:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,752:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=2), State(pc_initial=34 nstack_initial=0)])
2020-06-11 12:07:02,752:DEBUG:stack: ['$phi16.0', '$phi16.1']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=1, lineno=651)
2020-06-11 12:07:02,752:DEBUG:stack ['$phi16.0', '$phi16.1']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=652)
2020-06-11 12:07:02,752:DEBUG:stack ['$phi16.0']
2020-06-11 12:07:02,752:DEBUG:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=652)
2020-06-11 12:07:02,752:DEBUG:stack ['$phi16.0', '$v18.2']
2020-06-11 12:07:02,753:DEBUG:dispatch pc=22, inst=CALL_METHOD(arg=0, lineno=652)
2020-06-11 12:07:02,753:DEBUG:stack ['$phi16.0', '$20load_method.3']
2020-06-11 12:07:02,753:DEBUG:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=14, lineno=652)
2020-06-11 12:07:02,753:DEBUG:stack ['$phi16.0', '$22call_method.4']
2020-06-11 12:07:02,753:DEBUG:end state. edges=[Edge(pc=26, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,753:DEBUG:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=26 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:02,753:DEBUG:stack: []
2020-06-11 12:07:02,753:DEBUG:dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=654)
2020-06-11 12:07:02,753:DEBUG:stack []
2020-06-11 12:07:02,753:DEBUG:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=654)
2020-06-11 12:07:02,753:DEBUG:stack ['$const34.0']
2020-06-11 12:07:02,753:DEBUG:end state. edges=[]
2020-06-11 12:07:02,753:DEBUG:pending: deque([State(pc_initial=26 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:02,753:DEBUG:stack: ['$phi26.0']
2020-06-11 12:07:02,753:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=653)
2020-06-11 12:07:02,753:DEBUG:stack ['$phi26.0']
2020-06-11 12:07:02,753:DEBUG:dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=653)
2020-06-11 12:07:02,753:DEBUG:stack ['$phi26.0', '$const26.1']
2020-06-11 12:07:02,753:DEBUG:end state. edges=[]
2020-06-11 12:07:02,753:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:02,753:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,754:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=26 nstack_initial=1): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set()})
2020-06-11 12:07:02,754:DEBUG:defmap: {'$phi14.0': State(pc_initial=2 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
2020-06-11 12:07:02,754:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
2020-06-11 12:07:02,754:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:07:02,754:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:07:02,754:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi26.0': {('$12get_iter.4',
                           State(pc_initial=2 nstack_initial=0))}})
2020-06-11 12:07:02,754:DEBUG:keep phismap: {'$phi14.0': {('$12get_iter.4', State(pc_initial=2 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
2020-06-11 12:07:02,755:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi14.0': '$12get_iter.4'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
2020-06-11 12:07:02,755:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'item': '$4load_global.0', 'res': '$6load_method.1'}), (8, {'res': '$a8.2'}), (10, {'func': '$6load_method.1', 'args': ['$a8.2'], 'res': '$10call_method.3'}), (12, {'value': '$10call_method.3', 'res': '$12get_iter.4'})), outgoing_phis={'$phi14.0': '$12get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.4',)})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: (), 16: ('$phi14.0', '$14for_iter.2')})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$v18.2'}), (20, {'item': '$v18.2', 'res': '$20load_method.3'}), (22, {'func': '$20load_method.3', 'args': [], 'res': '$22call_method.4'}), (24, {'pred': '$22call_method.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={26: ('$phi16.0',), 14: ('$phi16.0',)})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'res': '$const26.1'}), (28, {'retval': '$const26.1', 'castval': '$28return_value.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 34, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={34: ()})
2020-06-11 12:07:02,755:DEBUG:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,756:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:07:02,761:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,762:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:07:02,762:DEBUG:================================================================================
2020-06-11 12:07:02,762:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,762:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:02,762:DEBUG:on stmt: jump 2
2020-06-11 12:07:02,762:DEBUG:==== SSA block analysis pass on 2
2020-06-11 12:07:02,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,762:DEBUG:on stmt: $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:02,762:DEBUG:on stmt: $6load_method.1 = getattr(value=$4load_global.0, attr=nditer)
2020-06-11 12:07:02,762:DEBUG:on stmt: $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None)
2020-06-11 12:07:02,762:DEBUG:on stmt: $12get_iter.4 = getiter(value=$10call_method.3)
2020-06-11 12:07:02,762:DEBUG:on stmt: $phi14.0 = $12get_iter.4
2020-06-11 12:07:02,762:DEBUG:on stmt: jump 14
2020-06-11 12:07:02,762:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:07:02,762:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,762:DEBUG:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
2020-06-11 12:07:02,762:DEBUG:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
2020-06-11 12:07:02,763:DEBUG:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
2020-06-11 12:07:02,763:DEBUG:on stmt: $phi16.1 = $14for_iter.2
2020-06-11 12:07:02,763:DEBUG:on stmt: branch $14for_iter.3, 16, 32
2020-06-11 12:07:02,763:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:07:02,763:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,763:DEBUG:on stmt: v = $phi16.1
2020-06-11 12:07:02,763:DEBUG:on stmt: $20load_method.3 = getattr(value=v, attr=item)
2020-06-11 12:07:02,763:DEBUG:on stmt: $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None)
2020-06-11 12:07:02,763:DEBUG:on stmt: branch $22call_method.4, 26, 14
2020-06-11 12:07:02,763:DEBUG:==== SSA block analysis pass on 26
2020-06-11 12:07:02,763:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,763:DEBUG:on stmt: $const26.1 = const(bool, True)
2020-06-11 12:07:02,763:DEBUG:on stmt: $28return_value.2 = cast(value=$const26.1)
2020-06-11 12:07:02,763:DEBUG:on stmt: return $28return_value.2
2020-06-11 12:07:02,763:DEBUG:==== SSA block analysis pass on 32
2020-06-11 12:07:02,763:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,763:DEBUG:on stmt: jump 34
2020-06-11 12:07:02,763:DEBUG:==== SSA block analysis pass on 34
2020-06-11 12:07:02,763:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e620850>
2020-06-11 12:07:02,763:DEBUG:on stmt: $const34.0 = const(bool, False)
2020-06-11 12:07:02,763:DEBUG:on stmt: $36return_value.1 = cast(value=$const34.0)
2020-06-11 12:07:02,763:DEBUG:on stmt: return $36return_value.1
2020-06-11 12:07:02,764:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.3': [<numba.core.ir.Assign object at 0x7fc44e5a5210>],
             '$12get_iter.4': [<numba.core.ir.Assign object at 0x7fc44e5a5310>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e5a5590>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e5a5650>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e5a5710>],
             '$20load_method.3': [<numba.core.ir.Assign object at 0x7fc44e5a5b10>],
             '$22call_method.4': [<numba.core.ir.Assign object at 0x7fc44e5a5c50>],
             '$28return_value.2': [<numba.core.ir.Assign object at 0x7fc44e5a5f50>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7fc44e5ae310>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x7fc44e620ed0>],
             '$6load_method.1': [<numba.core.ir.Assign object at 0x7fc44e620e90>],
             '$const26.1': [<numba.core.ir.Assign object at 0x7fc44e5a5e10>],
             '$const34.0': [<numba.core.ir.Assign object at 0x7fc44e5ae210>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x7fc44e5a5350>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x7fc44e5a54d0>],
             'a': [<numba.core.ir.Assign object at 0x7fc44e620cd0>],
             'v': [<numba.core.ir.Assign object at 0x7fc44e5a5950>]})
2020-06-11 12:07:02,764:DEBUG:SSA violators set()
2020-06-11 12:07:02,764:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,764:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    jump 2                                   []
label 2:
    $4load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $6load_method.1 = getattr(value=$4load_global.0, attr=nditer) ['$4load_global.0', '$6load_method.1']
    $10call_method.3 = call $6load_method.1(a, func=$6load_method.1, args=[Var(a, arraymath.py:651)], kws=(), vararg=None) ['$10call_method.3', '$6load_method.1', 'a']
    $12get_iter.4 = getiter(value=$10call_method.3) ['$10call_method.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 32             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $20load_method.3 = getattr(value=v, attr=item) ['$20load_method.3', 'v']
    $22call_method.4 = call $20load_method.3(func=$20load_method.3, args=[], kws=(), vararg=None) ['$20load_method.3', '$22call_method.4']
    branch $22call_method.4, 26, 14          ['$22call_method.4']
label 26:
    $const26.1 = const(bool, True)           ['$const26.1']
    $28return_value.2 = cast(value=$const26.1) ['$28return_value.2', '$const26.1']
    return $28return_value.2                 ['$28return_value.2']
label 32:
    jump 34                                  []
label 34:
    $const34.0 = const(bool, False)          ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

2020-06-11 12:07:02,764:DEBUG:================================================================================
2020-06-11 12:07:02,775:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2716)
           2	LOAD_GLOBAL(arg=0, lineno=2716)
           4	LOAD_FAST(arg=0, lineno=2716)
           6	CALL_FUNCTION(arg=1, lineno=2716)
           8	STORE_FAST(arg=2, lineno=2716)
          10	SETUP_LOOP(arg=52, lineno=2717)
          12	LOAD_GLOBAL(arg=1, lineno=2717)
          14	LOAD_FAST(arg=2, lineno=2717)
          16	CALL_FUNCTION(arg=1, lineno=2717)
          18	GET_ITER(arg=None, lineno=2717)
>         20	FOR_ITER(arg=40, lineno=2717)
          22	STORE_FAST(arg=3, lineno=2717)
          24	LOAD_FAST(arg=0, lineno=2718)
          26	LOAD_FAST(arg=3, lineno=2718)
          28	BINARY_SUBSCR(arg=None, lineno=2718)
          30	LOAD_FAST(arg=1, lineno=2718)
          32	LOAD_GLOBAL(arg=0, lineno=2718)
          34	LOAD_FAST(arg=1, lineno=2718)
          36	CALL_FUNCTION(arg=1, lineno=2718)
          38	LOAD_FAST(arg=2, lineno=2718)
          40	BINARY_SUBTRACT(arg=None, lineno=2718)
          42	LOAD_FAST(arg=3, lineno=2718)
          44	BINARY_ADD(arg=None, lineno=2718)
          46	BINARY_SUBSCR(arg=None, lineno=2718)
          48	COMPARE_OP(arg=3, lineno=2718)
          50	POP_JUMP_IF_FALSE(arg=20, lineno=2718)
          52	LOAD_GLOBAL(arg=2, lineno=2719)
          54	LOAD_CONST(arg=1, lineno=2719)
          56	CALL_FUNCTION(arg=1, lineno=2719)
          58	RAISE_VARARGS(arg=1, lineno=2719)
          60	JUMP_ABSOLUTE(arg=20, lineno=2719)
>         62	POP_BLOCK(arg=None, lineno=2719)
>         64	LOAD_CONST(arg=0, lineno=2719)
          66	RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:07:02,775:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,775:DEBUG:stack: []
2020-06-11 12:07:02,775:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2716)
2020-06-11 12:07:02,775:DEBUG:stack []
2020-06-11 12:07:02,775:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2716)
2020-06-11 12:07:02,775:DEBUG:stack []
2020-06-11 12:07:02,775:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2716)
2020-06-11 12:07:02,775:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,775:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2716)
2020-06-11 12:07:02,775:DEBUG:stack ['$2load_global.0', '$shape4.1']
2020-06-11 12:07:02,775:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2716)
2020-06-11 12:07:02,775:DEBUG:stack ['$6call_function.2']
2020-06-11 12:07:02,776:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,776:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:07:02,776:DEBUG:stack: []
2020-06-11 12:07:02,776:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=52, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack []
2020-06-11 12:07:02,776:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack []
2020-06-11 12:07:02,776:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack ['$12load_global.0']
2020-06-11 12:07:02,776:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack ['$12load_global.0', '$n14.1']
2020-06-11 12:07:02,776:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack ['$16call_function.2']
2020-06-11 12:07:02,776:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,776:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,776:DEBUG:stack: ['$phi20.0']
2020-06-11 12:07:02,776:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=40, lineno=2717)
2020-06-11 12:07:02,776:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:02,776:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,776:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:07:02,776:DEBUG:stack: []
2020-06-11 12:07:02,776:DEBUG:dispatch pc=62, inst=POP_BLOCK(arg=None, lineno=2719)
2020-06-11 12:07:02,777:DEBUG:stack []
2020-06-11 12:07:02,777:DEBUG:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,777:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=64 nstack_initial=0)])
2020-06-11 12:07:02,777:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=22, inst=STORE_FAST(arg=3, lineno=2717)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$shape24.2']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$shape24.2', '$i26.3']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6', '$main_shape34.7']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=2718)
2020-06-11 12:07:02,777:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8', '$n38.9']
2020-06-11 12:07:02,777:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=2718)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10', '$i42.11']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$44binary_add.12']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=3, lineno=2718)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$46binary_subscr.13']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=20, lineno=2718)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi22.0', '$48compare_op.14']
2020-06-11 12:07:02,778:DEBUG:end state. edges=[Edge(pc=52, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,778:DEBUG:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,778:DEBUG:stack: []
2020-06-11 12:07:02,778:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=2719)
2020-06-11 12:07:02,778:DEBUG:stack []
2020-06-11 12:07:02,778:DEBUG:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:07:02,778:DEBUG:stack ['$const64.0']
2020-06-11 12:07:02,778:DEBUG:end state. edges=[]
2020-06-11 12:07:02,778:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,778:DEBUG:stack: ['$phi52.0']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=2719)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi52.0']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=2719)
2020-06-11 12:07:02,778:DEBUG:stack ['$phi52.0', '$52load_global.1']
2020-06-11 12:07:02,778:DEBUG:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=2719)
2020-06-11 12:07:02,779:DEBUG:stack ['$phi52.0', '$52load_global.1', '$const54.2']
2020-06-11 12:07:02,779:DEBUG:dispatch pc=58, inst=RAISE_VARARGS(arg=1, lineno=2719)
2020-06-11 12:07:02,779:DEBUG:stack ['$phi52.0', '$56call_function.3']
2020-06-11 12:07:02,779:DEBUG:end state. edges=[]
2020-06-11 12:07:02,779:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:02,779:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,779:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=52 nstack_initial=1): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2020-06-11 12:07:02,779:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:07:02,779:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:07:02,779:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,780:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,780:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:02,780:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:07:02,780:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:07:02,780:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$n14.1'}), (16, {'func': '$12load_global.0', 'args': ['$n14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$shape24.2'}), (26, {'res': '$i26.3'}), (28, {'index': '$i26.3', 'target': '$shape24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$main_shape30.5'}), (32, {'res': '$32load_global.6'}), (34, {'res': '$main_shape34.7'}), (36, {'func': '$32load_global.6', 'args': ['$main_shape34.7'], 'res': '$36call_function.8'}), (38, {'res': '$n38.9'}), (40, {'lhs': '$36call_function.8', 'rhs': '$n38.9', 'res': '$40binary_subtract.10'}), (42, {'res': '$i42.11'}), (44, {'lhs': '$40binary_subtract.10', 'rhs': '$i42.11', 'res': '$44binary_add.12'}), (46, {'index': '$44binary_add.12', 'target': '$main_shape30.5', 'res': '$46binary_subscr.13'}), (48, {'lhs': '$28binary_subscr.4', 'rhs': '$46binary_subscr.13', 'res': '$48compare_op.14'}), (50, {'pred': '$48compare_op.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: ('$phi22.0',), 20: ('$phi22.0',)})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.1'}), (54, {'res': '$const54.2'}), (56, {'func': '$52load_global.1', 'args': ['$const54.2'], 'res': '$56call_function.3'}), (58, {'exc': '$56call_function.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ()})
2020-06-11 12:07:02,780:DEBUG:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,781:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2716)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'shape']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = call $32load_global.6(main_shape, func=$32load_global.6, args=[Var(main_shape, arrayobj.py:2716)], kws=(), vararg=None) ['$32load_global.6', '$36call_function.8', 'main_shape']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise $56call_function.3                 ['$56call_function.3']
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:02,787:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,787:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 1)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 1)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:02,787:DEBUG:================================================================================
2020-06-11 12:07:02,787:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,787:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,787:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:07:02,787:DEBUG:on stmt: main_shape = arg(1, name=main_shape)
2020-06-11 12:07:02,787:DEBUG:on stmt: $2load_global.0 = global(len: <built-in function len>)
2020-06-11 12:07:02,787:DEBUG:on stmt: $6call_function.2 = const(int, 1)
2020-06-11 12:07:02,787:DEBUG:on stmt: n = $6call_function.2
2020-06-11 12:07:02,787:DEBUG:on stmt: jump 10
2020-06-11 12:07:02,788:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:07:02,788:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,788:DEBUG:on stmt: $12load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:02,788:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None)
2020-06-11 12:07:02,788:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:02,788:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:02,788:DEBUG:on stmt: jump 20
2020-06-11 12:07:02,788:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:07:02,788:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,788:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:02,788:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:02,788:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:02,788:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:02,788:DEBUG:on stmt: branch $20for_iter.3, 22, 62
2020-06-11 12:07:02,788:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:07:02,788:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,788:DEBUG:on stmt: i = $phi22.1
2020-06-11 12:07:02,788:DEBUG:on stmt: $28binary_subscr.4 = getitem(value=shape, index=i)
2020-06-11 12:07:02,788:DEBUG:on stmt: $32load_global.6 = global(len: <built-in function len>)
2020-06-11 12:07:02,788:DEBUG:on stmt: $36call_function.8 = const(int, 1)
2020-06-11 12:07:02,788:DEBUG:on stmt: $40binary_subtract.10 = $36call_function.8 - n
2020-06-11 12:07:02,788:DEBUG:on stmt: $44binary_add.12 = $40binary_subtract.10 + i
2020-06-11 12:07:02,788:DEBUG:on stmt: $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12)
2020-06-11 12:07:02,788:DEBUG:on stmt: $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13
2020-06-11 12:07:02,788:DEBUG:on stmt: branch $48compare_op.14, 52, 20
2020-06-11 12:07:02,788:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:02,788:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,789:DEBUG:on stmt: $52load_global.1 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:02,789:DEBUG:on stmt: $const54.2 = const(str, nditer(): operands could not be broadcast together)
2020-06-11 12:07:02,789:DEBUG:on stmt: $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None)
2020-06-11 12:07:02,789:DEBUG:on stmt: raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2020-06-11 12:07:02,789:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:07:02,789:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,789:DEBUG:on stmt: jump 64
2020-06-11 12:07:02,789:DEBUG:==== SSA block analysis pass on 64
2020-06-11 12:07:02,789:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e63f9d0>
2020-06-11 12:07:02,789:DEBUG:on stmt: $const64.0 = const(NoneType, None)
2020-06-11 12:07:02,789:DEBUG:on stmt: $66return_value.1 = cast(value=$const64.0)
2020-06-11 12:07:02,789:DEBUG:on stmt: return $66return_value.1
2020-06-11 12:07:02,789:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_global.0': [<numba.core.ir.Assign object at 0x7fc44e645dd0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fc44e645fd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fc44e645110>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e67f350>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e67f610>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e67f3d0>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x7fc44e632850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e645b50>],
             '$32load_global.6': [<numba.core.ir.Assign object at 0x7fc44e632a50>],
             '$36call_function.8': [<numba.core.ir.Assign object at 0x7fc44e632c50>],
             '$40binary_subtract.10': [<numba.core.ir.Assign object at 0x7fc44e632d90>],
             '$44binary_add.12': [<numba.core.ir.Assign object at 0x7fc44e632f90>],
             '$46binary_subscr.13': [<numba.core.ir.Assign object at 0x7fc44e632810>],
             '$48compare_op.14': [<numba.core.ir.Assign object at 0x7fc44e632410>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x7fc44e632e50>],
             '$56call_function.3': [<numba.core.ir.Assign object at 0x7fc44e68f910>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7fc44e68f610>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fc44e645810>],
             '$const54.2': [<numba.core.ir.Assign object at 0x7fc44e68f990>],
             '$const64.0': [<numba.core.ir.Assign object at 0x7fc44e68f690>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fc44e645650>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fc44e67f1d0>],
             'i': [<numba.core.ir.Assign object at 0x7fc44e632250>],
             'main_shape': [<numba.core.ir.Assign object at 0x7fc44e645ad0>],
             'n': [<numba.core.ir.Assign object at 0x7fc44e645c50>],
             'shape': [<numba.core.ir.Assign object at 0x7fc44e645850>]})
2020-06-11 12:07:02,789:DEBUG:SSA violators set()
2020-06-11 12:07:02,789:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,790:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 1)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 1)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:02,790:DEBUG:================================================================================
2020-06-11 12:07:02,878:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2737)
           6	CALL_FUNCTION(arg=1, lineno=2737)
           8	RETURN_VALUE(arg=None, lineno=2737)
2020-06-11 12:07:02,878:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,878:DEBUG:stack: []
2020-06-11 12:07:02,878:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:07:02,878:DEBUG:stack []
2020-06-11 12:07:02,878:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:07:02,878:DEBUG:stack []
2020-06-11 12:07:02,878:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2737)
2020-06-11 12:07:02,878:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:02,879:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2737)
2020-06-11 12:07:02,879:DEBUG:stack ['$2load_global.0', '$val_14.1']
2020-06-11 12:07:02,879:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2737)
2020-06-11 12:07:02,879:DEBUG:stack ['$6call_function.2']
2020-06-11 12:07:02,879:DEBUG:end state. edges=[]
2020-06-11 12:07:02,879:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,879:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,879:DEBUG:defmap: {}
2020-06-11 12:07:02,879:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,879:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,879:DEBUG:keep phismap: {}
2020-06-11 12:07:02,879:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,879:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,879:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val_14.1'}), (6, {'func': '$2load_global.0', 'args': ['$val_14.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,880:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8db5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,881:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,881:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8db5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,881:DEBUG:================================================================================
2020-06-11 12:07:02,881:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,881:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e4ece90>
2020-06-11 12:07:02,881:DEBUG:on stmt: val_1 = arg(0, name=val_1)
2020-06-11 12:07:02,882:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8db5: <ufunc 'isfinite'>)
2020-06-11 12:07:02,882:DEBUG:on stmt: $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None)
2020-06-11 12:07:02,882:DEBUG:on stmt: $8return_value.3 = cast(value=$6call_function.2)
2020-06-11 12:07:02,882:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:02,882:DEBUG:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e4ecb50>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fc44e4ecbd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e4eccd0>],
             'val_1': [<numba.core.ir.Assign object at 0x7fc44e55d650>]})
2020-06-11 12:07:02,882:DEBUG:SSA violators set()
2020-06-11 12:07:02,882:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,882:DEBUG:label 0:
    val_1 = arg(0, name=val_1)               ['val_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8db5: <ufunc 'isfinite'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(val_1, func=$2load_global.0, args=[Var(val_1, arraymath.py:1)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'val_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,882:DEBUG:================================================================================
2020-06-11 12:07:02,892:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=201)
           2	LOAD_FAST(arg=0, lineno=201)
           4	LOAD_FAST(arg=2, lineno=201)
           6	COMPARE_OP(arg=4, lineno=201)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=201)
          10	LOAD_CONST(arg=1, lineno=204)
          12	RETURN_VALUE(arg=None, lineno=204)
>         14	LOAD_CONST(arg=1, lineno=206)
          16	STORE_FAST(arg=4, lineno=206)
          18	LOAD_FAST(arg=2, lineno=207)
          20	LOAD_FAST(arg=0, lineno=207)
          22	BINARY_SUBTRACT(arg=None, lineno=207)
          24	STORE_FAST(arg=5, lineno=207)
          26	SETUP_LOOP(arg=96, lineno=208)
>         28	LOAD_FAST(arg=4, lineno=208)
          30	LOAD_FAST(arg=0, lineno=208)
          32	COMPARE_OP(arg=0, lineno=208)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=208)
          36	LOAD_FAST(arg=1, lineno=209)
          38	LOAD_FAST(arg=4, lineno=209)
          40	BINARY_SUBSCR(arg=None, lineno=209)
          42	STORE_FAST(arg=6, lineno=209)
          44	LOAD_FAST(arg=3, lineno=210)
          46	LOAD_FAST(arg=5, lineno=210)
          48	BINARY_SUBSCR(arg=None, lineno=210)
          50	STORE_FAST(arg=7, lineno=210)
          52	LOAD_FAST(arg=7, lineno=213)
          54	LOAD_CONST(arg=2, lineno=213)
          56	COMPARE_OP(arg=3, lineno=213)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=213)
          60	LOAD_FAST(arg=6, lineno=217)
          62	LOAD_FAST(arg=7, lineno=217)
          64	COMPARE_OP(arg=3, lineno=217)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=217)
          68	LOAD_FAST(arg=6, lineno=217)
          70	LOAD_CONST(arg=2, lineno=217)
          72	COMPARE_OP(arg=3, lineno=217)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=217)
          76	LOAD_FAST(arg=5, lineno=218)
          78	LOAD_CONST(arg=2, lineno=218)
          80	BINARY_ADD(arg=None, lineno=218)
          82	UNARY_NEGATIVE(arg=None, lineno=218)
          84	RETURN_VALUE(arg=None, lineno=218)
          86	JUMP_FORWARD(arg=16, lineno=218)
>         88	LOAD_FAST(arg=6, lineno=219)
          90	LOAD_CONST(arg=2, lineno=219)
          92	COMPARE_OP(arg=3, lineno=219)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=219)
          96	LOAD_FAST(arg=6, lineno=221)
          98	LOAD_FAST(arg=3, lineno=221)
         100	LOAD_FAST(arg=5, lineno=221)
         102	STORE_SUBSCR(arg=None, lineno=221)
>        104	LOAD_FAST(arg=4, lineno=222)
         106	LOAD_CONST(arg=2, lineno=222)
         108	INPLACE_ADD(arg=None, lineno=222)
         110	STORE_FAST(arg=4, lineno=222)
         112	LOAD_FAST(arg=5, lineno=223)
         114	LOAD_CONST(arg=2, lineno=223)
         116	INPLACE_ADD(arg=None, lineno=223)
         118	STORE_FAST(arg=5, lineno=223)
         120	JUMP_ABSOLUTE(arg=28, lineno=223)
>        122	POP_BLOCK(arg=None, lineno=223)
>        124	LOAD_FAST(arg=5, lineno=224)
         126	RETURN_VALUE(arg=None, lineno=224)
2020-06-11 12:07:02,892:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,892:DEBUG:stack: []
2020-06-11 12:07:02,892:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=201)
2020-06-11 12:07:02,892:DEBUG:stack []
2020-06-11 12:07:02,892:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=201)
2020-06-11 12:07:02,892:DEBUG:stack []
2020-06-11 12:07:02,892:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=201)
2020-06-11 12:07:02,892:DEBUG:stack ['$src_ndim2.0']
2020-06-11 12:07:02,892:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=201)
2020-06-11 12:07:02,892:DEBUG:stack ['$src_ndim2.0', '$dest_ndim4.1']
2020-06-11 12:07:02,892:DEBUG:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=201)
2020-06-11 12:07:02,892:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:07:02,892:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,892:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:07:02,892:DEBUG:stack: []
2020-06-11 12:07:02,892:DEBUG:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=204)
2020-06-11 12:07:02,892:DEBUG:stack []
2020-06-11 12:07:02,893:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=204)
2020-06-11 12:07:02,893:DEBUG:stack ['$const10.0']
2020-06-11 12:07:02,893:DEBUG:end state. edges=[]
2020-06-11 12:07:02,893:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:07:02,893:DEBUG:stack: []
2020-06-11 12:07:02,893:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=206)
2020-06-11 12:07:02,893:DEBUG:stack []
2020-06-11 12:07:02,893:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=4, lineno=206)
2020-06-11 12:07:02,893:DEBUG:stack ['$const14.0']
2020-06-11 12:07:02,893:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=207)
2020-06-11 12:07:02,893:DEBUG:stack []
2020-06-11 12:07:02,893:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=207)
2020-06-11 12:07:02,893:DEBUG:stack ['$dest_ndim18.1']
2020-06-11 12:07:02,893:DEBUG:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=207)
2020-06-11 12:07:02,893:DEBUG:stack ['$dest_ndim18.1', '$src_ndim20.2']
2020-06-11 12:07:02,893:DEBUG:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=207)
2020-06-11 12:07:02,893:DEBUG:stack ['$22binary_subtract.3']
2020-06-11 12:07:02,893:DEBUG:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,893:DEBUG:pending: deque([State(pc_initial=26 nstack_initial=0)])
2020-06-11 12:07:02,893:DEBUG:stack: []
2020-06-11 12:07:02,893:DEBUG:dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=208)
2020-06-11 12:07:02,893:DEBUG:stack []
2020-06-11 12:07:02,893:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,893:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:02,893:DEBUG:stack: []
2020-06-11 12:07:02,894:DEBUG:dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=208)
2020-06-11 12:07:02,894:DEBUG:stack []
2020-06-11 12:07:02,894:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=208)
2020-06-11 12:07:02,894:DEBUG:stack ['$src_index28.0']
2020-06-11 12:07:02,894:DEBUG:dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=208)
2020-06-11 12:07:02,894:DEBUG:stack ['$src_index28.0', '$src_ndim30.1']
2020-06-11 12:07:02,894:DEBUG:dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=208)
2020-06-11 12:07:02,894:DEBUG:stack ['$32compare_op.2']
2020-06-11 12:07:02,894:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,894:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2020-06-11 12:07:02,894:DEBUG:stack: []
2020-06-11 12:07:02,894:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=209)
2020-06-11 12:07:02,894:DEBUG:stack []
2020-06-11 12:07:02,894:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=209)
2020-06-11 12:07:02,894:DEBUG:stack ['$src_shape36.0']
2020-06-11 12:07:02,894:DEBUG:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=209)
2020-06-11 12:07:02,894:DEBUG:stack ['$src_shape36.0', '$src_index38.1']
2020-06-11 12:07:02,894:DEBUG:dispatch pc=42, inst=STORE_FAST(arg=6, lineno=209)
2020-06-11 12:07:02,894:DEBUG:stack ['$40binary_subscr.2']
2020-06-11 12:07:02,894:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=210)
2020-06-11 12:07:02,894:DEBUG:stack []
2020-06-11 12:07:02,894:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=210)
2020-06-11 12:07:02,894:DEBUG:stack ['$dest_shape44.3']
2020-06-11 12:07:02,895:DEBUG:dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=210)
2020-06-11 12:07:02,895:DEBUG:stack ['$dest_shape44.3', '$dest_index46.4']
2020-06-11 12:07:02,895:DEBUG:dispatch pc=50, inst=STORE_FAST(arg=7, lineno=210)
2020-06-11 12:07:02,895:DEBUG:stack ['$48binary_subscr.5']
2020-06-11 12:07:02,895:DEBUG:dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=213)
2020-06-11 12:07:02,895:DEBUG:stack []
2020-06-11 12:07:02,895:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=213)
2020-06-11 12:07:02,895:DEBUG:stack ['$dest_dim_size52.6']
2020-06-11 12:07:02,895:DEBUG:dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=213)
2020-06-11 12:07:02,895:DEBUG:stack ['$dest_dim_size52.6', '$const54.7']
2020-06-11 12:07:02,895:DEBUG:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=213)
2020-06-11 12:07:02,895:DEBUG:stack ['$56compare_op.8']
2020-06-11 12:07:02,895:DEBUG:end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,895:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2020-06-11 12:07:02,895:DEBUG:stack: []
2020-06-11 12:07:02,895:DEBUG:dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=223)
2020-06-11 12:07:02,895:DEBUG:stack []
2020-06-11 12:07:02,895:DEBUG:end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:02,895:DEBUG:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2020-06-11 12:07:02,895:DEBUG:stack: []
2020-06-11 12:07:02,895:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=217)
2020-06-11 12:07:02,895:DEBUG:stack []
2020-06-11 12:07:02,895:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=217)
2020-06-11 12:07:02,895:DEBUG:stack ['$src_dim_size60.0']
2020-06-11 12:07:02,896:DEBUG:dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=217)
2020-06-11 12:07:02,896:DEBUG:stack ['$src_dim_size60.0', '$dest_dim_size62.1']
2020-06-11 12:07:02,896:DEBUG:dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=217)
2020-06-11 12:07:02,896:DEBUG:stack ['$64compare_op.2']
2020-06-11 12:07:02,896:DEBUG:end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,896:DEBUG:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,896:DEBUG:stack: []
2020-06-11 12:07:02,896:DEBUG:dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=219)
2020-06-11 12:07:02,896:DEBUG:stack []
2020-06-11 12:07:02,896:DEBUG:dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=219)
2020-06-11 12:07:02,896:DEBUG:stack ['$src_dim_size88.0']
2020-06-11 12:07:02,896:DEBUG:dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=219)
2020-06-11 12:07:02,896:DEBUG:stack ['$src_dim_size88.0', '$const90.1']
2020-06-11 12:07:02,896:DEBUG:dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=219)
2020-06-11 12:07:02,896:DEBUG:stack ['$92compare_op.2']
2020-06-11 12:07:02,896:DEBUG:end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,896:DEBUG:pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,896:DEBUG:stack: []
2020-06-11 12:07:02,896:DEBUG:dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=224)
2020-06-11 12:07:02,896:DEBUG:stack []
2020-06-11 12:07:02,896:DEBUG:dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=224)
2020-06-11 12:07:02,896:DEBUG:stack ['$dest_index124.0']
2020-06-11 12:07:02,896:DEBUG:end state. edges=[]
2020-06-11 12:07:02,897:DEBUG:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,897:DEBUG:stack: []
2020-06-11 12:07:02,897:DEBUG:dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=217)
2020-06-11 12:07:02,897:DEBUG:stack []
2020-06-11 12:07:02,897:DEBUG:dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=217)
2020-06-11 12:07:02,897:DEBUG:stack ['$src_dim_size68.0']
2020-06-11 12:07:02,897:DEBUG:dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=217)
2020-06-11 12:07:02,897:DEBUG:stack ['$src_dim_size68.0', '$const70.1']
2020-06-11 12:07:02,897:DEBUG:dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=217)
2020-06-11 12:07:02,897:DEBUG:stack ['$72compare_op.2']
2020-06-11 12:07:02,897:DEBUG:end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,897:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,897:DEBUG:stack: []
2020-06-11 12:07:02,897:DEBUG:dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=222)
2020-06-11 12:07:02,897:DEBUG:stack []
2020-06-11 12:07:02,897:DEBUG:dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=222)
2020-06-11 12:07:02,897:DEBUG:stack ['$src_index104.0']
2020-06-11 12:07:02,897:DEBUG:dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=222)
2020-06-11 12:07:02,897:DEBUG:stack ['$src_index104.0', '$const106.1']
2020-06-11 12:07:02,897:DEBUG:dispatch pc=110, inst=STORE_FAST(arg=4, lineno=222)
2020-06-11 12:07:02,897:DEBUG:stack ['$108inplace_add.2']
2020-06-11 12:07:02,897:DEBUG:dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=223)
2020-06-11 12:07:02,897:DEBUG:stack []
2020-06-11 12:07:02,897:DEBUG:dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=223)
2020-06-11 12:07:02,897:DEBUG:stack ['$dest_index112.3']
2020-06-11 12:07:02,898:DEBUG:dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=223)
2020-06-11 12:07:02,898:DEBUG:stack ['$dest_index112.3', '$const114.4']
2020-06-11 12:07:02,898:DEBUG:dispatch pc=118, inst=STORE_FAST(arg=5, lineno=223)
2020-06-11 12:07:02,898:DEBUG:stack ['$116inplace_add.5']
2020-06-11 12:07:02,898:DEBUG:dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=223)
2020-06-11 12:07:02,898:DEBUG:stack []
2020-06-11 12:07:02,898:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,898:DEBUG:pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:02,898:DEBUG:stack: []
2020-06-11 12:07:02,898:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=221)
2020-06-11 12:07:02,898:DEBUG:stack []
2020-06-11 12:07:02,898:DEBUG:dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=221)
2020-06-11 12:07:02,898:DEBUG:stack ['$src_dim_size96.0']
2020-06-11 12:07:02,898:DEBUG:dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=221)
2020-06-11 12:07:02,898:DEBUG:stack ['$src_dim_size96.0', '$dest_shape98.1']
2020-06-11 12:07:02,898:DEBUG:dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=221)
2020-06-11 12:07:02,898:DEBUG:stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
2020-06-11 12:07:02,898:DEBUG:end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:02,898:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,898:DEBUG:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,898:DEBUG:stack: []
2020-06-11 12:07:02,898:DEBUG:dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=218)
2020-06-11 12:07:02,898:DEBUG:stack []
2020-06-11 12:07:02,899:DEBUG:dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=218)
2020-06-11 12:07:02,899:DEBUG:stack ['$dest_index76.0']
2020-06-11 12:07:02,899:DEBUG:dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=218)
2020-06-11 12:07:02,899:DEBUG:stack ['$dest_index76.0', '$const78.1']
2020-06-11 12:07:02,899:DEBUG:dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=218)
2020-06-11 12:07:02,899:DEBUG:stack ['$80binary_add.2']
2020-06-11 12:07:02,899:DEBUG:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=218)
2020-06-11 12:07:02,899:DEBUG:stack ['$82unary_negative.3']
2020-06-11 12:07:02,899:DEBUG:end state. edges=[]
2020-06-11 12:07:02,899:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,899:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,899:DEBUG:pending: deque([State(pc_initial=104 nstack_initial=0)])
2020-06-11 12:07:02,899:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,899:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
2020-06-11 12:07:02,900:DEBUG:defmap: {}
2020-06-11 12:07:02,900:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,900:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,900:DEBUG:keep phismap: {}
2020-06-11 12:07:02,900:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,900:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
2020-06-11 12:07:02,900:DEBUG:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,901:DEBUG:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
2020-06-11 12:07:02,901:DEBUG:block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
2020-06-11 12:07:02,901:DEBUG:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
2020-06-11 12:07:02,901:DEBUG:block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
2020-06-11 12:07:02,901:DEBUG:block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,902:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index) ['$40binary_subscr.2', 'src_index', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index) ['$48binary_subscr.5', 'dest_index', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:07:02,912:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,912:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index) ['$40binary_subscr.2', 'src_index', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index) ['$48binary_subscr.5', 'dest_index', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:07:02,913:DEBUG:================================================================================
2020-06-11 12:07:02,913:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,913:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,913:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:07:02,913:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:07:02,913:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:07:02,913:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:07:02,913:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:07:02,913:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:07:02,913:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:07:02,913:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,913:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:07:02,913:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:07:02,913:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:07:02,913:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:07:02,913:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,913:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:07:02,913:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:07:02,913:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:07:02,913:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,913:DEBUG:on stmt: jump 26
2020-06-11 12:07:02,913:DEBUG:==== SSA block analysis pass on 26
2020-06-11 12:07:02,913:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,913:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,913:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:07:02,913:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,913:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,914:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:07:02,914:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:02,914:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,914:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,914:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:07:02,914:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:07:02,914:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:07:02,914:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:07:02,914:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:07:02,914:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:07:02,914:DEBUG:==== SSA block analysis pass on 60
2020-06-11 12:07:02,914:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,914:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:07:02,914:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:07:02,914:DEBUG:==== SSA block analysis pass on 68
2020-06-11 12:07:02,914:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,914:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:07:02,914:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:07:02,914:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:07:02,914:DEBUG:==== SSA block analysis pass on 76
2020-06-11 12:07:02,914:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,914:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:07:02,914:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:07:02,914:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:07:02,915:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:07:02,915:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:07:02,915:DEBUG:==== SSA block analysis pass on 88
2020-06-11 12:07:02,915:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,915:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,915:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:07:02,915:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:07:02,915:DEBUG:==== SSA block analysis pass on 96
2020-06-11 12:07:02,915:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,915:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:07:02,915:DEBUG:on stmt: jump 104
2020-06-11 12:07:02,915:DEBUG:==== SSA block analysis pass on 104
2020-06-11 12:07:02,915:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,915:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:07:02,915:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,915:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:07:02,915:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:07:02,915:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,915:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:07:02,915:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,915:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:07:02,915:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,915:DEBUG:on stmt: jump 124
2020-06-11 12:07:02,915:DEBUG:==== SSA block analysis pass on 124
2020-06-11 12:07:02,915:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e521750>
2020-06-11 12:07:02,915:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:07:02,915:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:07:02,916:DEBUG:defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fc44e4f2310>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fc44e4f4b90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fc44e4f4f10>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fc44e4f3b90>],
             '$22binary_subtract.3': [<numba.core.ir.Assign object at 0x7fc44e4fd650>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4fd590>],
             '$40binary_subscr.2': [<numba.core.ir.Assign object at 0x7fc44e4fd8d0>],
             '$48binary_subscr.5': [<numba.core.ir.Assign object at 0x7fc44e4ec9d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fc44e4ec7d0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4eca90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4f3bd0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4fb9d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fc44e4fb2d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fc44e4fb990>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fc44e4f4a90>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4f4710>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fc44e4f37d0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fc44e4f28d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fc44e4f4a50>],
             '$const14.0': [<numba.core.ir.Assign object at 0x7fc44e4f3c90>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fc44e4ecad0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fc44e4fbed0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fc44e4fb750>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc44e4f46d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fc44e4ec850>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fc44e4fd490>,
                            <numba.core.ir.Assign object at 0x7fc44e4f2b90>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fc44e4f3050>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fc44e4f3790>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fc44e4fdc50>],
             'src_index': [<numba.core.ir.Assign object at 0x7fc44e4f3610>,
                           <numba.core.ir.Assign object at 0x7fc44e4ec810>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fc44e4f8e10>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fc44e4f3f50>]})
2020-06-11 12:07:02,916:DEBUG:SSA violators {'dest_index', 'src_index'}
2020-06-11 12:07:02,916:DEBUG:Fix SSA violator on var dest_index
2020-06-11 12:07:02,916:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,916:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:07:02,916:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:07:02,916:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:07:02,916:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:07:02,916:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:07:02,916:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:07:02,916:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,916:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,916:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:07:02,916:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:07:02,916:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:07:02,916:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:07:02,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,917:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:07:02,917:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:07:02,917:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:07:02,917:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,917:DEBUG:first assign: dest_index
2020-06-11 12:07:02,917:DEBUG:replaced with: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,917:DEBUG:on stmt: jump 26
2020-06-11 12:07:02,917:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:07:02,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,917:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,917:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:07:02,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,917:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,917:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:07:02,917:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,917:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,917:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:07:02,917:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:07:02,917:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:07:02,917:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:07:02,917:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:07:02,917:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:07:02,917:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,917:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,917:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:07:02,918:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:07:02,918:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:07:02,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,918:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:07:02,918:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:07:02,918:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:07:02,918:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:07:02,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,918:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:07:02,918:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:07:02,918:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:07:02,918:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:07:02,918:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:07:02,918:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,918:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,918:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:07:02,918:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:07:02,918:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,918:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:07:02,918:DEBUG:on stmt: jump 104
2020-06-11 12:07:02,918:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,918:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,918:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:07:02,918:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,919:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:07:02,919:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:07:02,919:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,919:DEBUG:on stmt: dest_index = $116inplace_add.5
2020-06-11 12:07:02,919:DEBUG:replaced with: dest_index.1 = $116inplace_add.5
2020-06-11 12:07:02,919:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,919:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:02,919:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,919:DEBUG:on stmt: jump 124
2020-06-11 12:07:02,919:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:07:02,919:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f4590>
2020-06-11 12:07:02,919:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:07:02,919:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:07:02,919:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc44e4f2790>],
             104: [<numba.core.ir.Assign object at 0x7fc44e4f83d0>]})
2020-06-11 12:07:02,919:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,920:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:07:02,920:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:07:02,920:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:07:02,920:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:07:02,920:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:07:02,920:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:07:02,920:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,920:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:07:02,920:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:07:02,920:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:07:02,920:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:07:02,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,920:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:07:02,920:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:07:02,920:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:07:02,920:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,920:DEBUG:on stmt: jump 26
2020-06-11 12:07:02,920:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:07:02,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,920:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,920:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:07:02,920:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,921:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,921:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:07:02,921:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,921:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,921:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,921:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:07:02,921:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:07:02,921:DEBUG:find_def var='dest_index' stmt=$48binary_subscr.5 = getitem(value=dest_shape, index=dest_index)
2020-06-11 12:07:02,921:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,921:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,921:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,921:DEBUG:find_def_from_top label 28
2020-06-11 12:07:02,921:DEBUG:insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
2020-06-11 12:07:02,921:DEBUG:find_def_from_bottom label 104
2020-06-11 12:07:02,921:DEBUG:incoming_def dest_index.1 = $116inplace_add.5
2020-06-11 12:07:02,921:DEBUG:find_def_from_bottom label 26
2020-06-11 12:07:02,921:DEBUG:find_def_from_top label 26
2020-06-11 12:07:02,921:DEBUG:idom 14 from label 26
2020-06-11 12:07:02,921:DEBUG:find_def_from_bottom label 14
2020-06-11 12:07:02,921:DEBUG:incoming_def dest_index = $22binary_subtract.3
2020-06-11 12:07:02,921:DEBUG:replaced with: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2)
2020-06-11 12:07:02,921:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:07:02,921:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:07:02,921:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:07:02,922:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:07:02,922:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,922:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,922:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:07:02,922:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:07:02,922:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:07:02,922:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,922:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:07:02,922:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:07:02,922:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:07:02,922:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:07:02,922:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,922:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:07:02,922:DEBUG:on stmt: $80binary_add.2 = dest_index + $const78.1
2020-06-11 12:07:02,922:DEBUG:find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
2020-06-11 12:07:02,922:DEBUG:find_def_from_top label 76
2020-06-11 12:07:02,922:DEBUG:idom 68 from label 76
2020-06-11 12:07:02,922:DEBUG:find_def_from_bottom label 68
2020-06-11 12:07:02,922:DEBUG:find_def_from_top label 68
2020-06-11 12:07:02,922:DEBUG:idom 60 from label 68
2020-06-11 12:07:02,922:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,922:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,922:DEBUG:idom 36 from label 60
2020-06-11 12:07:02,922:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,922:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,922:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,922:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,923:DEBUG:replaced with: $80binary_add.2 = dest_index.2 + $const78.1
2020-06-11 12:07:02,923:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:07:02,923:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:07:02,923:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:07:02,923:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,923:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,923:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:07:02,923:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:07:02,923:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,923:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,923:DEBUG:on stmt: dest_shape[dest_index] = src_dim_size
2020-06-11 12:07:02,923:DEBUG:find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2020-06-11 12:07:02,923:DEBUG:find_def_from_top label 96
2020-06-11 12:07:02,923:DEBUG:idom 88 from label 96
2020-06-11 12:07:02,923:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,923:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,923:DEBUG:idom 36 from label 88
2020-06-11 12:07:02,923:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,923:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,923:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,923:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,923:DEBUG:replaced with: dest_shape[dest_index.2] = src_dim_size
2020-06-11 12:07:02,923:DEBUG:on stmt: jump 104
2020-06-11 12:07:02,923:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,924:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,924:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:07:02,924:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,924:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:07:02,924:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:07:02,924:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,924:DEBUG:find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,924:DEBUG:find_def_from_top label 104
2020-06-11 12:07:02,924:DEBUG:insert phi node dest_index.3 = phi(incoming_values=[], incoming_blocks=[]) at 104
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,924:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,924:DEBUG:idom 36 from label 88
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,924:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,924:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,924:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,924:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,924:DEBUG:idom 36 from label 60
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,924:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,924:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,924:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,924:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 96
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 96
2020-06-11 12:07:02,925:DEBUG:idom 88 from label 96
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 88
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 88
2020-06-11 12:07:02,925:DEBUG:idom 36 from label 88
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,925:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,925:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 68
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 68
2020-06-11 12:07:02,925:DEBUG:idom 60 from label 68
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 60
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 60
2020-06-11 12:07:02,925:DEBUG:idom 36 from label 60
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,925:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,925:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,925:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,925:DEBUG:incoming_def dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,925:DEBUG:replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,925:DEBUG:on stmt: dest_index.1 = $116inplace_add.5
2020-06-11 12:07:02,925:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,925:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:02,925:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,926:DEBUG:on stmt: jump 124
2020-06-11 12:07:02,926:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:07:02,926:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4f8350>
2020-06-11 12:07:02,926:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index)
2020-06-11 12:07:02,926:DEBUG:find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
2020-06-11 12:07:02,926:DEBUG:find_def_from_top label 124
2020-06-11 12:07:02,926:DEBUG:idom 122 from label 124
2020-06-11 12:07:02,926:DEBUG:find_def_from_bottom label 122
2020-06-11 12:07:02,926:DEBUG:find_def_from_top label 122
2020-06-11 12:07:02,926:DEBUG:idom 28 from label 122
2020-06-11 12:07:02,926:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,926:DEBUG:replaced with: $126return_value.1 = cast(value=dest_index.2)
2020-06-11 12:07:02,926:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:07:02,926:DEBUG:Fix SSA violator on var src_index
2020-06-11 12:07:02,926:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,926:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,926:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:07:02,926:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:07:02,926:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:07:02,926:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:07:02,926:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:07:02,926:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:07:02,926:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,926:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,927:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:07:02,927:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:07:02,927:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:07:02,927:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:07:02,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,927:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:07:02,927:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:07:02,927:DEBUG:first assign: src_index
2020-06-11 12:07:02,927:DEBUG:replaced with: src_index = $const14.0
2020-06-11 12:07:02,927:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:07:02,927:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,927:DEBUG:on stmt: jump 26
2020-06-11 12:07:02,927:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:07:02,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,927:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,927:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:07:02,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,927:DEBUG:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,927:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,927:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:07:02,927:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,927:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,927:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,927:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:07:02,927:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2)
2020-06-11 12:07:02,927:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:07:02,927:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:07:02,928:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:07:02,928:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:07:02,928:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,928:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:07:02,928:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:07:02,928:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:07:02,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,928:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:07:02,928:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:07:02,928:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:07:02,928:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:07:02,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,928:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:07:02,928:DEBUG:on stmt: $80binary_add.2 = dest_index.2 + $const78.1
2020-06-11 12:07:02,928:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:07:02,928:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:07:02,928:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:07:02,928:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,928:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,928:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:07:02,928:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:07:02,928:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,928:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,928:DEBUG:on stmt: dest_shape[dest_index.2] = src_dim_size
2020-06-11 12:07:02,928:DEBUG:on stmt: jump 104
2020-06-11 12:07:02,929:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,929:DEBUG:on stmt: dest_index.3 = phi(incoming_values=[Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209)], incoming_blocks=[88, 60, 96, 68])
2020-06-11 12:07:02,929:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:07:02,929:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,929:DEBUG:on stmt: src_index = $108inplace_add.2
2020-06-11 12:07:02,929:DEBUG:replaced with: src_index.1 = $108inplace_add.2
2020-06-11 12:07:02,929:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:07:02,929:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,929:DEBUG:on stmt: dest_index.1 = $116inplace_add.5
2020-06-11 12:07:02,929:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,929:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:02,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,929:DEBUG:on stmt: jump 124
2020-06-11 12:07:02,929:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:07:02,929:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e4f27d0>
2020-06-11 12:07:02,929:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index.2)
2020-06-11 12:07:02,929:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:07:02,929:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc44e4f2a90>],
             104: [<numba.core.ir.Assign object at 0x7fc44e527690>]})
2020-06-11 12:07:02,930:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:02,930:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,930:DEBUG:on stmt: src_ndim = arg(0, name=src_ndim)
2020-06-11 12:07:02,930:DEBUG:on stmt: src_shape = arg(1, name=src_shape)
2020-06-11 12:07:02,930:DEBUG:on stmt: dest_ndim = arg(2, name=dest_ndim)
2020-06-11 12:07:02,930:DEBUG:on stmt: dest_shape = arg(3, name=dest_shape)
2020-06-11 12:07:02,930:DEBUG:on stmt: $6compare_op.2 = src_ndim > dest_ndim
2020-06-11 12:07:02,930:DEBUG:on stmt: branch $6compare_op.2, 10, 14
2020-06-11 12:07:02,930:DEBUG:==== SSA block rewrite pass on 10
2020-06-11 12:07:02,930:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,930:DEBUG:on stmt: $const10.0 = const(int, 0)
2020-06-11 12:07:02,930:DEBUG:on stmt: $12return_value.1 = cast(value=$const10.0)
2020-06-11 12:07:02,930:DEBUG:on stmt: return $12return_value.1
2020-06-11 12:07:02,930:DEBUG:==== SSA block rewrite pass on 14
2020-06-11 12:07:02,930:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,930:DEBUG:on stmt: $const14.0 = const(int, 0)
2020-06-11 12:07:02,930:DEBUG:on stmt: src_index = $const14.0
2020-06-11 12:07:02,930:DEBUG:on stmt: $22binary_subtract.3 = dest_ndim - src_ndim
2020-06-11 12:07:02,930:DEBUG:on stmt: dest_index = $22binary_subtract.3
2020-06-11 12:07:02,930:DEBUG:on stmt: jump 26
2020-06-11 12:07:02,930:DEBUG:==== SSA block rewrite pass on 26
2020-06-11 12:07:02,931:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,931:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,931:DEBUG:==== SSA block rewrite pass on 28
2020-06-11 12:07:02,931:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,931:DEBUG:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26])
2020-06-11 12:07:02,931:DEBUG:on stmt: $32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,931:DEBUG:find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
2020-06-11 12:07:02,931:DEBUG:find_def_from_top label 28
2020-06-11 12:07:02,931:DEBUG:insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
2020-06-11 12:07:02,931:DEBUG:find_def_from_bottom label 104
2020-06-11 12:07:02,931:DEBUG:incoming_def src_index.1 = $108inplace_add.2
2020-06-11 12:07:02,931:DEBUG:find_def_from_bottom label 26
2020-06-11 12:07:02,931:DEBUG:find_def_from_top label 26
2020-06-11 12:07:02,931:DEBUG:idom 14 from label 26
2020-06-11 12:07:02,931:DEBUG:find_def_from_bottom label 14
2020-06-11 12:07:02,931:DEBUG:incoming_def src_index = $const14.0
2020-06-11 12:07:02,931:DEBUG:replaced with: $32compare_op.2 = src_index.2 < src_ndim
2020-06-11 12:07:02,931:DEBUG:on stmt: branch $32compare_op.2, 36, 122
2020-06-11 12:07:02,931:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:02,931:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,931:DEBUG:on stmt: $40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,931:DEBUG:find_def var='src_index' stmt=$40binary_subscr.2 = getitem(value=src_shape, index=src_index)
2020-06-11 12:07:02,931:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,931:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,932:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,932:DEBUG:replaced with: $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2)
2020-06-11 12:07:02,932:DEBUG:on stmt: src_dim_size = $40binary_subscr.2
2020-06-11 12:07:02,932:DEBUG:on stmt: $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2)
2020-06-11 12:07:02,932:DEBUG:on stmt: dest_dim_size = $48binary_subscr.5
2020-06-11 12:07:02,932:DEBUG:on stmt: $const54.7 = const(int, 1)
2020-06-11 12:07:02,932:DEBUG:on stmt: $56compare_op.8 = dest_dim_size != $const54.7
2020-06-11 12:07:02,932:DEBUG:on stmt: branch $56compare_op.8, 60, 88
2020-06-11 12:07:02,932:DEBUG:==== SSA block rewrite pass on 60
2020-06-11 12:07:02,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,932:DEBUG:on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
2020-06-11 12:07:02,932:DEBUG:on stmt: branch $64compare_op.2, 68, 104
2020-06-11 12:07:02,932:DEBUG:==== SSA block rewrite pass on 68
2020-06-11 12:07:02,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,932:DEBUG:on stmt: $const70.1 = const(int, 1)
2020-06-11 12:07:02,932:DEBUG:on stmt: $72compare_op.2 = src_dim_size != $const70.1
2020-06-11 12:07:02,932:DEBUG:on stmt: branch $72compare_op.2, 76, 104
2020-06-11 12:07:02,932:DEBUG:==== SSA block rewrite pass on 76
2020-06-11 12:07:02,932:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,932:DEBUG:on stmt: $const78.1 = const(int, 1)
2020-06-11 12:07:02,932:DEBUG:on stmt: $80binary_add.2 = dest_index.2 + $const78.1
2020-06-11 12:07:02,932:DEBUG:on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
2020-06-11 12:07:02,932:DEBUG:on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
2020-06-11 12:07:02,932:DEBUG:on stmt: return $84return_value.4
2020-06-11 12:07:02,933:DEBUG:==== SSA block rewrite pass on 88
2020-06-11 12:07:02,933:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,933:DEBUG:on stmt: $const90.1 = const(int, 1)
2020-06-11 12:07:02,933:DEBUG:on stmt: $92compare_op.2 = src_dim_size != $const90.1
2020-06-11 12:07:02,933:DEBUG:on stmt: branch $92compare_op.2, 96, 104
2020-06-11 12:07:02,933:DEBUG:==== SSA block rewrite pass on 96
2020-06-11 12:07:02,933:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,933:DEBUG:on stmt: dest_shape[dest_index.2] = src_dim_size
2020-06-11 12:07:02,933:DEBUG:on stmt: jump 104
2020-06-11 12:07:02,933:DEBUG:==== SSA block rewrite pass on 104
2020-06-11 12:07:02,933:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,933:DEBUG:on stmt: dest_index.3 = phi(incoming_values=[Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209)], incoming_blocks=[88, 60, 96, 68])
2020-06-11 12:07:02,933:DEBUG:on stmt: $const106.1 = const(int, 1)
2020-06-11 12:07:02,933:DEBUG:on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,933:DEBUG:find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,933:DEBUG:find_def_from_top label 104
2020-06-11 12:07:02,933:DEBUG:idom 36 from label 104
2020-06-11 12:07:02,933:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:02,933:DEBUG:find_def_from_top label 36
2020-06-11 12:07:02,933:DEBUG:idom 28 from label 36
2020-06-11 12:07:02,933:DEBUG:find_def_from_bottom label 28
2020-06-11 12:07:02,933:DEBUG:replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,933:DEBUG:on stmt: src_index.1 = $108inplace_add.2
2020-06-11 12:07:02,933:DEBUG:on stmt: $const114.4 = const(int, 1)
2020-06-11 12:07:02,933:DEBUG:on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:02,934:DEBUG:on stmt: dest_index.1 = $116inplace_add.5
2020-06-11 12:07:02,934:DEBUG:on stmt: jump 28
2020-06-11 12:07:02,934:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:02,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,934:DEBUG:on stmt: jump 124
2020-06-11 12:07:02,934:DEBUG:==== SSA block rewrite pass on 124
2020-06-11 12:07:02,934:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e521610>
2020-06-11 12:07:02,934:DEBUG:on stmt: $126return_value.1 = cast(value=dest_index.2)
2020-06-11 12:07:02,934:DEBUG:on stmt: return $126return_value.1
2020-06-11 12:07:02,934:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:02,934:DEBUG:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    branch $6compare_op.2, 10, 14            ['$6compare_op.2']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const14.0 = const(int, 0)               ['$const14.0']
    src_index = $const14.0                   ['$const14.0', 'src_index']
    $22binary_subtract.3 = dest_ndim - src_ndim ['$22binary_subtract.3', 'dest_ndim', 'src_ndim']
    dest_index = $22binary_subtract.3        ['$22binary_subtract.3', 'dest_index']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:222), Var(src_index, npyimpl.py:206)], incoming_blocks=[104, 26]) ['src_index', 'src_index.1', 'src_index.2']
    dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:223), Var(dest_index, npyimpl.py:207)], incoming_blocks=[104, 26]) ['dest_index', 'dest_index.1', 'dest_index.2']
    $32compare_op.2 = src_index.2 < src_ndim ['$32compare_op.2', 'src_index.2', 'src_ndim']
    branch $32compare_op.2, 36, 122          ['$32compare_op.2']
label 36:
    $40binary_subscr.2 = getitem(value=src_shape, index=src_index.2) ['$40binary_subscr.2', 'src_index.2', 'src_shape']
    src_dim_size = $40binary_subscr.2        ['$40binary_subscr.2', 'src_dim_size']
    $48binary_subscr.5 = getitem(value=dest_shape, index=dest_index.2) ['$48binary_subscr.5', 'dest_index.2', 'dest_shape']
    dest_dim_size = $48binary_subscr.5       ['$48binary_subscr.5', 'dest_dim_size']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    branch $56compare_op.8, 60, 88           ['$56compare_op.8']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    branch $64compare_op.2, 68, 104          ['$64compare_op.2']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    branch $72compare_op.2, 76, 104          ['$72compare_op.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index.2 + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index.2']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    branch $92compare_op.2, 96, 104          ['$92compare_op.2']
label 96:
    dest_shape[dest_index.2] = src_dim_size  ['dest_index.2', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    dest_index.3 = phi(incoming_values=[Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209), Var(dest_index.2, npyimpl.py:209)], incoming_blocks=[88, 60, 96, 68]) ['dest_index.2', 'dest_index.2', 'dest_index.2', 'dest_index.2', 'dest_index.3']
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index.2']
    src_index.1 = $108inplace_add.2          ['$108inplace_add.2', 'src_index.1']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.3, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index.3']
    dest_index.1 = $116inplace_add.5         ['$116inplace_add.5', 'dest_index.1']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index.2) ['$126return_value.1', 'dest_index.2']
    return $126return_value.1                ['$126return_value.1']

2020-06-11 12:07:02,935:DEBUG:================================================================================
2020-06-11 12:07:02,996:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2742)
           2	LOAD_FAST(arg=0, lineno=2742)
           4	LOAD_FAST(arg=1, lineno=2742)
           6	COMPARE_OP(arg=0, lineno=2742)
           8	RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:07:02,996:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:02,996:DEBUG:stack: []
2020-06-11 12:07:02,996:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2742)
2020-06-11 12:07:02,996:DEBUG:stack []
2020-06-11 12:07:02,996:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2742)
2020-06-11 12:07:02,997:DEBUG:stack []
2020-06-11 12:07:02,997:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:07:02,997:DEBUG:stack ['$finite_vals_12.0']
2020-06-11 12:07:02,997:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=2742)
2020-06-11 12:07:02,997:DEBUG:stack ['$finite_vals_12.0', '$v_min_14.1']
2020-06-11 12:07:02,997:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:07:02,997:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:07:02,997:DEBUG:end state. edges=[]
2020-06-11 12:07:02,997:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:02,997:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:02,997:DEBUG:defmap: {}
2020-06-11 12:07:02,997:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,997:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:02,997:DEBUG:keep phismap: {}
2020-06-11 12:07:02,997:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:02,997:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:02,997:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$finite_vals_12.0'}), (4, {'res': '$v_min_14.1'}), (6, {'lhs': '$finite_vals_12.0', 'rhs': '$v_min_14.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:02,998:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,999:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:02,999:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:02,999:DEBUG:================================================================================
2020-06-11 12:07:02,999:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:02,999:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e44aed0>
2020-06-11 12:07:03,000:DEBUG:on stmt: finite_vals_1 = arg(0, name=finite_vals_1)
2020-06-11 12:07:03,000:DEBUG:on stmt: v_min_1 = arg(1, name=v_min_1)
2020-06-11 12:07:03,000:DEBUG:on stmt: $6compare_op.2 = finite_vals_1 < v_min_1
2020-06-11 12:07:03,000:DEBUG:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2020-06-11 12:07:03,000:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:03,000:DEBUG:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e44a4d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e44a650>],
             'finite_vals_1': [<numba.core.ir.Assign object at 0x7fc44e44a1d0>],
             'v_min_1': [<numba.core.ir.Assign object at 0x7fc44e44a290>]})
2020-06-11 12:07:03,000:DEBUG:SSA violators set()
2020-06-11 12:07:03,000:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,000:DEBUG:label 0:
    finite_vals_1 = arg(0, name=finite_vals_1) ['finite_vals_1']
    v_min_1 = arg(1, name=v_min_1)           ['v_min_1']
    $6compare_op.2 = finite_vals_1 < v_min_1 ['$6compare_op.2', 'finite_vals_1', 'v_min_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,000:DEBUG:================================================================================
2020-06-11 12:07:03,015:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2742)
           2	LOAD_FAST(arg=0, lineno=2742)
           4	LOAD_FAST(arg=1, lineno=2742)
           6	COMPARE_OP(arg=4, lineno=2742)
           8	RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:07:03,015:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,016:DEBUG:stack: []
2020-06-11 12:07:03,016:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2742)
2020-06-11 12:07:03,016:DEBUG:stack []
2020-06-11 12:07:03,016:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2742)
2020-06-11 12:07:03,016:DEBUG:stack []
2020-06-11 12:07:03,016:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=2742)
2020-06-11 12:07:03,016:DEBUG:stack ['$finite_vals_22.0']
2020-06-11 12:07:03,016:DEBUG:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=2742)
2020-06-11 12:07:03,016:DEBUG:stack ['$finite_vals_22.0', '$v_max_14.1']
2020-06-11 12:07:03,016:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2742)
2020-06-11 12:07:03,016:DEBUG:stack ['$6compare_op.2']
2020-06-11 12:07:03,016:DEBUG:end state. edges=[]
2020-06-11 12:07:03,016:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,016:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,016:DEBUG:defmap: {}
2020-06-11 12:07:03,016:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,016:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,016:DEBUG:keep phismap: {}
2020-06-11 12:07:03,016:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,016:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,016:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$finite_vals_22.0'}), (4, {'res': '$v_max_14.1'}), (6, {'lhs': '$finite_vals_22.0', 'rhs': '$v_max_14.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,017:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,018:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,018:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,018:DEBUG:================================================================================
2020-06-11 12:07:03,018:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,018:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e4aa0d0>
2020-06-11 12:07:03,019:DEBUG:on stmt: finite_vals_2 = arg(0, name=finite_vals_2)
2020-06-11 12:07:03,019:DEBUG:on stmt: v_max_1 = arg(1, name=v_max_1)
2020-06-11 12:07:03,019:DEBUG:on stmt: $6compare_op.2 = finite_vals_2 > v_max_1
2020-06-11 12:07:03,019:DEBUG:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2020-06-11 12:07:03,019:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:03,019:DEBUG:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4cfc10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e4cf910>],
             'finite_vals_2': [<numba.core.ir.Assign object at 0x7fc44e4cf710>],
             'v_max_1': [<numba.core.ir.Assign object at 0x7fc44e4cf6d0>]})
2020-06-11 12:07:03,019:DEBUG:SSA violators set()
2020-06-11 12:07:03,019:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,019:DEBUG:label 0:
    finite_vals_2 = arg(0, name=finite_vals_2) ['finite_vals_2']
    v_max_1 = arg(1, name=v_max_1)           ['v_max_1']
    $6compare_op.2 = finite_vals_2 > v_max_1 ['$6compare_op.2', 'finite_vals_2', 'v_max_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,019:DEBUG:================================================================================
2020-06-11 12:07:03,119:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2706)
           2	LOAD_GLOBAL(arg=0, lineno=2706)
           4	LOAD_FAST(arg=0, lineno=2706)
           6	LOAD_FAST(arg=2, lineno=2706)
           8	CALL_FUNCTION(arg=2, lineno=2706)
          10	UNPACK_SEQUENCE(arg=2, lineno=2706)
          12	STORE_FAST(arg=3, lineno=2706)
          14	STORE_FAST(arg=4, lineno=2706)
          16	SETUP_LOOP(arg=30, lineno=2708)
          18	LOAD_GLOBAL(arg=1, lineno=2708)
          20	LOAD_CONST(arg=1, lineno=2708)
          22	LOAD_FAST(arg=3, lineno=2708)
          24	LOAD_FAST(arg=4, lineno=2708)
          26	CALL_FUNCTION(arg=3, lineno=2708)
          28	GET_ITER(arg=None, lineno=2708)
>         30	FOR_ITER(arg=14, lineno=2708)
          32	STORE_FAST(arg=5, lineno=2708)
          34	LOAD_FAST(arg=1, lineno=2709)
          36	LOAD_FAST(arg=0, lineno=2709)
          38	LOAD_ATTR(arg=2, lineno=2709)
          40	LOAD_FAST(arg=5, lineno=2709)
          42	STORE_SUBSCR(arg=None, lineno=2709)
          44	JUMP_ABSOLUTE(arg=30, lineno=2709)
>         46	POP_BLOCK(arg=None, lineno=2709)
>         48	LOAD_CONST(arg=0, lineno=2709)
          50	RETURN_VALUE(arg=None, lineno=2709)
2020-06-11 12:07:03,120:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,120:DEBUG:stack: []
2020-06-11 12:07:03,120:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack []
2020-06-11 12:07:03,120:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack []
2020-06-11 12:07:03,120:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:03,120:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$2load_global.0', '$a4.1']
2020-06-11 12:07:03,120:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$2load_global.0', '$a4.1', '$wrap6.2']
2020-06-11 12:07:03,120:DEBUG:dispatch pc=10, inst=UNPACK_SEQUENCE(arg=2, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:03,120:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$10unpack_sequence.5', '$10unpack_sequence.4']
2020-06-11 12:07:03,120:DEBUG:dispatch pc=14, inst=STORE_FAST(arg=4, lineno=2706)
2020-06-11 12:07:03,120:DEBUG:stack ['$10unpack_sequence.5']
2020-06-11 12:07:03,121:DEBUG:end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,121:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=0)])
2020-06-11 12:07:03,121:DEBUG:stack: []
2020-06-11 12:07:03,121:DEBUG:dispatch pc=16, inst=SETUP_LOOP(arg=30, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack []
2020-06-11 12:07:03,121:DEBUG:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack []
2020-06-11 12:07:03,121:DEBUG:dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$18load_global.0']
2020-06-11 12:07:03,121:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$18load_global.0', '$const20.1']
2020-06-11 12:07:03,121:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=4, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$18load_global.0', '$const20.1', '$end22.2']
2020-06-11 12:07:03,121:DEBUG:dispatch pc=26, inst=CALL_FUNCTION(arg=3, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$18load_global.0', '$const20.1', '$end22.2', '$step24.3']
2020-06-11 12:07:03,121:DEBUG:dispatch pc=28, inst=GET_ITER(arg=None, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$26call_function.4']
2020-06-11 12:07:03,121:DEBUG:end state. edges=[Edge(pc=30, stack=('$28get_iter.5',), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,121:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:07:03,121:DEBUG:stack: ['$phi30.0']
2020-06-11 12:07:03,121:DEBUG:dispatch pc=30, inst=FOR_ITER(arg=14, lineno=2708)
2020-06-11 12:07:03,121:DEBUG:stack ['$phi30.0']
2020-06-11 12:07:03,122:DEBUG:end state. edges=[Edge(pc=46, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,122:DEBUG:pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2020-06-11 12:07:03,122:DEBUG:stack: []
2020-06-11 12:07:03,122:DEBUG:dispatch pc=46, inst=POP_BLOCK(arg=None, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack []
2020-06-11 12:07:03,122:DEBUG:end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,122:DEBUG:pending: deque([State(pc_initial=32 nstack_initial=2), State(pc_initial=48 nstack_initial=0)])
2020-06-11 12:07:03,122:DEBUG:stack: ['$phi32.0', '$phi32.1']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=5, lineno=2708)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0', '$phi32.1']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0', '$val34.2']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=38, inst=LOAD_ATTR(arg=2, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0', '$val34.2', '$a36.3']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0', '$val34.2', '$38load_attr.4']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0', '$val34.2', '$38load_attr.4', '$i40.5']
2020-06-11 12:07:03,122:DEBUG:dispatch pc=44, inst=JUMP_ABSOLUTE(arg=30, lineno=2709)
2020-06-11 12:07:03,122:DEBUG:stack ['$phi32.0']
2020-06-11 12:07:03,122:DEBUG:end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,123:DEBUG:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:07:03,123:DEBUG:stack: []
2020-06-11 12:07:03,123:DEBUG:dispatch pc=48, inst=LOAD_CONST(arg=0, lineno=2709)
2020-06-11 12:07:03,123:DEBUG:stack []
2020-06-11 12:07:03,123:DEBUG:dispatch pc=50, inst=RETURN_VALUE(arg=None, lineno=2709)
2020-06-11 12:07:03,123:DEBUG:stack ['$const48.0']
2020-06-11 12:07:03,123:DEBUG:end state. edges=[]
2020-06-11 12:07:03,123:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=1)])
2020-06-11 12:07:03,123:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,123:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set()})
2020-06-11 12:07:03,124:DEBUG:defmap: {'$phi30.0': State(pc_initial=16 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2020-06-11 12:07:03,124:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:07:03,124:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:07:03,124:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:07:03,124:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.5',
                           State(pc_initial=16 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2020-06-11 12:07:03,124:DEBUG:keep phismap: {'$phi30.0': {('$28get_iter.5', State(pc_initial=16 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2020-06-11 12:07:03,124:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=16 nstack_initial=0): {'$phi30.0': '$28get_iter.5'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2020-06-11 12:07:03,125:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$wrap6.2'}), (8, {'func': '$2load_global.0', 'args': ['$a4.1', '$wrap6.2'], 'res': '$8call_function.3'}), (10, {'iterable': '$8call_function.3', 'stores': ['$10unpack_sequence.4', '$10unpack_sequence.5'], 'tupleobj': '$10unpack_sequence.6'}), (12, {'value': '$10unpack_sequence.4'}), (14, {'value': '$10unpack_sequence.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ()})
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'res': '$const20.1'}), (22, {'res': '$end22.2'}), (24, {'res': '$step24.3'}), (26, {'func': '$18load_global.0', 'args': ['$const20.1', '$end22.2', '$step24.3'], 'res': '$26call_function.4'}), (28, {'value': '$26call_function.4', 'res': '$28get_iter.5'})), outgoing_phis={'$phi30.0': '$28get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.5',)})
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={46: (), 32: ('$phi30.0', '$30for_iter.2')})
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$val34.2'}), (36, {'res': '$a36.3'}), (38, {'item': '$a36.3', 'res': '$38load_attr.4'}), (40, {'res': '$i40.5'}), (42, {'target': '$38load_attr.4', 'index': '$i40.5', 'value': '$val34.2'}), (44, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 48, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={48: ()})
2020-06-11 12:07:03,125:DEBUG:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$const48.0'}), (50, {'retval': '$const48.0', 'castval': '$50return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,126:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7fc4548a1a70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:07:03,131:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,132:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7fc4548a1a70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:07:03,132:DEBUG:================================================================================
2020-06-11 12:07:03,132:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,132:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,132:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:03,132:DEBUG:on stmt: val = arg(1, name=val)
2020-06-11 12:07:03,132:DEBUG:on stmt: wrap = arg(2, name=wrap)
2020-06-11 12:07:03,132:DEBUG:on stmt: $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7fc4548a1a70>)
2020-06-11 12:07:03,132:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None)
2020-06-11 12:07:03,132:DEBUG:on stmt: $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2)
2020-06-11 12:07:03,132:DEBUG:on stmt: $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None)
2020-06-11 12:07:03,132:DEBUG:on stmt: $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None)
2020-06-11 12:07:03,132:DEBUG:on stmt: end = $10unpack_sequence.4
2020-06-11 12:07:03,132:DEBUG:on stmt: step = $10unpack_sequence.5
2020-06-11 12:07:03,132:DEBUG:on stmt: jump 16
2020-06-11 12:07:03,132:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:07:03,132:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,132:DEBUG:on stmt: $18load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:03,132:DEBUG:on stmt: $const20.1 = const(int, 0)
2020-06-11 12:07:03,133:DEBUG:on stmt: $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None)
2020-06-11 12:07:03,133:DEBUG:on stmt: $28get_iter.5 = getiter(value=$26call_function.4)
2020-06-11 12:07:03,133:DEBUG:on stmt: $phi30.0 = $28get_iter.5
2020-06-11 12:07:03,133:DEBUG:on stmt: jump 30
2020-06-11 12:07:03,133:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:07:03,133:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,133:DEBUG:on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2020-06-11 12:07:03,133:DEBUG:on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2020-06-11 12:07:03,133:DEBUG:on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2020-06-11 12:07:03,133:DEBUG:on stmt: $phi32.1 = $30for_iter.2
2020-06-11 12:07:03,133:DEBUG:on stmt: branch $30for_iter.3, 32, 46
2020-06-11 12:07:03,133:DEBUG:==== SSA block analysis pass on 32
2020-06-11 12:07:03,133:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,133:DEBUG:on stmt: i = $phi32.1
2020-06-11 12:07:03,133:DEBUG:on stmt: $38load_attr.4 = getattr(value=a, attr=flat)
2020-06-11 12:07:03,133:DEBUG:on stmt: $38load_attr.4[i] = val
2020-06-11 12:07:03,133:DEBUG:on stmt: jump 30
2020-06-11 12:07:03,133:DEBUG:==== SSA block analysis pass on 46
2020-06-11 12:07:03,133:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,133:DEBUG:on stmt: jump 48
2020-06-11 12:07:03,133:DEBUG:==== SSA block analysis pass on 48
2020-06-11 12:07:03,133:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e527bd0>
2020-06-11 12:07:03,133:DEBUG:on stmt: $const48.0 = const(NoneType, None)
2020-06-11 12:07:03,133:DEBUG:on stmt: $50return_value.1 = cast(value=$const48.0)
2020-06-11 12:07:03,133:DEBUG:on stmt: return $50return_value.1
2020-06-11 12:07:03,134:DEBUG:defs defaultdict(<class 'list'>,
            {'$10unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fc44e371ed0>],
             '$10unpack_sequence.5': [<numba.core.ir.Assign object at 0x7fc44e371e90>],
             '$10unpack_sequence.6': [<numba.core.ir.Assign object at 0x7fc44e371f50>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x7fc44e37d110>],
             '$26call_function.4': [<numba.core.ir.Assign object at 0x7fc44e37d4d0>],
             '$28get_iter.5': [<numba.core.ir.Assign object at 0x7fc44e37d610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e52c750>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e37d810>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e37d8d0>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e37d990>],
             '$38load_attr.4': [<numba.core.ir.Assign object at 0x7fc44e37de50>],
             '$50return_value.1': [<numba.core.ir.Assign object at 0x7fc44e381350>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e371f90>],
             '$const20.1': [<numba.core.ir.Assign object at 0x7fc44e37d210>],
             '$const48.0': [<numba.core.ir.Assign object at 0x7fc44e381210>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x7fc44e37d510>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x7fc44e37d750>],
             'a': [<numba.core.ir.Assign object at 0x7fc44e689dd0>],
             'end': [<numba.core.ir.Assign object at 0x7fc44e371b90>],
             'i': [<numba.core.ir.Assign object at 0x7fc44e37db90>],
             'step': [<numba.core.ir.Assign object at 0x7fc44e371a10>],
             'val': [<numba.core.ir.Assign object at 0x7fc44e6893d0>],
             'wrap': [<numba.core.ir.Assign object at 0x7fc44e689ad0>]})
2020-06-11 12:07:03,134:DEBUG:SSA violators set()
2020-06-11 12:07:03,134:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,134:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    val = arg(1, name=val)                   ['val']
    wrap = arg(2, name=wrap)                 ['wrap']
    $2load_global.0 = global(_fill_diagonal_params: <function _fill_diagonal_params at 0x7fc4548a1a70>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(a, wrap, func=$2load_global.0, args=[Var(a, arraymath.py:2706), Var(wrap, arraymath.py:2706)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'a', 'wrap']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    end = $10unpack_sequence.4               ['$10unpack_sequence.4', 'end']
    step = $10unpack_sequence.5              ['$10unpack_sequence.5', 'step']
    jump 16                                  []
label 16:
    $18load_global.0 = global(range: <class 'range'>) ['$18load_global.0']
    $const20.1 = const(int, 0)               ['$const20.1']
    $26call_function.4 = call $18load_global.0($const20.1, end, step, func=$18load_global.0, args=[Var($const20.1, arraymath.py:2708), Var(end, arraymath.py:2706), Var(step, arraymath.py:2706)], kws=(), vararg=None) ['$18load_global.0', '$26call_function.4', '$const20.1', 'end', 'step']
    $28get_iter.5 = getiter(value=$26call_function.4) ['$26call_function.4', '$28get_iter.5']
    $phi30.0 = $28get_iter.5                 ['$28get_iter.5', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 46             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $38load_attr.4 = getattr(value=a, attr=flat) ['$38load_attr.4', 'a']
    $38load_attr.4[i] = val                  ['$38load_attr.4', 'i', 'val']
    jump 30                                  []
label 46:
    jump 48                                  []
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

2020-06-11 12:07:03,134:DEBUG:================================================================================
2020-06-11 12:07:03,137:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2684)
           2	LOAD_FAST(arg=0, lineno=2684)
           4	LOAD_ATTR(arg=0, lineno=2684)
           6	LOAD_CONST(arg=1, lineno=2684)
           8	COMPARE_OP(arg=2, lineno=2684)
          10	POP_JUMP_IF_FALSE(arg=70, lineno=2684)
          12	LOAD_FAST(arg=0, lineno=2685)
          14	LOAD_ATTR(arg=1, lineno=2685)
          16	LOAD_CONST(arg=2, lineno=2685)
          18	BINARY_SUBSCR(arg=None, lineno=2685)
          20	STORE_FAST(arg=2, lineno=2685)
          22	LOAD_FAST(arg=0, lineno=2686)
          24	LOAD_ATTR(arg=1, lineno=2686)
          26	LOAD_CONST(arg=3, lineno=2686)
          28	BINARY_SUBSCR(arg=None, lineno=2686)
          30	STORE_FAST(arg=3, lineno=2686)
          32	LOAD_CONST(arg=3, lineno=2687)
          34	LOAD_FAST(arg=3, lineno=2687)
          36	BINARY_ADD(arg=None, lineno=2687)
          38	STORE_FAST(arg=4, lineno=2687)
          40	LOAD_FAST(arg=1, lineno=2688)
          42	POP_JUMP_IF_FALSE(arg=54, lineno=2688)
          44	LOAD_FAST(arg=3, lineno=2689)
          46	LOAD_FAST(arg=2, lineno=2689)
          48	BINARY_MULTIPLY(arg=None, lineno=2689)
          50	STORE_FAST(arg=5, lineno=2689)
          52	JUMP_ABSOLUTE(arg=144, lineno=2689)
>         54	LOAD_FAST(arg=3, lineno=2691)
          56	LOAD_GLOBAL(arg=2, lineno=2691)
          58	LOAD_FAST(arg=2, lineno=2691)
          60	LOAD_FAST(arg=3, lineno=2691)
          62	CALL_FUNCTION(arg=2, lineno=2691)
          64	BINARY_MULTIPLY(arg=None, lineno=2691)
          66	STORE_FAST(arg=5, lineno=2691)
          68	JUMP_FORWARD(arg=74, lineno=2691)
>         70	LOAD_GLOBAL(arg=3, lineno=2693)
          72	LOAD_METHOD(arg=4, lineno=2693)
          74	LOAD_FAST(arg=0, lineno=2693)
          76	LOAD_ATTR(arg=1, lineno=2693)
          78	CALL_METHOD(arg=1, lineno=2693)
          80	STORE_FAST(arg=6, lineno=2693)
          82	LOAD_GLOBAL(arg=3, lineno=2695)
          84	LOAD_METHOD(arg=5, lineno=2695)
          86	LOAD_GLOBAL(arg=3, lineno=2695)
          88	LOAD_METHOD(arg=6, lineno=2695)
          90	LOAD_FAST(arg=6, lineno=2695)
          92	CALL_METHOD(arg=1, lineno=2695)
          94	LOAD_CONST(arg=2, lineno=2695)
          96	COMPARE_OP(arg=2, lineno=2695)
          98	CALL_METHOD(arg=1, lineno=2695)
         100	POP_JUMP_IF_TRUE(arg=110, lineno=2695)
         102	LOAD_GLOBAL(arg=7, lineno=2696)
         104	LOAD_CONST(arg=4, lineno=2696)
         106	CALL_FUNCTION(arg=1, lineno=2696)
         108	RAISE_VARARGS(arg=1, lineno=2696)
>        110	LOAD_CONST(arg=3, lineno=2698)
         112	LOAD_GLOBAL(arg=3, lineno=2698)
         114	LOAD_METHOD(arg=8, lineno=2698)
         116	LOAD_FAST(arg=6, lineno=2698)
         118	LOAD_CONST(arg=0, lineno=2698)
         120	LOAD_CONST(arg=5, lineno=2698)
         122	BUILD_SLICE(arg=2, lineno=2698)
         124	BINARY_SUBSCR(arg=None, lineno=2698)
         126	CALL_METHOD(arg=1, lineno=2698)
         128	LOAD_METHOD(arg=9, lineno=2698)
         130	CALL_METHOD(arg=0, lineno=2698)
         132	BINARY_ADD(arg=None, lineno=2698)
         134	STORE_FAST(arg=4, lineno=2698)
         136	LOAD_FAST(arg=6, lineno=2699)
         138	LOAD_METHOD(arg=10, lineno=2699)
         140	CALL_METHOD(arg=0, lineno=2699)
         142	STORE_FAST(arg=5, lineno=2699)
>        144	LOAD_FAST(arg=5, lineno=2701)
         146	LOAD_FAST(arg=4, lineno=2701)
         148	BUILD_TUPLE(arg=2, lineno=2701)
         150	RETURN_VALUE(arg=None, lineno=2701)
2020-06-11 12:07:03,137:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,137:DEBUG:stack: []
2020-06-11 12:07:03,137:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack []
2020-06-11 12:07:03,137:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack []
2020-06-11 12:07:03,137:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack ['$a2.0']
2020-06-11 12:07:03,137:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:03,137:DEBUG:dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack ['$4load_attr.1', '$const6.2']
2020-06-11 12:07:03,137:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=70, lineno=2684)
2020-06-11 12:07:03,137:DEBUG:stack ['$8compare_op.3']
2020-06-11 12:07:03,137:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,137:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2020-06-11 12:07:03,137:DEBUG:stack: []
2020-06-11 12:07:03,137:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2685)
2020-06-11 12:07:03,137:DEBUG:stack []
2020-06-11 12:07:03,138:DEBUG:dispatch pc=14, inst=LOAD_ATTR(arg=1, lineno=2685)
2020-06-11 12:07:03,138:DEBUG:stack ['$a12.0']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=2685)
2020-06-11 12:07:03,138:DEBUG:stack ['$14load_attr.1']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=2685)
2020-06-11 12:07:03,138:DEBUG:stack ['$14load_attr.1', '$const16.2']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=2685)
2020-06-11 12:07:03,138:DEBUG:stack ['$18binary_subscr.3']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2686)
2020-06-11 12:07:03,138:DEBUG:stack []
2020-06-11 12:07:03,138:DEBUG:dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=2686)
2020-06-11 12:07:03,138:DEBUG:stack ['$a22.4']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=2686)
2020-06-11 12:07:03,138:DEBUG:stack ['$24load_attr.5']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2686)
2020-06-11 12:07:03,138:DEBUG:stack ['$24load_attr.5', '$const26.6']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=30, inst=STORE_FAST(arg=3, lineno=2686)
2020-06-11 12:07:03,138:DEBUG:stack ['$28binary_subscr.7']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=2687)
2020-06-11 12:07:03,138:DEBUG:stack []
2020-06-11 12:07:03,138:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=2687)
2020-06-11 12:07:03,138:DEBUG:stack ['$const32.8']
2020-06-11 12:07:03,138:DEBUG:dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=2687)
2020-06-11 12:07:03,138:DEBUG:stack ['$const32.8', '$n34.9']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=38, inst=STORE_FAST(arg=4, lineno=2687)
2020-06-11 12:07:03,139:DEBUG:stack ['$36binary_add.10']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=2688)
2020-06-11 12:07:03,139:DEBUG:stack []
2020-06-11 12:07:03,139:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=54, lineno=2688)
2020-06-11 12:07:03,139:DEBUG:stack ['$wrap40.11']
2020-06-11 12:07:03,139:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,139:DEBUG:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2020-06-11 12:07:03,139:DEBUG:stack: []
2020-06-11 12:07:03,139:DEBUG:dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack []
2020-06-11 12:07:03,139:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack ['$70load_global.0']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=0, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack ['$72load_method.1']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=76, inst=LOAD_ATTR(arg=1, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack ['$72load_method.1', '$a74.2']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack ['$72load_method.1', '$76load_attr.3']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=80, inst=STORE_FAST(arg=6, lineno=2693)
2020-06-11 12:07:03,139:DEBUG:stack ['$78call_method.4']
2020-06-11 12:07:03,139:DEBUG:dispatch pc=82, inst=LOAD_GLOBAL(arg=3, lineno=2695)
2020-06-11 12:07:03,139:DEBUG:stack []
2020-06-11 12:07:03,140:DEBUG:dispatch pc=84, inst=LOAD_METHOD(arg=5, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$82load_global.5']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=86, inst=LOAD_GLOBAL(arg=3, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=88, inst=LOAD_METHOD(arg=6, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$86load_global.7']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$88load_method.8']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=92, inst=CALL_METHOD(arg=1, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$88load_method.8', '$shape90.9']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$92call_method.10']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$92call_method.10', '$const94.11']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=98, inst=CALL_METHOD(arg=1, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$84load_method.6', '$96compare_op.12']
2020-06-11 12:07:03,140:DEBUG:dispatch pc=100, inst=POP_JUMP_IF_TRUE(arg=110, lineno=2695)
2020-06-11 12:07:03,140:DEBUG:stack ['$98call_method.13']
2020-06-11 12:07:03,140:DEBUG:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,140:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:03,140:DEBUG:stack: []
2020-06-11 12:07:03,141:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=2689)
2020-06-11 12:07:03,141:DEBUG:stack []
2020-06-11 12:07:03,141:DEBUG:dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=2689)
2020-06-11 12:07:03,141:DEBUG:stack ['$n44.0']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=2689)
2020-06-11 12:07:03,141:DEBUG:stack ['$n44.0', '$m46.1']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=50, inst=STORE_FAST(arg=5, lineno=2689)
2020-06-11 12:07:03,141:DEBUG:stack ['$48binary_multiply.2']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=52, inst=JUMP_ABSOLUTE(arg=144, lineno=2689)
2020-06-11 12:07:03,141:DEBUG:stack []
2020-06-11 12:07:03,141:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,141:DEBUG:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,141:DEBUG:stack: []
2020-06-11 12:07:03,141:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=2691)
2020-06-11 12:07:03,141:DEBUG:stack []
2020-06-11 12:07:03,141:DEBUG:dispatch pc=56, inst=LOAD_GLOBAL(arg=2, lineno=2691)
2020-06-11 12:07:03,141:DEBUG:stack ['$n54.0']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=2691)
2020-06-11 12:07:03,141:DEBUG:stack ['$n54.0', '$56load_global.1']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=2691)
2020-06-11 12:07:03,141:DEBUG:stack ['$n54.0', '$56load_global.1', '$m58.2']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=62, inst=CALL_FUNCTION(arg=2, lineno=2691)
2020-06-11 12:07:03,141:DEBUG:stack ['$n54.0', '$56load_global.1', '$m58.2', '$n60.3']
2020-06-11 12:07:03,141:DEBUG:dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=2691)
2020-06-11 12:07:03,142:DEBUG:stack ['$n54.0', '$62call_function.4']
2020-06-11 12:07:03,142:DEBUG:dispatch pc=66, inst=STORE_FAST(arg=5, lineno=2691)
2020-06-11 12:07:03,142:DEBUG:stack ['$64binary_multiply.5']
2020-06-11 12:07:03,142:DEBUG:dispatch pc=68, inst=JUMP_FORWARD(arg=74, lineno=2691)
2020-06-11 12:07:03,142:DEBUG:stack []
2020-06-11 12:07:03,142:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,142:DEBUG:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,142:DEBUG:stack: []
2020-06-11 12:07:03,142:DEBUG:dispatch pc=102, inst=LOAD_GLOBAL(arg=7, lineno=2696)
2020-06-11 12:07:03,142:DEBUG:stack []
2020-06-11 12:07:03,142:DEBUG:dispatch pc=104, inst=LOAD_CONST(arg=4, lineno=2696)
2020-06-11 12:07:03,142:DEBUG:stack ['$102load_global.0']
2020-06-11 12:07:03,142:DEBUG:dispatch pc=106, inst=CALL_FUNCTION(arg=1, lineno=2696)
2020-06-11 12:07:03,142:DEBUG:stack ['$102load_global.0', '$const104.1']
2020-06-11 12:07:03,142:DEBUG:dispatch pc=108, inst=RAISE_VARARGS(arg=1, lineno=2696)
2020-06-11 12:07:03,142:DEBUG:stack ['$106call_function.2']
2020-06-11 12:07:03,142:DEBUG:end state. edges=[]
2020-06-11 12:07:03,142:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,142:DEBUG:stack: []
2020-06-11 12:07:03,142:DEBUG:dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=2698)
2020-06-11 12:07:03,142:DEBUG:stack []
2020-06-11 12:07:03,142:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=3, lineno=2698)
2020-06-11 12:07:03,142:DEBUG:stack ['$const110.0']
2020-06-11 12:07:03,142:DEBUG:dispatch pc=114, inst=LOAD_METHOD(arg=8, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$112load_global.1']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=116, inst=LOAD_FAST(arg=6, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=120, inst=LOAD_CONST(arg=5, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$const118.4']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=122, inst=BUILD_SLICE(arg=2, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$const118.4', '$const120.5']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=124, inst=BINARY_SUBSCR(arg=None, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2', '$shape116.3', '$122build_slice.7']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=126, inst=CALL_METHOD(arg=1, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$114load_method.2', '$124binary_subscr.8']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=128, inst=LOAD_METHOD(arg=9, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$126call_method.9']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=130, inst=CALL_METHOD(arg=0, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$128load_method.10']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$const110.0', '$130call_method.11']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=134, inst=STORE_FAST(arg=4, lineno=2698)
2020-06-11 12:07:03,143:DEBUG:stack ['$132binary_add.12']
2020-06-11 12:07:03,143:DEBUG:dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=2699)
2020-06-11 12:07:03,144:DEBUG:stack []
2020-06-11 12:07:03,144:DEBUG:dispatch pc=138, inst=LOAD_METHOD(arg=10, lineno=2699)
2020-06-11 12:07:03,144:DEBUG:stack ['$shape136.13']
2020-06-11 12:07:03,144:DEBUG:dispatch pc=140, inst=CALL_METHOD(arg=0, lineno=2699)
2020-06-11 12:07:03,144:DEBUG:stack ['$138load_method.14']
2020-06-11 12:07:03,144:DEBUG:dispatch pc=142, inst=STORE_FAST(arg=5, lineno=2699)
2020-06-11 12:07:03,144:DEBUG:stack ['$140call_method.15']
2020-06-11 12:07:03,144:DEBUG:end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,144:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,144:DEBUG:stack: []
2020-06-11 12:07:03,144:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=5, lineno=2701)
2020-06-11 12:07:03,144:DEBUG:stack []
2020-06-11 12:07:03,144:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=4, lineno=2701)
2020-06-11 12:07:03,144:DEBUG:stack ['$end144.0']
2020-06-11 12:07:03,144:DEBUG:dispatch pc=148, inst=BUILD_TUPLE(arg=2, lineno=2701)
2020-06-11 12:07:03,144:DEBUG:stack ['$end144.0', '$step146.1']
2020-06-11 12:07:03,144:DEBUG:dispatch pc=150, inst=RETURN_VALUE(arg=None, lineno=2701)
2020-06-11 12:07:03,144:DEBUG:stack ['$148build_tuple.2']
2020-06-11 12:07:03,144:DEBUG:end state. edges=[]
2020-06-11 12:07:03,144:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,144:DEBUG:pending: deque([State(pc_initial=144 nstack_initial=0)])
2020-06-11 12:07:03,145:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,145:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=144 nstack_initial=0): set()})
2020-06-11 12:07:03,145:DEBUG:defmap: {}
2020-06-11 12:07:03,145:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,145:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,145:DEBUG:keep phismap: {}
2020-06-11 12:07:03,145:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,145:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,145:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 70: ()})
2020-06-11 12:07:03,145:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$a12.0'}), (14, {'item': '$a12.0', 'res': '$14load_attr.1'}), (16, {'res': '$const16.2'}), (18, {'index': '$const16.2', 'target': '$14load_attr.1', 'res': '$18binary_subscr.3'}), (20, {'value': '$18binary_subscr.3'}), (22, {'res': '$a22.4'}), (24, {'item': '$a22.4', 'res': '$24load_attr.5'}), (26, {'res': '$const26.6'}), (28, {'index': '$const26.6', 'target': '$24load_attr.5', 'res': '$28binary_subscr.7'}), (30, {'value': '$28binary_subscr.7'}), (32, {'res': '$const32.8'}), (34, {'res': '$n34.9'}), (36, {'lhs': '$const32.8', 'rhs': '$n34.9', 'res': '$36binary_add.10'}), (38, {'value': '$36binary_add.10'}), (40, {'res': '$wrap40.11'}), (42, {'pred': '$wrap40.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 54: ()})
2020-06-11 12:07:03,145:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$n44.0'}), (46, {'res': '$m46.1'}), (48, {'lhs': '$n44.0', 'rhs': '$m46.1', 'res': '$48binary_multiply.2'}), (50, {'value': '$48binary_multiply.2'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:07:03,145:DEBUG:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$n54.0'}), (56, {'res': '$56load_global.1'}), (58, {'res': '$m58.2'}), (60, {'res': '$n60.3'}), (62, {'func': '$56load_global.1', 'args': ['$m58.2', '$n60.3'], 'res': '$62call_function.4'}), (64, {'lhs': '$n54.0', 'rhs': '$62call_function.4', 'res': '$64binary_multiply.5'}), (66, {'value': '$64binary_multiply.5'}), (68, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:07:03,146:DEBUG:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$70load_global.0'}), (72, {'item': '$70load_global.0', 'res': '$72load_method.1'}), (74, {'res': '$a74.2'}), (76, {'item': '$a74.2', 'res': '$76load_attr.3'}), (78, {'func': '$72load_method.1', 'args': ['$76load_attr.3'], 'res': '$78call_method.4'}), (80, {'value': '$78call_method.4'}), (82, {'res': '$82load_global.5'}), (84, {'item': '$82load_global.5', 'res': '$84load_method.6'}), (86, {'res': '$86load_global.7'}), (88, {'item': '$86load_global.7', 'res': '$88load_method.8'}), (90, {'res': '$shape90.9'}), (92, {'func': '$88load_method.8', 'args': ['$shape90.9'], 'res': '$92call_method.10'}), (94, {'res': '$const94.11'}), (96, {'lhs': '$92call_method.10', 'rhs': '$const94.11', 'res': '$96compare_op.12'}), (98, {'func': '$84load_method.6', 'args': ['$96compare_op.12'], 'res': '$98call_method.13'}), (100, {'pred': '$98call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 110: ()})
2020-06-11 12:07:03,146:DEBUG:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'res': '$const104.1'}), (106, {'func': '$102load_global.0', 'args': ['$const104.1'], 'res': '$106call_function.2'}), (108, {'exc': '$106call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,146:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$const110.0'}), (112, {'res': '$112load_global.1'}), (114, {'item': '$112load_global.1', 'res': '$114load_method.2'}), (116, {'res': '$shape116.3'}), (118, {'res': '$const118.4'}), (120, {'res': '$const120.5'}), (122, {'start': '$const118.4', 'stop': '$const120.5', 'step': None, 'res': '$122build_slice.7', 'slicevar': '$122build_slice.6'}), (124, {'index': '$122build_slice.7', 'target': '$shape116.3', 'res': '$124binary_subscr.8'}), (126, {'func': '$114load_method.2', 'args': ['$124binary_subscr.8'], 'res': '$126call_method.9'}), (128, {'item': '$126call_method.9', 'res': '$128load_method.10'}), (130, {'func': '$128load_method.10', 'args': [], 'res': '$130call_method.11'}), (132, {'lhs': '$const110.0', 'rhs': '$130call_method.11', 'res': '$132binary_add.12'}), (134, {'value': '$132binary_add.12'}), (136, {'res': '$shape136.13'}), (138, {'item': '$shape136.13', 'res': '$138load_method.14'}), (140, {'func': '$138load_method.14', 'args': [], 'res': '$140call_method.15'}), (142, {'value': '$140call_method.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: ()})
2020-06-11 12:07:03,146:DEBUG:block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=((144, {'res': '$end144.0'}), (146, {'res': '$step146.1'}), (148, {'items': ['$end144.0', '$step146.1'], 'res': '$148build_tuple.2'}), (150, {'retval': '$148build_tuple.2', 'castval': '$150return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,148:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = getattr(value=a, attr=ndim) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    branch $8compare_op.3, 12, 70            ['$8compare_op.3']
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = getitem(value=$14load_attr.1, index=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = getitem(value=$24load_attr.5, index=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end = $64binary_multiply.5               ['$64binary_multiply.5', 'end']
    jump 144                                 []
label 70:
    $70load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$70load_global.0']
    $72load_method.1 = getattr(value=$70load_global.0, attr=array) ['$70load_global.0', '$72load_method.1']
    $76load_attr.3 = getattr(value=a, attr=shape) ['$76load_attr.3', 'a']
    $78call_method.4 = call $72load_method.1($76load_attr.3, func=$72load_method.1, args=[Var($76load_attr.3, arraymath.py:2693)], kws=(), vararg=None) ['$72load_method.1', '$76load_attr.3', '$78call_method.4']
    shape = $78call_method.4                 ['$78call_method.4', 'shape']
    $82load_global.5 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$82load_global.5']
    $84load_method.6 = getattr(value=$82load_global.5, attr=all) ['$82load_global.5', '$84load_method.6']
    $86load_global.7 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$86load_global.7']
    $88load_method.8 = getattr(value=$86load_global.7, attr=diff) ['$86load_global.7', '$88load_method.8']
    $92call_method.10 = call $88load_method.8(shape, func=$88load_method.8, args=[Var(shape, arraymath.py:2693)], kws=(), vararg=None) ['$88load_method.8', '$92call_method.10', 'shape']
    $const94.11 = const(int, 0)              ['$const94.11']
    $96compare_op.12 = $92call_method.10 == $const94.11 ['$92call_method.10', '$96compare_op.12', '$const94.11']
    $98call_method.13 = call $84load_method.6($96compare_op.12, func=$84load_method.6, args=[Var($96compare_op.12, arraymath.py:2695)], kws=(), vararg=None) ['$84load_method.6', '$96compare_op.12', '$98call_method.13']
    branch $98call_method.13, 110, 102       ['$98call_method.13']
label 102:
    $102load_global.0 = global(ValueError: <class 'ValueError'>) ['$102load_global.0']
    $const104.1 = const(str, All dimensions of input must be of equal length) ['$const104.1']
    $106call_function.2 = call $102load_global.0($const104.1, func=$102load_global.0, args=[Var($const104.1, arraymath.py:2696)], kws=(), vararg=None) ['$102load_global.0', '$106call_function.2', '$const104.1']
    raise $106call_function.2                ['$106call_function.2']
label 110:
    $const110.0 = const(int, 1)              ['$const110.0']
    $112load_global.1 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$112load_global.1']
    $114load_method.2 = getattr(value=$112load_global.1, attr=cumprod) ['$112load_global.1', '$114load_method.2']
    $const118.4 = const(NoneType, None)      ['$const118.4']
    $const120.5 = const(int, -1)             ['$const120.5']
    $122build_slice.6 = global(slice: <class 'slice'>) ['$122build_slice.6']
    $122build_slice.7 = call $122build_slice.6($const118.4, $const120.5, func=$122build_slice.6, args=(Var($const118.4, arraymath.py:2698), Var($const120.5, arraymath.py:2698)), kws=(), vararg=None) ['$122build_slice.6', '$122build_slice.7', '$const118.4', '$const120.5']
    $124binary_subscr.8 = getitem(value=shape, index=$122build_slice.7) ['$122build_slice.7', '$124binary_subscr.8', 'shape']
    $126call_method.9 = call $114load_method.2($124binary_subscr.8, func=$114load_method.2, args=[Var($124binary_subscr.8, arraymath.py:2698)], kws=(), vararg=None) ['$114load_method.2', '$124binary_subscr.8', '$126call_method.9']
    $128load_method.10 = getattr(value=$126call_method.9, attr=sum) ['$126call_method.9', '$128load_method.10']
    $130call_method.11 = call $128load_method.10(func=$128load_method.10, args=[], kws=(), vararg=None) ['$128load_method.10', '$130call_method.11']
    $132binary_add.12 = $const110.0 + $130call_method.11 ['$130call_method.11', '$132binary_add.12', '$const110.0']
    step = $132binary_add.12                 ['$132binary_add.12', 'step']
    $138load_method.14 = getattr(value=shape, attr=prod) ['$138load_method.14', 'shape']
    $140call_method.15 = call $138load_method.14(func=$138load_method.14, args=[], kws=(), vararg=None) ['$138load_method.14', '$140call_method.15']
    end = $140call_method.15                 ['$140call_method.15', 'end']
    jump 144                                 []
label 144:
    $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:07:03,153:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,153:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = const(int, 1)           ['$8compare_op.3']
    jump 12                                  []
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end = $64binary_multiply.5               ['$64binary_multiply.5', 'end']
    jump 144                                 []
label 144:
    $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:07:03,153:DEBUG:================================================================================
2020-06-11 12:07:03,154:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,154:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e52eb90>
2020-06-11 12:07:03,154:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:03,154:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:07:03,154:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,154:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:07:03,154:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:07:03,154:DEBUG:on stmt: jump 12
2020-06-11 12:07:03,154:DEBUG:==== SSA block analysis pass on 12
2020-06-11 12:07:03,154:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e52eb90>
2020-06-11 12:07:03,154:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,154:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:07:03,154:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:07:03,154:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:07:03,154:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,154:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:07:03,154:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:07:03,154:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:07:03,154:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:07:03,154:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:07:03,154:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:07:03,154:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:07:03,154:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:03,154:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e52eb90>
2020-06-11 12:07:03,154:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:07:03,154:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:07:03,155:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,155:DEBUG:==== SSA block analysis pass on 54
2020-06-11 12:07:03,155:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e52eb90>
2020-06-11 12:07:03,155:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:07:03,155:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:07:03,155:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:07:03,155:DEBUG:on stmt: end = $64binary_multiply.5
2020-06-11 12:07:03,155:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,155:DEBUG:==== SSA block analysis pass on 144
2020-06-11 12:07:03,155:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e52eb90>
2020-06-11 12:07:03,155:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:07:03,155:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:07:03,155:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:07:03,155:DEBUG:defs defaultdict(<class 'list'>,
            {'$148build_tuple.2': [<numba.core.ir.Assign object at 0x7fc44e324990>],
             '$14load_attr.1': [<numba.core.ir.Assign object at 0x7fc44e386310>],
             '$150return_value.3': [<numba.core.ir.Assign object at 0x7fc44e324a90>],
             '$18binary_subscr.3': [<numba.core.ir.Assign object at 0x7fc44e3862d0>],
             '$24load_attr.5': [<numba.core.ir.Assign object at 0x7fc44e386e10>],
             '$28binary_subscr.7': [<numba.core.ir.Assign object at 0x7fc44e324f90>],
             '$36binary_add.10': [<numba.core.ir.Assign object at 0x7fc44e3916d0>],
             '$48binary_multiply.2': [<numba.core.ir.Assign object at 0x7fc44e391ad0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc44e38b190>],
             '$56load_global.1': [<numba.core.ir.Assign object at 0x7fc44e391e10>],
             '$62call_function.4': [<numba.core.ir.Assign object at 0x7fc44e39d110>],
             '$64binary_multiply.5': [<numba.core.ir.Assign object at 0x7fc44e39d210>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x7fc44e386150>],
             '$const16.2': [<numba.core.ir.Assign object at 0x7fc44e386110>],
             '$const26.6': [<numba.core.ir.Assign object at 0x7fc44e3914d0>],
             '$const32.8': [<numba.core.ir.Assign object at 0x7fc44e3913d0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fc44e381190>],
             'a': [<numba.core.ir.Assign object at 0x7fc44e38b590>],
             'end': [<numba.core.ir.Assign object at 0x7fc44e391b90>,
                     <numba.core.ir.Assign object at 0x7fc44e391b50>],
             'm': [<numba.core.ir.Assign object at 0x7fc44e386d50>],
             'n': [<numba.core.ir.Assign object at 0x7fc44e391650>],
             'step': [<numba.core.ir.Assign object at 0x7fc44e391790>],
             'wrap': [<numba.core.ir.Assign object at 0x7fc44e38b150>]})
2020-06-11 12:07:03,155:DEBUG:SSA violators {'end'}
2020-06-11 12:07:03,155:DEBUG:Fix SSA violator on var end
2020-06-11 12:07:03,155:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:03,156:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e52e950>
2020-06-11 12:07:03,156:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:03,156:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:07:03,156:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,156:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:07:03,156:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:07:03,156:DEBUG:on stmt: jump 12
2020-06-11 12:07:03,156:DEBUG:==== SSA block rewrite pass on 12
2020-06-11 12:07:03,156:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e52e950>
2020-06-11 12:07:03,156:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,156:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:07:03,156:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:07:03,156:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:07:03,156:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,156:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:07:03,156:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:07:03,156:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:07:03,156:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:07:03,156:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:07:03,156:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:07:03,156:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:07:03,156:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:03,156:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e52e950>
2020-06-11 12:07:03,156:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:07:03,156:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:07:03,156:DEBUG:first assign: end
2020-06-11 12:07:03,157:DEBUG:replaced with: end = $48binary_multiply.2
2020-06-11 12:07:03,157:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,157:DEBUG:==== SSA block rewrite pass on 54
2020-06-11 12:07:03,157:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e52e950>
2020-06-11 12:07:03,157:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:07:03,157:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:07:03,157:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:07:03,157:DEBUG:on stmt: end = $64binary_multiply.5
2020-06-11 12:07:03,157:DEBUG:replaced with: end.1 = $64binary_multiply.5
2020-06-11 12:07:03,157:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,157:DEBUG:==== SSA block rewrite pass on 144
2020-06-11 12:07:03,157:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e52e950>
2020-06-11 12:07:03,157:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:07:03,157:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:07:03,157:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:07:03,157:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {44: [<numba.core.ir.Assign object at 0x7fc44e32b7d0>],
             54: [<numba.core.ir.Assign object at 0x7fc44e32bbd0>]})
2020-06-11 12:07:03,157:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:03,157:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e32bf10>
2020-06-11 12:07:03,157:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:03,158:DEBUG:on stmt: wrap = arg(1, name=wrap)
2020-06-11 12:07:03,158:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,158:DEBUG:on stmt: $const6.2 = const(int, 2)
2020-06-11 12:07:03,158:DEBUG:on stmt: $8compare_op.3 = const(int, 1)
2020-06-11 12:07:03,158:DEBUG:on stmt: jump 12
2020-06-11 12:07:03,158:DEBUG:==== SSA block rewrite pass on 12
2020-06-11 12:07:03,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e32bf10>
2020-06-11 12:07:03,158:DEBUG:on stmt: $14load_attr.1 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,158:DEBUG:on stmt: $const16.2 = const(int, 0)
2020-06-11 12:07:03,158:DEBUG:on stmt: $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2)
2020-06-11 12:07:03,158:DEBUG:on stmt: m = $18binary_subscr.3
2020-06-11 12:07:03,158:DEBUG:on stmt: $24load_attr.5 = getattr(value=a, attr=shape)
2020-06-11 12:07:03,158:DEBUG:on stmt: $const26.6 = const(int, 1)
2020-06-11 12:07:03,158:DEBUG:on stmt: $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6)
2020-06-11 12:07:03,158:DEBUG:on stmt: n = $28binary_subscr.7
2020-06-11 12:07:03,158:DEBUG:on stmt: $const32.8 = const(int, 1)
2020-06-11 12:07:03,158:DEBUG:on stmt: $36binary_add.10 = $const32.8 + n
2020-06-11 12:07:03,158:DEBUG:on stmt: step = $36binary_add.10
2020-06-11 12:07:03,158:DEBUG:on stmt: branch wrap, 44, 54
2020-06-11 12:07:03,158:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:03,158:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e32bf10>
2020-06-11 12:07:03,158:DEBUG:on stmt: $48binary_multiply.2 = n * m
2020-06-11 12:07:03,158:DEBUG:on stmt: end = $48binary_multiply.2
2020-06-11 12:07:03,158:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,158:DEBUG:==== SSA block rewrite pass on 54
2020-06-11 12:07:03,159:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e32bf10>
2020-06-11 12:07:03,159:DEBUG:on stmt: $56load_global.1 = global(min: <built-in function min>)
2020-06-11 12:07:03,159:DEBUG:on stmt: $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None)
2020-06-11 12:07:03,159:DEBUG:on stmt: $64binary_multiply.5 = n * $62call_function.4
2020-06-11 12:07:03,159:DEBUG:on stmt: end.1 = $64binary_multiply.5
2020-06-11 12:07:03,159:DEBUG:on stmt: jump 144
2020-06-11 12:07:03,159:DEBUG:==== SSA block rewrite pass on 144
2020-06-11 12:07:03,159:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e32bf10>
2020-06-11 12:07:03,159:DEBUG:on stmt: $148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:07:03,159:DEBUG:find_def var='end' stmt=$148build_tuple.2 = build_tuple(items=[Var(end, arraymath.py:2689), Var(step, arraymath.py:2687)])
2020-06-11 12:07:03,159:DEBUG:find_def_from_top label 144
2020-06-11 12:07:03,159:DEBUG:insert phi node end.2 = phi(incoming_values=[], incoming_blocks=[]) at 144
2020-06-11 12:07:03,159:DEBUG:find_def_from_bottom label 44
2020-06-11 12:07:03,159:DEBUG:incoming_def end = $48binary_multiply.2
2020-06-11 12:07:03,159:DEBUG:find_def_from_bottom label 54
2020-06-11 12:07:03,159:DEBUG:incoming_def end.1 = $64binary_multiply.5
2020-06-11 12:07:03,159:DEBUG:replaced with: $148build_tuple.2 = build_tuple(items=[Var(end.2, arraymath.py:2701), Var(step, arraymath.py:2687)])
2020-06-11 12:07:03,159:DEBUG:on stmt: $150return_value.3 = cast(value=$148build_tuple.2)
2020-06-11 12:07:03,159:DEBUG:on stmt: return $150return_value.3
2020-06-11 12:07:03,159:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,160:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    wrap = arg(1, name=wrap)                 ['wrap']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8compare_op.3 = const(int, 1)           ['$8compare_op.3']
    jump 12                                  []
label 12:
    $14load_attr.1 = getattr(value=a, attr=shape) ['$14load_attr.1', 'a']
    $const16.2 = const(int, 0)               ['$const16.2']
    $18binary_subscr.3 = static_getitem(value=$14load_attr.1, index=0, index_var=$const16.2) ['$14load_attr.1', '$18binary_subscr.3', '$const16.2']
    m = $18binary_subscr.3                   ['$18binary_subscr.3', 'm']
    $24load_attr.5 = getattr(value=a, attr=shape) ['$24load_attr.5', 'a']
    $const26.6 = const(int, 1)               ['$const26.6']
    $28binary_subscr.7 = static_getitem(value=$24load_attr.5, index=1, index_var=$const26.6) ['$24load_attr.5', '$28binary_subscr.7', '$const26.6']
    n = $28binary_subscr.7                   ['$28binary_subscr.7', 'n']
    $const32.8 = const(int, 1)               ['$const32.8']
    $36binary_add.10 = $const32.8 + n        ['$36binary_add.10', '$const32.8', 'n']
    step = $36binary_add.10                  ['$36binary_add.10', 'step']
    branch wrap, 44, 54                      ['wrap']
label 44:
    $48binary_multiply.2 = n * m             ['$48binary_multiply.2', 'm', 'n']
    end = $48binary_multiply.2               ['$48binary_multiply.2', 'end']
    jump 144                                 []
label 54:
    $56load_global.1 = global(min: <built-in function min>) ['$56load_global.1']
    $62call_function.4 = call $56load_global.1(m, n, func=$56load_global.1, args=[Var(m, arraymath.py:2685), Var(n, arraymath.py:2686)], kws=(), vararg=None) ['$56load_global.1', '$62call_function.4', 'm', 'n']
    $64binary_multiply.5 = n * $62call_function.4 ['$62call_function.4', '$64binary_multiply.5', 'n']
    end.1 = $64binary_multiply.5             ['$64binary_multiply.5', 'end.1']
    jump 144                                 []
label 144:
    end.2 = phi(incoming_values=[Var(end, arraymath.py:2689), Var(end.1, arraymath.py:2691)], incoming_blocks=[44, 54]) ['end', 'end.1', 'end.2']
    $148build_tuple.2 = build_tuple(items=[Var(end.2, arraymath.py:2701), Var(step, arraymath.py:2687)]) ['$148build_tuple.2', 'end.2', 'step']
    $150return_value.3 = cast(value=$148build_tuple.2) ['$148build_tuple.2', '$150return_value.3']
    return $150return_value.3                ['$150return_value.3']

2020-06-11 12:07:03,160:DEBUG:================================================================================
2020-06-11 12:07:03,345:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1770)
           2	LOAD_FAST(arg=0, lineno=1770)
           4	LOAD_METHOD(arg=0, lineno=1770)
           6	CALL_METHOD(arg=0, lineno=1770)
           8	LOAD_METHOD(arg=1, lineno=1770)
          10	LOAD_FAST(arg=0, lineno=1770)
          12	LOAD_ATTR(arg=2, lineno=1770)
          14	CALL_METHOD(arg=1, lineno=1770)
          16	RETURN_VALUE(arg=None, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,346:DEBUG:stack: []
2020-06-11 12:07:03,346:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack []
2020-06-11 12:07:03,346:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack []
2020-06-11 12:07:03,346:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$ary2.0']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$4load_method.1']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$6call_method.2']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$8load_method.3']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$8load_method.3', '$ary10.4']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$8load_method.3', '$12load_attr.5']
2020-06-11 12:07:03,346:DEBUG:dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=1770)
2020-06-11 12:07:03,346:DEBUG:stack ['$14call_method.6']
2020-06-11 12:07:03,347:DEBUG:end state. edges=[]
2020-06-11 12:07:03,347:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,347:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,347:DEBUG:defmap: {}
2020-06-11 12:07:03,347:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,347:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,347:DEBUG:keep phismap: {}
2020-06-11 12:07:03,347:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,347:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,347:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'item': '$6call_method.2', 'res': '$8load_method.3'}), (10, {'res': '$ary10.4'}), (12, {'item': '$ary10.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'retval': '$14call_method.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,347:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:03,350:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,350:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:03,350:DEBUG:================================================================================
2020-06-11 12:07:03,350:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,350:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543d4d90>
2020-06-11 12:07:03,350:DEBUG:on stmt: ary = arg(0, name=ary)
2020-06-11 12:07:03,350:DEBUG:on stmt: $4load_method.1 = getattr(value=ary, attr=copy)
2020-06-11 12:07:03,350:DEBUG:on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
2020-06-11 12:07:03,350:DEBUG:on stmt: $8load_method.3 = getattr(value=$6call_method.2, attr=reshape)
2020-06-11 12:07:03,350:DEBUG:on stmt: $12load_attr.5 = getattr(value=ary, attr=size)
2020-06-11 12:07:03,350:DEBUG:on stmt: $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None)
2020-06-11 12:07:03,350:DEBUG:on stmt: $16return_value.7 = cast(value=$14call_method.6)
2020-06-11 12:07:03,350:DEBUG:on stmt: return $16return_value.7
2020-06-11 12:07:03,351:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fc4543d4850>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x7fc4543d4fd0>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7fc4543d4150>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc45443e450>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x7fc4543d46d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fc4543d4590>],
             'ary': [<numba.core.ir.Assign object at 0x7fc4544621d0>]})
2020-06-11 12:07:03,351:DEBUG:SSA violators set()
2020-06-11 12:07:03,351:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,351:DEBUG:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

2020-06-11 12:07:03,351:DEBUG:================================================================================
2020-06-11 12:07:03,537:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:03,538:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,538:DEBUG:stack: []
2020-06-11 12:07:03,538:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack []
2020-06-11 12:07:03,538:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack []
2020-06-11 12:07:03,538:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:03,538:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:07:03,538:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:07:03,538:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:03,538:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:03,538:DEBUG:end state. edges=[]
2020-06-11 12:07:03,538:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,538:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,538:DEBUG:defmap: {}
2020-06-11 12:07:03,538:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,538:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,538:DEBUG:keep phismap: {}
2020-06-11 12:07:03,539:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,539:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,539:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,539:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e603950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,540:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,541:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e603950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,541:DEBUG:================================================================================
2020-06-11 12:07:03,541:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,541:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e32bb90>
2020-06-11 12:07:03,541:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:03,541:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:03,541:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e603950>)
2020-06-11 12:07:03,541:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:07:03,541:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:03,541:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:03,541:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44e645950>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e4a3710>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4a3f10>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e4a3550>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e4a3cd0>]})
2020-06-11 12:07:03,541:DEBUG:SSA violators set()
2020-06-11 12:07:03,541:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,541:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e603950>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,541:DEBUG:================================================================================
2020-06-11 12:07:03,543:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:03,543:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,543:DEBUG:stack: []
2020-06-11 12:07:03,543:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:07:03,544:DEBUG:stack []
2020-06-11 12:07:03,544:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:07:03,544:DEBUG:stack []
2020-06-11 12:07:03,544:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:07:03,544:DEBUG:stack ['$arr2.0']
2020-06-11 12:07:03,544:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:07:03,544:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:03,544:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:07:03,544:DEBUG:stack []
2020-06-11 12:07:03,544:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:07:03,544:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:07:03,544:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,544:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:03,544:DEBUG:stack: []
2020-06-11 12:07:03,544:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:03,544:DEBUG:stack []
2020-06-11 12:07:03,544:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:07:03,544:DEBUG:stack ['$axis12.0']
2020-06-11 12:07:03,544:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:07:03,544:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:07:03,544:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:07:03,544:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:07:03,544:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,544:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:03,545:DEBUG:stack: []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:07:03,545:DEBUG:stack []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:07:03,545:DEBUG:stack ['$axis36.0']
2020-06-11 12:07:03,545:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:07:03,545:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:07:03,545:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:07:03,545:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:07:03,545:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,545:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:07:03,545:DEBUG:stack: []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:03,545:DEBUG:stack []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:07:03,545:DEBUG:stack ['$axis20.0']
2020-06-11 12:07:03,545:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:07:03,545:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:07:03,545:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:07:03,545:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:07:03,545:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,545:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:03,545:DEBUG:stack: []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:07:03,545:DEBUG:stack []
2020-06-11 12:07:03,545:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:07:03,546:DEBUG:stack ['$28load_global.0']
2020-06-11 12:07:03,546:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:07:03,546:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:07:03,546:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:07:03,546:DEBUG:stack ['$32call_function.2']
2020-06-11 12:07:03,546:DEBUG:end state. edges=[]
2020-06-11 12:07:03,546:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:03,546:DEBUG:stack: []
2020-06-11 12:07:03,546:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:07:03,546:DEBUG:stack []
2020-06-11 12:07:03,546:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:07:03,546:DEBUG:stack ['$44load_global.0']
2020-06-11 12:07:03,546:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:07:03,546:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:07:03,546:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:07:03,546:DEBUG:stack ['$48call_function.2']
2020-06-11 12:07:03,546:DEBUG:end state. edges=[]
2020-06-11 12:07:03,546:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:03,546:DEBUG:stack: []
2020-06-11 12:07:03,546:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:07:03,546:DEBUG:stack []
2020-06-11 12:07:03,546:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:07:03,546:DEBUG:stack ['$52load_global.0']
2020-06-11 12:07:03,546:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:07:03,547:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:07:03,547:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:07:03,547:DEBUG:stack ['$58call_function.3']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:07:03,547:DEBUG:stack []
2020-06-11 12:07:03,547:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:07:03,547:DEBUG:stack ['$ashape62.4']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:07:03,547:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:07:03,547:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:07:03,547:DEBUG:stack []
2020-06-11 12:07:03,547:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:07:03,547:DEBUG:stack ['$ashape70.7']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:07:03,547:DEBUG:stack ['$72load_method.8']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:07:03,547:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:07:03,547:DEBUG:stack ['$76call_method.10']
2020-06-11 12:07:03,547:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:07:03,547:DEBUG:stack []
2020-06-11 12:07:03,547:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:07:03,547:DEBUG:stack ['$80load_global.11']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:07:03,548:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:07:03,548:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:07:03,548:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:07:03,548:DEBUG:stack ['$88call_function.15']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack []
2020-06-11 12:07:03,548:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$92load_global.16']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:07:03,548:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:07:03,548:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:07:03,549:DEBUG:stack ['$106call_method.23']
2020-06-11 12:07:03,549:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,549:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:03,549:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:03,549:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:03,549:DEBUG:stack: []
2020-06-11 12:07:03,549:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack []
2020-06-11 12:07:03,549:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack []
2020-06-11 12:07:03,549:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack ['$112load_global.0']
2020-06-11 12:07:03,549:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:07:03,549:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack ['$116call_function.2']
2020-06-11 12:07:03,549:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,549:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,549:DEBUG:stack: ['$phi120.0']
2020-06-11 12:07:03,549:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:07:03,549:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:03,549:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,549:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:07:03,549:DEBUG:stack: []
2020-06-11 12:07:03,550:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:07:03,550:DEBUG:stack []
2020-06-11 12:07:03,550:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,550:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:07:03,550:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:07:03,550:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:07:03,550:DEBUG:stack ['$phi122.0']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:07:03,550:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:07:03,550:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,550:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:03,550:DEBUG:stack: []
2020-06-11 12:07:03,550:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:07:03,550:DEBUG:stack []
2020-06-11 12:07:03,550:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:07:03,550:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:07:03,550:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:07:03,550:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:07:03,550:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:03,551:DEBUG:stack ['$310call_function.3']
2020-06-11 12:07:03,551:DEBUG:end state. edges=[]
2020-06-11 12:07:03,551:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:03,551:DEBUG:stack: ['$phi128.0']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:07:03,551:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:07:03,551:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:03,552:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,552:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,552:DEBUG:stack: ['$phi156.0']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi156.0']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:07:03,552:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,552:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:03,552:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:03,552:DEBUG:stack: ['$phi164.0']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:07:03,552:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:03,552:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:07:03,553:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:07:03,553:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:03,554:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,554:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,554:DEBUG:stack: ['$phi192.0']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi192.0']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:07:03,554:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,554:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:03,554:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:03,554:DEBUG:stack: ['$phi200.0']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:07:03,554:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:07:03,554:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:03,555:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,555:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,555:DEBUG:stack: ['$phi228.0']
2020-06-11 12:07:03,555:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:07:03,555:DEBUG:stack ['$phi228.0']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:07:03,556:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,556:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:03,556:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:03,556:DEBUG:stack: ['$phi238.0']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:07:03,556:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:07:03,556:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:03,557:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,557:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,557:DEBUG:stack: ['$phi266.0']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi266.0']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:07:03,557:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:07:03,557:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:07:03,558:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,558:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,558:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,558:DEBUG:stack: ['$phi274.0']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:07:03,558:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:07:03,558:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:07:03,559:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:07:03,559:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:07:03,559:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:07:03,559:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:07:03,559:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:07:03,559:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:07:03,559:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:07:03,559:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:07:03,559:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:03,559:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,559:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,559:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:03,560:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,560:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:07:03,560:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:07:03,560:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:07:03,560:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:03,561:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:03,562:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:03,562:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:07:03,562:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:07:03,562:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,562:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:07:03,562:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:07:03,562:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:07:03,562:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,562:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:07:03,563:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,567:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:07:03,579:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,579:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:03,579:DEBUG:================================================================================
2020-06-11 12:07:03,579:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,579:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,579:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:03,579:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:03,580:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,580:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:03,580:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,580:DEBUG:on stmt: jump 36
2020-06-11 12:07:03,580:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:03,580:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,580:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:03,580:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:03,580:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:03,580:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,580:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:03,580:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:03,580:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:03,580:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:03,580:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:03,580:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,580:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:03,580:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,580:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:03,580:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:03,580:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:03,580:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:03,580:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:03,580:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:03,580:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:03,580:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,581:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:03,581:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:03,581:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:03,581:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:03,581:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:03,581:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:03,581:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:03,581:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,581:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,581:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:03,581:DEBUG:on stmt: jump 110
2020-06-11 12:07:03,581:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:07:03,581:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,581:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:03,581:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:03,581:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:03,581:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:03,581:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,581:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:07:03,581:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,581:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:03,581:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:03,581:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:03,581:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:03,581:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:03,581:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:07:03,581:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,582:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:03,582:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,582:DEBUG:on stmt: jump 128
2020-06-11 12:07:03,582:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:07:03,582:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,582:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:03,582:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,582:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:03,582:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:03,582:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:03,582:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:03,582:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:03,582:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:03,582:DEBUG:on stmt: jump 305
2020-06-11 12:07:03,582:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:07:03,582:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,582:DEBUG:on stmt: jump 304
2020-06-11 12:07:03,582:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:07:03,582:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,582:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:03,582:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:03,582:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:03,582:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:03,582:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:03,582:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:07:03,582:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4543cc350>
2020-06-11 12:07:03,583:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,583:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7fc44e620b10>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7fc44e620110>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7fc44e6201d0>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7fc44e620090>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7fc44e6204d0>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7fc44e585a90>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7fc44e585d90>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e585c10>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e585f90>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e530d50>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7fc44e585110>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7fc44e585510>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7fc44e585390>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7fc44e5856d0>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7fc44e5850d0>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7fc44e6c1e50>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7fc44e6c1290>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e67a950>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7fc44e67a050>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7fc44e67ac50>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e60ba50>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fc44e60b790>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7fc44e60bbd0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc44e4a3210>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7fc44e5e48d0>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7fc44e5e4f10>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7fc44e5e4a90>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7fc44e5e4b10>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7fc44e5e43d0>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7fc44e5e4310>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7fc44e5e4750>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7fc44e3242d0>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7fc44e324590>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7fc44e4a3a90>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7fc44e620990>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7fc44e620d50>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7fc44e620b90>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7fc44e67aad0>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7fc44e60b450>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7fc44e5e4c90>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7fc44e530550>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e6ad2d0>],
             'ashape': [<numba.core.ir.Assign object at 0x7fc44e5e4d50>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7fc44e3243d0>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e6ad210>],
             'axis_index': [<numba.core.ir.Assign object at 0x7fc44e585c90>],
             'axis_len': [<numba.core.ir.Assign object at 0x7fc44e5e4d90>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7fc44e585b50>],
             'ndim': [<numba.core.ir.Assign object at 0x7fc44e4a3610>],
             'result': [<numba.core.ir.Assign object at 0x7fc44e620850>,
                        <numba.core.ir.Assign object at 0x7fc44e585b10>]})
2020-06-11 12:07:03,583:DEBUG:SSA violators {'result'}
2020-06-11 12:07:03,583:DEBUG:Fix SSA violator on var result
2020-06-11 12:07:03,583:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:03,583:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,583:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:03,583:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:03,583:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,583:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:03,583:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,584:DEBUG:on stmt: jump 36
2020-06-11 12:07:03,584:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:03,584:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,584:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:03,584:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:03,584:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:03,584:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,584:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:03,584:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:03,584:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:03,584:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:03,584:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:03,584:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,584:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:03,584:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,584:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:03,584:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:03,584:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:03,584:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:03,584:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:03,584:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:03,584:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:03,584:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,584:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:03,584:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:03,584:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:03,584:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:03,585:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:03,585:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:03,585:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:03,585:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,585:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,585:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:03,585:DEBUG:first assign: result
2020-06-11 12:07:03,585:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:07:03,585:DEBUG:on stmt: jump 110
2020-06-11 12:07:03,585:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:03,585:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,585:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:03,585:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:03,585:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:03,585:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:03,585:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,585:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:03,585:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,585:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:03,585:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:03,585:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:03,585:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:03,585:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:03,585:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:03,585:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,585:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:03,585:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,585:DEBUG:on stmt: jump 128
2020-06-11 12:07:03,586:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:03,586:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,586:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:03,586:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,586:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:03,586:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:03,586:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:03,586:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:03,586:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:03,586:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:03,586:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:07:03,586:DEBUG:on stmt: jump 305
2020-06-11 12:07:03,586:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:03,586:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,586:DEBUG:on stmt: jump 304
2020-06-11 12:07:03,586:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:03,586:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,586:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:03,586:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:03,586:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:03,586:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:03,586:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:03,586:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:03,586:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e530310>
2020-06-11 12:07:03,586:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,587:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7fc44e611810>],
             128: [<numba.core.ir.Assign object at 0x7fc44e676fd0>]})
2020-06-11 12:07:03,587:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:03,587:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,587:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:03,587:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:03,587:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:03,587:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:03,587:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,587:DEBUG:on stmt: jump 36
2020-06-11 12:07:03,587:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:03,587:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,587:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:03,587:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:03,587:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:03,587:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,587:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:03,587:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:03,587:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:03,588:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:03,588:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,588:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:03,588:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,588:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:03,588:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:03,588:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:03,588:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:03,588:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:03,588:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,588:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:03,588:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:03,588:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:03,588:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:03,588:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:03,588:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:03,588:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:03,588:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:03,589:DEBUG:on stmt: jump 110
2020-06-11 12:07:03,589:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:03,589:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,589:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:03,589:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:03,589:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:03,589:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:03,589:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,589:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:03,589:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,589:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:03,589:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:03,589:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:03,589:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:03,589:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:03,589:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:03,589:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,589:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:03,589:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:03,589:DEBUG:on stmt: jump 128
2020-06-11 12:07:03,589:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:03,589:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,589:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:03,589:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,589:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:03,590:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:03,590:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:03,590:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:03,590:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:03,590:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:03,590:DEBUG:find_def_from_top label 128
2020-06-11 12:07:03,590:DEBUG:idom 122 from label 128
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 122
2020-06-11 12:07:03,590:DEBUG:find_def_from_top label 122
2020-06-11 12:07:03,590:DEBUG:idom 120 from label 122
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:03,590:DEBUG:find_def_from_top label 120
2020-06-11 12:07:03,590:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 305
2020-06-11 12:07:03,590:DEBUG:find_def_from_top label 305
2020-06-11 12:07:03,590:DEBUG:idom 128 from label 305
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 128
2020-06-11 12:07:03,590:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 110
2020-06-11 12:07:03,590:DEBUG:find_def_from_top label 110
2020-06-11 12:07:03,590:DEBUG:idom 52 from label 110
2020-06-11 12:07:03,590:DEBUG:find_def_from_bottom label 52
2020-06-11 12:07:03,590:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:07:03,590:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:03,590:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:07:03,590:DEBUG:on stmt: jump 305
2020-06-11 12:07:03,591:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:03,591:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,591:DEBUG:on stmt: jump 304
2020-06-11 12:07:03,591:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:03,591:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,591:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:03,591:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:03,591:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:03,591:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:03,591:DEBUG:find_def_from_top label 304
2020-06-11 12:07:03,591:DEBUG:idom 302 from label 304
2020-06-11 12:07:03,591:DEBUG:find_def_from_bottom label 302
2020-06-11 12:07:03,591:DEBUG:find_def_from_top label 302
2020-06-11 12:07:03,591:DEBUG:idom 120 from label 302
2020-06-11 12:07:03,591:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:03,591:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:03,591:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:03,591:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:03,591:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:03,591:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4543ccc10>
2020-06-11 12:07:03,591:DEBUG:on stmt: jump 120
2020-06-11 12:07:03,591:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,592:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:03,592:DEBUG:================================================================================
2020-06-11 12:07:03,598:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=178)
           2	LOAD_FAST(arg=0, lineno=178)
           4	RETURN_VALUE(arg=None, lineno=178)
2020-06-11 12:07:03,598:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,598:DEBUG:stack: []
2020-06-11 12:07:03,598:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=178)
2020-06-11 12:07:03,598:DEBUG:stack []
2020-06-11 12:07:03,599:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=178)
2020-06-11 12:07:03,599:DEBUG:stack []
2020-06-11 12:07:03,599:DEBUG:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=178)
2020-06-11 12:07:03,599:DEBUG:stack ['$arr2.0']
2020-06-11 12:07:03,599:DEBUG:end state. edges=[]
2020-06-11 12:07:03,599:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,599:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,599:DEBUG:defmap: {}
2020-06-11 12:07:03,599:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,599:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,599:DEBUG:keep phismap: {}
2020-06-11 12:07:03,599:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,599:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,599:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'retval': '$arr2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,599:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:03,601:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,601:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:03,601:DEBUG:================================================================================
2020-06-11 12:07:03,601:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,601:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e6bac10>
2020-06-11 12:07:03,601:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:03,601:DEBUG:on stmt: v = arg(1, name=v)
2020-06-11 12:07:03,601:DEBUG:on stmt: $4return_value.1 = cast(value=arr)
2020-06-11 12:07:03,601:DEBUG:on stmt: return $4return_value.1
2020-06-11 12:07:03,601:DEBUG:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fc44e6c3c10>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e6c3d10>],
             'v': [<numba.core.ir.Assign object at 0x7fc44e6c3bd0>]})
2020-06-11 12:07:03,601:DEBUG:SSA violators set()
2020-06-11 12:07:03,601:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,601:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    v = arg(1, name=v)                       ['v']
    $4return_value.1 = cast(value=arr)       ['$4return_value.1', 'arr']
    return $4return_value.1                  ['$4return_value.1']

2020-06-11 12:07:03,601:DEBUG:================================================================================
2020-06-11 12:07:03,636:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=465)
           2	BUILD_LIST(arg=0, lineno=465)
           4	STORE_FAST(arg=1, lineno=465)
           6	LOAD_FAST(arg=1, lineno=466)
           8	LOAD_METHOD(arg=0, lineno=466)
          10	LOAD_FAST(arg=0, lineno=466)
          12	CALL_METHOD(arg=1, lineno=466)
          14	POP_TOP(arg=None, lineno=466)
          16	LOAD_FAST(arg=1, lineno=467)
          18	RETURN_VALUE(arg=None, lineno=467)
2020-06-11 12:07:03,636:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,636:DEBUG:stack: []
2020-06-11 12:07:03,636:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=465)
2020-06-11 12:07:03,636:DEBUG:stack []
2020-06-11 12:07:03,636:DEBUG:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=465)
2020-06-11 12:07:03,636:DEBUG:stack []
2020-06-11 12:07:03,637:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=465)
2020-06-11 12:07:03,637:DEBUG:stack ['$2build_list.0']
2020-06-11 12:07:03,637:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=466)
2020-06-11 12:07:03,637:DEBUG:stack []
2020-06-11 12:07:03,637:DEBUG:dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=466)
2020-06-11 12:07:03,637:DEBUG:stack ['$res6.1']
2020-06-11 12:07:03,637:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=466)
2020-06-11 12:07:03,637:DEBUG:stack ['$8load_method.2']
2020-06-11 12:07:03,637:DEBUG:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=466)
2020-06-11 12:07:03,637:DEBUG:stack ['$8load_method.2', '$iterable10.3']
2020-06-11 12:07:03,637:DEBUG:dispatch pc=14, inst=POP_TOP(arg=None, lineno=466)
2020-06-11 12:07:03,637:DEBUG:stack ['$12call_method.4']
2020-06-11 12:07:03,637:DEBUG:dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=467)
2020-06-11 12:07:03,637:DEBUG:stack []
2020-06-11 12:07:03,637:DEBUG:dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=467)
2020-06-11 12:07:03,637:DEBUG:stack ['$res16.5']
2020-06-11 12:07:03,637:DEBUG:end state. edges=[]
2020-06-11 12:07:03,637:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,637:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,637:DEBUG:defmap: {}
2020-06-11 12:07:03,637:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,637:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,637:DEBUG:keep phismap: {}
2020-06-11 12:07:03,638:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,638:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,638:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'value': '$2build_list.0'}), (6, {'res': '$res6.1'}), (8, {'item': '$res6.1', 'res': '$8load_method.2'}), (10, {'res': '$iterable10.3'}), (12, {'func': '$8load_method.2', 'args': ['$iterable10.3'], 'res': '$12call_method.4'}), (16, {'res': '$res16.5'}), (18, {'retval': '$res16.5', 'castval': '$18return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,638:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:07:03,640:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,640:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:07:03,640:DEBUG:================================================================================
2020-06-11 12:07:03,640:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,640:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e59db90>
2020-06-11 12:07:03,640:DEBUG:on stmt: iterable = arg(0, name=iterable)
2020-06-11 12:07:03,640:DEBUG:on stmt: $2build_list.0 = build_list(items=[])
2020-06-11 12:07:03,640:DEBUG:on stmt: res = $2build_list.0
2020-06-11 12:07:03,640:DEBUG:on stmt: $8load_method.2 = getattr(value=res, attr=extend)
2020-06-11 12:07:03,640:DEBUG:on stmt: $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None)
2020-06-11 12:07:03,641:DEBUG:on stmt: $18return_value.6 = cast(value=res)
2020-06-11 12:07:03,641:DEBUG:on stmt: return $18return_value.6
2020-06-11 12:07:03,641:DEBUG:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7fc4545d3110>],
             '$18return_value.6': [<numba.core.ir.Assign object at 0x7fc4545d3c90>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7fc454087690>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7fc454087b10>],
             'iterable': [<numba.core.ir.Assign object at 0x7fc4540876d0>],
             'res': [<numba.core.ir.Assign object at 0x7fc454087550>]})
2020-06-11 12:07:03,641:DEBUG:SSA violators set()
2020-06-11 12:07:03,641:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,641:DEBUG:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    res = $2build_list.0                     ['$2build_list.0', 'res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:465)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

2020-06-11 12:07:03,641:DEBUG:================================================================================
2020-06-11 12:07:03,649:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=901)
           2	LOAD_FAST(arg=0, lineno=901)
           4	LOAD_ATTR(arg=0, lineno=901)
           6	STORE_FAST(arg=2, lineno=901)
           8	SETUP_LOOP(arg=20, lineno=902)
          10	LOAD_FAST(arg=1, lineno=902)
          12	GET_ITER(arg=None, lineno=902)
>         14	FOR_ITER(arg=12, lineno=902)
          16	STORE_FAST(arg=3, lineno=902)
          18	LOAD_FAST(arg=2, lineno=903)
          20	LOAD_FAST(arg=3, lineno=903)
          22	CALL_FUNCTION(arg=1, lineno=903)
          24	POP_TOP(arg=None, lineno=903)
          26	JUMP_ABSOLUTE(arg=14, lineno=903)
>         28	POP_BLOCK(arg=None, lineno=903)
>         30	LOAD_CONST(arg=0, lineno=903)
          32	RETURN_VALUE(arg=None, lineno=903)
2020-06-11 12:07:03,649:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,649:DEBUG:stack: []
2020-06-11 12:07:03,649:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=901)
2020-06-11 12:07:03,649:DEBUG:stack []
2020-06-11 12:07:03,650:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=901)
2020-06-11 12:07:03,650:DEBUG:stack []
2020-06-11 12:07:03,650:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=901)
2020-06-11 12:07:03,650:DEBUG:stack ['$lst2.0']
2020-06-11 12:07:03,650:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=901)
2020-06-11 12:07:03,650:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:03,650:DEBUG:end state. edges=[Edge(pc=8, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,650:DEBUG:pending: deque([State(pc_initial=8 nstack_initial=0)])
2020-06-11 12:07:03,650:DEBUG:stack: []
2020-06-11 12:07:03,650:DEBUG:dispatch pc=8, inst=SETUP_LOOP(arg=20, lineno=902)
2020-06-11 12:07:03,650:DEBUG:stack []
2020-06-11 12:07:03,650:DEBUG:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=902)
2020-06-11 12:07:03,650:DEBUG:stack []
2020-06-11 12:07:03,650:DEBUG:dispatch pc=12, inst=GET_ITER(arg=None, lineno=902)
2020-06-11 12:07:03,650:DEBUG:stack ['$iterable10.0']
2020-06-11 12:07:03,650:DEBUG:end state. edges=[Edge(pc=14, stack=('$12get_iter.1',), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,650:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:03,650:DEBUG:stack: ['$phi14.0']
2020-06-11 12:07:03,650:DEBUG:dispatch pc=14, inst=FOR_ITER(arg=12, lineno=902)
2020-06-11 12:07:03,650:DEBUG:stack ['$phi14.0']
2020-06-11 12:07:03,650:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,650:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
2020-06-11 12:07:03,651:DEBUG:stack: []
2020-06-11 12:07:03,651:DEBUG:dispatch pc=28, inst=POP_BLOCK(arg=None, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack []
2020-06-11 12:07:03,651:DEBUG:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,651:DEBUG:pending: deque([State(pc_initial=16 nstack_initial=2), State(pc_initial=30 nstack_initial=0)])
2020-06-11 12:07:03,651:DEBUG:stack: ['$phi16.0', '$phi16.1']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=902)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0', '$phi16.1']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0', '$meth18.2']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0', '$meth18.2', '$v20.3']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=24, inst=POP_TOP(arg=None, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0', '$22call_function.4']
2020-06-11 12:07:03,651:DEBUG:dispatch pc=26, inst=JUMP_ABSOLUTE(arg=14, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$phi16.0']
2020-06-11 12:07:03,651:DEBUG:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,651:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:03,651:DEBUG:stack: []
2020-06-11 12:07:03,651:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=0, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack []
2020-06-11 12:07:03,651:DEBUG:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=903)
2020-06-11 12:07:03,651:DEBUG:stack ['$const30.0']
2020-06-11 12:07:03,652:DEBUG:end state. edges=[]
2020-06-11 12:07:03,652:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=1)])
2020-06-11 12:07:03,652:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,652:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=8 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set()})
2020-06-11 12:07:03,652:DEBUG:defmap: {'$phi14.0': State(pc_initial=8 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
2020-06-11 12:07:03,652:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:07:03,652:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:07:03,653:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:07:03,653:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.1',
                           State(pc_initial=8 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
2020-06-11 12:07:03,653:DEBUG:keep phismap: {'$phi14.0': {('$12get_iter.1', State(pc_initial=8 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
2020-06-11 12:07:03,653:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=8 nstack_initial=0): {'$phi14.0': '$12get_iter.1'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
2020-06-11 12:07:03,653:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'item': '$lst2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={8: ()})
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=8 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$iterable10.0'}), (12, {'value': '$iterable10.0', 'res': '$12get_iter.1'})), outgoing_phis={'$phi14.0': '$12get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.1',)})
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: (), 16: ('$phi14.0', '$14for_iter.2')})
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$meth18.2'}), (20, {'res': '$v20.3'}), (22, {'func': '$meth18.2', 'args': ['$v20.3'], 'res': '$22call_function.4'}), (26, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 30, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={30: ()})
2020-06-11 12:07:03,653:DEBUG:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$const30.0'}), (32, {'retval': '$const30.0', 'castval': '$32return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,654:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:07:03,658:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,658:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:07:03,658:DEBUG:================================================================================
2020-06-11 12:07:03,658:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,658:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,658:DEBUG:on stmt: lst = arg(0, name=lst)
2020-06-11 12:07:03,658:DEBUG:on stmt: iterable = arg(1, name=iterable)
2020-06-11 12:07:03,658:DEBUG:on stmt: $4load_attr.1 = getattr(value=lst, attr=append)
2020-06-11 12:07:03,659:DEBUG:on stmt: meth = $4load_attr.1
2020-06-11 12:07:03,659:DEBUG:on stmt: jump 8
2020-06-11 12:07:03,659:DEBUG:==== SSA block analysis pass on 8
2020-06-11 12:07:03,659:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,659:DEBUG:on stmt: $12get_iter.1 = getiter(value=iterable)
2020-06-11 12:07:03,659:DEBUG:on stmt: $phi14.0 = $12get_iter.1
2020-06-11 12:07:03,659:DEBUG:on stmt: jump 14
2020-06-11 12:07:03,659:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:07:03,659:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,659:DEBUG:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
2020-06-11 12:07:03,659:DEBUG:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
2020-06-11 12:07:03,659:DEBUG:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
2020-06-11 12:07:03,659:DEBUG:on stmt: $phi16.1 = $14for_iter.2
2020-06-11 12:07:03,659:DEBUG:on stmt: branch $14for_iter.3, 16, 28
2020-06-11 12:07:03,659:DEBUG:==== SSA block analysis pass on 16
2020-06-11 12:07:03,659:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,659:DEBUG:on stmt: v = $phi16.1
2020-06-11 12:07:03,659:DEBUG:on stmt: $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None)
2020-06-11 12:07:03,659:DEBUG:on stmt: jump 14
2020-06-11 12:07:03,659:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:07:03,659:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,659:DEBUG:on stmt: jump 30
2020-06-11 12:07:03,659:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:07:03,659:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4541ef1d0>
2020-06-11 12:07:03,659:DEBUG:on stmt: $const30.0 = const(NoneType, None)
2020-06-11 12:07:03,659:DEBUG:on stmt: $32return_value.1 = cast(value=$const30.0)
2020-06-11 12:07:03,659:DEBUG:on stmt: return $32return_value.1
2020-06-11 12:07:03,660:DEBUG:defs defaultdict(<class 'list'>,
            {'$12get_iter.1': [<numba.core.ir.Assign object at 0x7fc4544ced90>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x7fc4544ced50>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x7fc4544ced10>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x7fc4544cebd0>],
             '$22call_function.4': [<numba.core.ir.Assign object at 0x7fc45467aa50>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x7fc454dd21d0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc4544ce450>],
             '$const30.0': [<numba.core.ir.Assign object at 0x7fc454652dd0>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x7fc4544cea90>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x7fc4544cee50>],
             'iterable': [<numba.core.ir.Assign object at 0x7fc4544f5150>],
             'lst': [<numba.core.ir.Assign object at 0x7fc4544f5710>],
             'meth': [<numba.core.ir.Assign object at 0x7fc4544ce710>],
             'v': [<numba.core.ir.Assign object at 0x7fc4544cec90>]})
2020-06-11 12:07:03,660:DEBUG:SSA violators set()
2020-06-11 12:07:03,660:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,660:DEBUG:label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    $4load_attr.1 = getattr(value=lst, attr=append) ['$4load_attr.1', 'lst']
    meth = $4load_attr.1                     ['$4load_attr.1', 'meth']
    jump 8                                   []
label 8:
    $12get_iter.1 = getiter(value=iterable)  ['$12get_iter.1', 'iterable']
    $phi14.0 = $12get_iter.1                 ['$12get_iter.1', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    v = $phi16.1                             ['$phi16.1', 'v']
    $22call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:902)], kws=(), vararg=None) ['$22call_function.4', 'meth', 'v']
    jump 14                                  []
label 28:
    jump 30                                  []
label 30:
    $const30.0 = const(NoneType, None)       ['$const30.0']
    $32return_value.1 = cast(value=$const30.0) ['$32return_value.1', '$const30.0']
    return $32return_value.1                 ['$32return_value.1']

2020-06-11 12:07:03,660:DEBUG:================================================================================
2020-06-11 12:07:03,736:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=69)
           2	LOAD_FAST(arg=0, lineno=69)
           4	LOAD_FAST(arg=1, lineno=69)
           6	BINARY_SUBSCR(arg=None, lineno=69)
           8	RETURN_VALUE(arg=None, lineno=69)
2020-06-11 12:07:03,736:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,736:DEBUG:stack: []
2020-06-11 12:07:03,736:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=69)
2020-06-11 12:07:03,736:DEBUG:stack []
2020-06-11 12:07:03,736:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=69)
2020-06-11 12:07:03,736:DEBUG:stack []
2020-06-11 12:07:03,736:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=69)
2020-06-11 12:07:03,736:DEBUG:stack ['$a2.0']
2020-06-11 12:07:03,736:DEBUG:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=69)
2020-06-11 12:07:03,736:DEBUG:stack ['$a2.0', '$i4.1']
2020-06-11 12:07:03,736:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=69)
2020-06-11 12:07:03,736:DEBUG:stack ['$6binary_subscr.2']
2020-06-11 12:07:03,736:DEBUG:end state. edges=[]
2020-06-11 12:07:03,736:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,736:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,737:DEBUG:defmap: {}
2020-06-11 12:07:03,737:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,737:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,737:DEBUG:keep phismap: {}
2020-06-11 12:07:03,737:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,737:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,737:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$i4.1'}), (6, {'index': '$i4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,737:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,738:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,739:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,739:DEBUG:================================================================================
2020-06-11 12:07:03,739:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,739:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e4d9d10>
2020-06-11 12:07:03,739:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:03,739:DEBUG:on stmt: i = arg(1, name=i)
2020-06-11 12:07:03,739:DEBUG:on stmt: $6binary_subscr.2 = getitem(value=a, index=i)
2020-06-11 12:07:03,739:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
2020-06-11 12:07:03,739:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:03,739:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fc45457fe10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e333150>],
             'a': [<numba.core.ir.Assign object at 0x7fc45457fc90>],
             'i': [<numba.core.ir.Assign object at 0x7fc45457f290>]})
2020-06-11 12:07:03,739:DEBUG:SSA violators set()
2020-06-11 12:07:03,739:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,739:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6binary_subscr.2 = getitem(value=a, index=i) ['$6binary_subscr.2', 'a', 'i']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:03,739:DEBUG:================================================================================
2020-06-11 12:07:03,757:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3551)
           2	LOAD_GLOBAL(arg=0, lineno=3551)
           4	LOAD_METHOD(arg=1, lineno=3551)
           6	LOAD_FAST(arg=0, lineno=3551)
           8	LOAD_FAST(arg=2, lineno=3551)
          10	CALL_METHOD(arg=2, lineno=3551)
          12	STORE_FAST(arg=3, lineno=3551)
          14	SETUP_LOOP(arg=28, lineno=3552)
          16	LOAD_GLOBAL(arg=0, lineno=3552)
          18	LOAD_METHOD(arg=2, lineno=3552)
          20	LOAD_FAST(arg=3, lineno=3552)
          22	LOAD_ATTR(arg=3, lineno=3552)
          24	CALL_METHOD(arg=1, lineno=3552)
          26	GET_ITER(arg=None, lineno=3552)
>         28	FOR_ITER(arg=12, lineno=3552)
          30	STORE_FAST(arg=4, lineno=3552)
          32	LOAD_FAST(arg=1, lineno=3553)
          34	LOAD_FAST(arg=3, lineno=3553)
          36	LOAD_FAST(arg=4, lineno=3553)
          38	STORE_SUBSCR(arg=None, lineno=3553)
          40	JUMP_ABSOLUTE(arg=28, lineno=3553)
>         42	POP_BLOCK(arg=None, lineno=3553)
>         44	LOAD_FAST(arg=3, lineno=3554)
          46	RETURN_VALUE(arg=None, lineno=3554)
2020-06-11 12:07:03,757:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,757:DEBUG:stack: []
2020-06-11 12:07:03,757:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack []
2020-06-11 12:07:03,757:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack []
2020-06-11 12:07:03,757:DEBUG:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:03,757:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack ['$4load_method.1']
2020-06-11 12:07:03,757:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack ['$4load_method.1', '$shape6.2']
2020-06-11 12:07:03,757:DEBUG:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
2020-06-11 12:07:03,757:DEBUG:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3551)
2020-06-11 12:07:03,757:DEBUG:stack ['$10call_method.4']
2020-06-11 12:07:03,757:DEBUG:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,757:DEBUG:pending: deque([State(pc_initial=14 nstack_initial=0)])
2020-06-11 12:07:03,757:DEBUG:stack: []
2020-06-11 12:07:03,758:DEBUG:dispatch pc=14, inst=SETUP_LOOP(arg=28, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack []
2020-06-11 12:07:03,758:DEBUG:dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack []
2020-06-11 12:07:03,758:DEBUG:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$16load_global.0']
2020-06-11 12:07:03,758:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$18load_method.1']
2020-06-11 12:07:03,758:DEBUG:dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$18load_method.1', '$arr20.2']
2020-06-11 12:07:03,758:DEBUG:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$18load_method.1', '$22load_attr.3']
2020-06-11 12:07:03,758:DEBUG:dispatch pc=26, inst=GET_ITER(arg=None, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$24call_method.4']
2020-06-11 12:07:03,758:DEBUG:end state. edges=[Edge(pc=28, stack=('$26get_iter.5',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,758:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:07:03,758:DEBUG:stack: ['$phi28.0']
2020-06-11 12:07:03,758:DEBUG:dispatch pc=28, inst=FOR_ITER(arg=12, lineno=3552)
2020-06-11 12:07:03,758:DEBUG:stack ['$phi28.0']
2020-06-11 12:07:03,758:DEBUG:end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=30, stack=('$phi28.0', '$28for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,758:DEBUG:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=2)])
2020-06-11 12:07:03,758:DEBUG:stack: []
2020-06-11 12:07:03,758:DEBUG:dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack []
2020-06-11 12:07:03,759:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:03,759:DEBUG:pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
2020-06-11 12:07:03,759:DEBUG:stack: ['$phi30.0', '$phi30.1']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3552)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0', '$phi30.1']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0', '$value32.2']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0', '$value32.2', '$arr34.3']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0', '$value32.2', '$arr34.3', '$idx36.4']
2020-06-11 12:07:03,759:DEBUG:dispatch pc=40, inst=JUMP_ABSOLUTE(arg=28, lineno=3553)
2020-06-11 12:07:03,759:DEBUG:stack ['$phi30.0']
2020-06-11 12:07:03,759:DEBUG:end state. edges=[Edge(pc=28, stack=('$phi30.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:03,759:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:07:03,759:DEBUG:stack: []
2020-06-11 12:07:03,759:DEBUG:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=3554)
2020-06-11 12:07:03,759:DEBUG:stack []
2020-06-11 12:07:03,759:DEBUG:dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=3554)
2020-06-11 12:07:03,759:DEBUG:stack ['$arr44.0']
2020-06-11 12:07:03,759:DEBUG:end state. edges=[]
2020-06-11 12:07:03,759:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=1)])
2020-06-11 12:07:03,760:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,760:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2020-06-11 12:07:03,760:DEBUG:defmap: {'$phi28.0': State(pc_initial=14 nstack_initial=0),
 '$phi30.1': State(pc_initial=28 nstack_initial=1)}
2020-06-11 12:07:03,760:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi30.0': {('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:07:03,760:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:07:03,760:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:07:03,760:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.5',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
2020-06-11 12:07:03,761:DEBUG:keep phismap: {'$phi28.0': {('$26get_iter.5', State(pc_initial=14 nstack_initial=0))},
 '$phi30.1': {('$28for_iter.2', State(pc_initial=28 nstack_initial=1))}}
2020-06-11 12:07:03,761:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=14 nstack_initial=0): {'$phi28.0': '$26get_iter.5'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$28for_iter.2'}})
2020-06-11 12:07:03,761:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$16load_global.0'}), (18, {'item': '$16load_global.0', 'res': '$18load_method.1'}), (20, {'res': '$arr20.2'}), (22, {'item': '$arr20.2', 'res': '$22load_attr.3'}), (24, {'func': '$18load_method.1', 'args': ['$22load_attr.3'], 'res': '$24call_method.4'}), (26, {'value': '$24call_method.4', 'res': '$26get_iter.5'})), outgoing_phis={'$phi28.0': '$26get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$26get_iter.5',)})
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'iterator': '$phi28.0', 'pair': '$28for_iter.1', 'indval': '$28for_iter.2', 'pred': '$28for_iter.3'}),), outgoing_phis={'$phi30.1': '$28for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 30: ('$phi28.0', '$28for_iter.2')})
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'value': '$phi30.1'}), (32, {'res': '$value32.2'}), (34, {'res': '$arr34.3'}), (36, {'res': '$idx36.4'}), (38, {'target': '$arr34.3', 'index': '$idx36.4', 'value': '$value32.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ('$phi30.0',)})
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
2020-06-11 12:07:03,761:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$arr44.0'}), (46, {'retval': '$arr44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,762:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:07:03,767:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,767:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:07:03,767:DEBUG:================================================================================
2020-06-11 12:07:03,767:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,767:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,767:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:07:03,767:DEBUG:on stmt: value = arg(1, name=value)
2020-06-11 12:07:03,767:DEBUG:on stmt: dtype = arg(2, name=dtype)
2020-06-11 12:07:03,768:DEBUG:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:03,768:DEBUG:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2020-06-11 12:07:03,768:DEBUG:on stmt: $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None)
2020-06-11 12:07:03,768:DEBUG:on stmt: arr = $10call_method.4
2020-06-11 12:07:03,768:DEBUG:on stmt: jump 14
2020-06-11 12:07:03,768:DEBUG:==== SSA block analysis pass on 14
2020-06-11 12:07:03,768:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,768:DEBUG:on stmt: $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:03,768:DEBUG:on stmt: $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex)
2020-06-11 12:07:03,768:DEBUG:on stmt: $22load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:03,768:DEBUG:on stmt: $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None)
2020-06-11 12:07:03,768:DEBUG:on stmt: $26get_iter.5 = getiter(value=$24call_method.4)
2020-06-11 12:07:03,768:DEBUG:on stmt: $phi28.0 = $26get_iter.5
2020-06-11 12:07:03,768:DEBUG:on stmt: jump 28
2020-06-11 12:07:03,768:DEBUG:==== SSA block analysis pass on 28
2020-06-11 12:07:03,768:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,768:DEBUG:on stmt: $28for_iter.1 = iternext(value=$phi28.0)
2020-06-11 12:07:03,768:DEBUG:on stmt: $28for_iter.2 = pair_first(value=$28for_iter.1)
2020-06-11 12:07:03,768:DEBUG:on stmt: $28for_iter.3 = pair_second(value=$28for_iter.1)
2020-06-11 12:07:03,768:DEBUG:on stmt: $phi30.1 = $28for_iter.2
2020-06-11 12:07:03,768:DEBUG:on stmt: branch $28for_iter.3, 30, 42
2020-06-11 12:07:03,768:DEBUG:==== SSA block analysis pass on 30
2020-06-11 12:07:03,768:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,768:DEBUG:on stmt: idx = $phi30.1
2020-06-11 12:07:03,768:DEBUG:on stmt: arr[idx] = value
2020-06-11 12:07:03,769:DEBUG:on stmt: jump 28
2020-06-11 12:07:03,769:DEBUG:==== SSA block analysis pass on 42
2020-06-11 12:07:03,769:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,769:DEBUG:on stmt: jump 44
2020-06-11 12:07:03,769:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:03,769:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e64d290>
2020-06-11 12:07:03,769:DEBUG:on stmt: $46return_value.1 = cast(value=arr)
2020-06-11 12:07:03,769:DEBUG:on stmt: return $46return_value.1
2020-06-11 12:07:03,769:DEBUG:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc454190850>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x7fc454190bd0>],
             '$18load_method.1': [<numba.core.ir.Assign object at 0x7fc454190810>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x7fc454190c50>],
             '$24call_method.4': [<numba.core.ir.Assign object at 0x7fc4541900d0>],
             '$26get_iter.5': [<numba.core.ir.Assign object at 0x7fc454190290>],
             '$28for_iter.1': [<numba.core.ir.Assign object at 0x7fc454190d10>],
             '$28for_iter.2': [<numba.core.ir.Assign object at 0x7fc454190a90>],
             '$28for_iter.3': [<numba.core.ir.Assign object at 0x7fc454190210>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e6b1f50>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7fc44e64d190>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc4545d3ad0>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x7fc454190150>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x7fc454190350>],
             'arr': [<numba.core.ir.Assign object at 0x7fc454190950>],
             'dtype': [<numba.core.ir.Assign object at 0x7fc454083590>],
             'idx': [<numba.core.ir.Assign object at 0x7fc454190390>],
             'shape': [<numba.core.ir.Assign object at 0x7fc454083050>],
             'value': [<numba.core.ir.Assign object at 0x7fc454083d90>]})
2020-06-11 12:07:03,769:DEBUG:SSA violators set()
2020-06-11 12:07:03,769:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,769:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3551), Var(dtype, arrayobj.py:3551)], kws=(), vararg=None) ['$10call_method.4', '$4load_method.1', 'dtype', 'shape']
    arr = $10call_method.4                   ['$10call_method.4', 'arr']
    jump 14                                  []
label 14:
    $16load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $18load_method.1 = getattr(value=$16load_global.0, attr=ndindex) ['$16load_global.0', '$18load_method.1']
    $22load_attr.3 = getattr(value=arr, attr=shape) ['$22load_attr.3', 'arr']
    $24call_method.4 = call $18load_method.1($22load_attr.3, func=$18load_method.1, args=[Var($22load_attr.3, arrayobj.py:3552)], kws=(), vararg=None) ['$18load_method.1', '$22load_attr.3', '$24call_method.4']
    $26get_iter.5 = getiter(value=$24call_method.4) ['$24call_method.4', '$26get_iter.5']
    $phi28.0 = $26get_iter.5                 ['$26get_iter.5', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 42             ['$28for_iter.3']
label 30:
    idx = $phi30.1                           ['$phi30.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 28                                  []
label 42:
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2020-06-11 12:07:03,770:DEBUG:================================================================================
2020-06-11 12:07:03,822:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=133)
           2	LOAD_GLOBAL(arg=0, lineno=133)
           4	LOAD_CONST(arg=0, lineno=133)
           6	LOAD_CONST(arg=0, lineno=133)
           8	CALL_FUNCTION(arg=2, lineno=133)
          10	RETURN_VALUE(arg=None, lineno=133)
2020-06-11 12:07:03,822:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:03,822:DEBUG:stack: []
2020-06-11 12:07:03,822:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack []
2020-06-11 12:07:03,822:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack []
2020-06-11 12:07:03,822:DEBUG:dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:03,822:DEBUG:dispatch pc=6, inst=LOAD_CONST(arg=0, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack ['$2load_global.0', '$const4.1']
2020-06-11 12:07:03,822:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack ['$2load_global.0', '$const4.1', '$const6.2']
2020-06-11 12:07:03,822:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=133)
2020-06-11 12:07:03,822:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:03,822:DEBUG:end state. edges=[]
2020-06-11 12:07:03,822:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:03,822:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:03,823:DEBUG:defmap: {}
2020-06-11 12:07:03,823:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,823:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:03,823:DEBUG:keep phismap: {}
2020-06-11 12:07:03,823:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:03,823:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:03,823:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$const6.2'}), (8, {'func': '$2load_global.0', 'args': ['$const4.1', '$const6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:03,823:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,825:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:03,825:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,825:DEBUG:================================================================================
2020-06-11 12:07:03,825:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:03,825:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4545236d0>
2020-06-11 12:07:03,825:DEBUG:on stmt: $2load_global.0 = global(slice: <class 'slice'>)
2020-06-11 12:07:03,825:DEBUG:on stmt: $const4.1 = const(NoneType, None)
2020-06-11 12:07:03,825:DEBUG:on stmt: $const6.2 = const(NoneType, None)
2020-06-11 12:07:03,825:DEBUG:on stmt: $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None)
2020-06-11 12:07:03,825:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:03,825:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:03,825:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44e4d7050>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e53b510>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4d7a10>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc44e4d7950>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fc44e4d7b10>]})
2020-06-11 12:07:03,825:DEBUG:SSA violators set()
2020-06-11 12:07:03,825:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:03,826:DEBUG:label 0:
    $2load_global.0 = global(slice: <class 'slice'>) ['$2load_global.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8call_function.3 = call $2load_global.0($const4.1, $const6.2, func=$2load_global.0, args=[Var($const4.1, arraymath.py:133), Var($const6.2, arraymath.py:133)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '$const4.1', '$const6.2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:03,826:DEBUG:================================================================================
2020-06-11 12:07:04,108:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
           8	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,108:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,108:DEBUG:stack: []
2020-06-11 12:07:04,108:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:07:04,108:DEBUG:stack []
2020-06-11 12:07:04,109:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:04,109:DEBUG:stack []
2020-06-11 12:07:04,109:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:07:04,109:DEBUG:stack ['$_28call_function_kw_6_12.0']
2020-06-11 12:07:04,109:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:07:04,109:DEBUG:stack ['$_28call_function_kw_6_12.0', '$n_14.1']
2020-06-11 12:07:04,109:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,109:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:07:04,109:DEBUG:end state. edges=[]
2020-06-11 12:07:04,109:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,109:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:04,109:DEBUG:defmap: {}
2020-06-11 12:07:04,109:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,109:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,109:DEBUG:keep phismap: {}
2020-06-11 12:07:04,109:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:04,109:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,109:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_28call_function_kw_6_12.0'}), (4, {'res': '$n_14.1'}), (6, {'lhs': '$_28call_function_kw_6_12.0', 'rhs': '$n_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,110:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,111:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,111:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,111:DEBUG:================================================================================
2020-06-11 12:07:04,111:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,111:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4542b2e90>
2020-06-11 12:07:04,111:DEBUG:on stmt: _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1)
2020-06-11 12:07:04,111:DEBUG:on stmt: n_1 = arg(1, name=n_1)
2020-06-11 12:07:04,111:DEBUG:on stmt: $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1
2020-06-11 12:07:04,111:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:07:04,111:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:04,112:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc4542b4090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc4542b0990>],
             '_28call_function_kw_6_1': [<numba.core.ir.Assign object at 0x7fc4542b4410>],
             'n_1': [<numba.core.ir.Assign object at 0x7fc4542b45d0>]})
2020-06-11 12:07:04,112:DEBUG:SSA violators set()
2020-06-11 12:07:04,112:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,112:DEBUG:label 0:
    _28call_function_kw_6_1 = arg(0, name=_28call_function_kw_6_1) ['_28call_function_kw_6_1']
    n_1 = arg(1, name=n_1)                   ['n_1']
    $6binary_true_divide.2 = _28call_function_kw_6_1 / n_1 ['$6binary_true_divide.2', '_28call_function_kw_6_1', 'n_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,112:DEBUG:================================================================================
2020-06-11 12:07:04,135:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:04,135:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,135:DEBUG:stack: []
2020-06-11 12:07:04,135:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack []
2020-06-11 12:07:04,135:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack []
2020-06-11 12:07:04,135:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:04,135:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:07:04,135:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:07:04,135:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:04,135:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:04,136:DEBUG:end state. edges=[]
2020-06-11 12:07:04,136:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,136:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:04,136:DEBUG:defmap: {}
2020-06-11 12:07:04,136:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,136:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,136:DEBUG:keep phismap: {}
2020-06-11 12:07:04,136:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:04,136:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,136:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,136:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e4fa3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,138:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,138:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e4fa3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,138:DEBUG:================================================================================
2020-06-11 12:07:04,138:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,138:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e585dd0>
2020-06-11 12:07:04,138:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,138:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,138:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e4fa3b0>)
2020-06-11 12:07:04,138:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:07:04,138:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:04,138:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:04,138:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44e32b4d0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc4544fb8d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4a3490>],
             'arr': [<numba.core.ir.Assign object at 0x7fc4544fbcd0>],
             'axis': [<numba.core.ir.Assign object at 0x7fc4544fb590>]})
2020-06-11 12:07:04,139:DEBUG:SSA violators set()
2020-06-11 12:07:04,139:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,139:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e4fa3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,139:DEBUG:================================================================================
2020-06-11 12:07:04,140:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:04,141:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,141:DEBUG:stack: []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:07:04,141:DEBUG:stack []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:07:04,141:DEBUG:stack []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:07:04,141:DEBUG:stack ['$arr2.0']
2020-06-11 12:07:04,141:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:07:04,141:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:04,141:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:07:04,141:DEBUG:stack []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:07:04,141:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:07:04,141:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,141:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,141:DEBUG:stack: []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:04,141:DEBUG:stack []
2020-06-11 12:07:04,141:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:07:04,141:DEBUG:stack ['$axis12.0']
2020-06-11 12:07:04,141:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:07:04,142:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:07:04,142:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:07:04,142:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:07:04,142:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,142:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:04,142:DEBUG:stack: []
2020-06-11 12:07:04,142:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:07:04,142:DEBUG:stack []
2020-06-11 12:07:04,142:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:07:04,142:DEBUG:stack ['$axis36.0']
2020-06-11 12:07:04,142:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:07:04,142:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:07:04,142:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:07:04,142:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:07:04,142:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,142:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:07:04,142:DEBUG:stack: []
2020-06-11 12:07:04,142:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:04,142:DEBUG:stack []
2020-06-11 12:07:04,142:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:07:04,142:DEBUG:stack ['$axis20.0']
2020-06-11 12:07:04,142:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:07:04,142:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:07:04,143:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:07:04,143:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:07:04,143:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,143:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,143:DEBUG:stack: []
2020-06-11 12:07:04,143:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:07:04,143:DEBUG:stack []
2020-06-11 12:07:04,143:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:07:04,143:DEBUG:stack ['$28load_global.0']
2020-06-11 12:07:04,143:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:07:04,143:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:07:04,143:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:07:04,143:DEBUG:stack ['$32call_function.2']
2020-06-11 12:07:04,143:DEBUG:end state. edges=[]
2020-06-11 12:07:04,143:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,143:DEBUG:stack: []
2020-06-11 12:07:04,143:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:07:04,143:DEBUG:stack []
2020-06-11 12:07:04,143:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:07:04,143:DEBUG:stack ['$44load_global.0']
2020-06-11 12:07:04,143:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:07:04,143:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:07:04,143:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:07:04,143:DEBUG:stack ['$48call_function.2']
2020-06-11 12:07:04,143:DEBUG:end state. edges=[]
2020-06-11 12:07:04,143:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,144:DEBUG:stack: []
2020-06-11 12:07:04,144:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:07:04,144:DEBUG:stack []
2020-06-11 12:07:04,144:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:07:04,144:DEBUG:stack ['$52load_global.0']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:07:04,144:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:07:04,144:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:07:04,144:DEBUG:stack ['$58call_function.3']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:07:04,144:DEBUG:stack []
2020-06-11 12:07:04,144:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:07:04,144:DEBUG:stack ['$ashape62.4']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:07:04,144:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:07:04,144:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:07:04,144:DEBUG:stack []
2020-06-11 12:07:04,144:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:07:04,144:DEBUG:stack ['$ashape70.7']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:07:04,144:DEBUG:stack ['$72load_method.8']
2020-06-11 12:07:04,144:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:07:04,145:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:07:04,145:DEBUG:stack ['$76call_method.10']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack []
2020-06-11 12:07:04,145:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack ['$80load_global.11']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:07:04,145:DEBUG:stack ['$88call_function.15']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:07:04,145:DEBUG:stack []
2020-06-11 12:07:04,145:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:07:04,145:DEBUG:stack ['$92load_global.16']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:07:04,145:DEBUG:stack ['$94load_method.17']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:04,145:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:07:04,145:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:07:04,145:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:04,146:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:07:04,146:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:07:04,146:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:07:04,146:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:07:04,146:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:07:04,146:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:07:04,146:DEBUG:stack ['$106call_method.23']
2020-06-11 12:07:04,146:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,146:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,146:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,146:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,146:DEBUG:stack: []
2020-06-11 12:07:04,146:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:07:04,146:DEBUG:stack []
2020-06-11 12:07:04,146:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:07:04,146:DEBUG:stack []
2020-06-11 12:07:04,146:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:07:04,146:DEBUG:stack ['$112load_global.0']
2020-06-11 12:07:04,146:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:07:04,146:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:07:04,147:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:07:04,147:DEBUG:stack ['$116call_function.2']
2020-06-11 12:07:04,147:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,147:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,147:DEBUG:stack: ['$phi120.0']
2020-06-11 12:07:04,147:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:07:04,147:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:04,147:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,147:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:07:04,147:DEBUG:stack: []
2020-06-11 12:07:04,147:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:07:04,147:DEBUG:stack []
2020-06-11 12:07:04,147:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,147:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:07:04,147:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:07:04,147:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:07:04,147:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:07:04,147:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:07:04,147:DEBUG:stack ['$phi122.0']
2020-06-11 12:07:04,147:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:07:04,147:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:07:04,147:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,148:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:04,148:DEBUG:stack: []
2020-06-11 12:07:04,148:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:07:04,148:DEBUG:stack []
2020-06-11 12:07:04,148:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:07:04,148:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:07:04,148:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:07:04,148:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:04,148:DEBUG:stack ['$310call_function.3']
2020-06-11 12:07:04,148:DEBUG:end state. edges=[]
2020-06-11 12:07:04,148:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:04,148:DEBUG:stack: ['$phi128.0']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:07:04,148:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:07:04,148:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:07:04,148:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:07:04,148:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:07:04,148:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:07:04,148:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,149:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,149:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,149:DEBUG:stack: ['$phi156.0']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi156.0']
2020-06-11 12:07:04,149:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:07:04,149:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:07:04,150:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,150:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:04,150:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:04,150:DEBUG:stack: ['$phi164.0']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:07:04,150:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:07:04,150:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,151:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,151:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,151:DEBUG:stack: ['$phi192.0']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi192.0']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:07:04,151:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:07:04,151:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:07:04,151:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,152:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:04,152:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:04,152:DEBUG:stack: ['$phi200.0']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:07:04,152:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:07:04,152:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,153:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,153:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,153:DEBUG:stack: ['$phi228.0']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi228.0']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:07:04,153:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:07:04,153:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,153:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:04,153:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:04,153:DEBUG:stack: ['$phi238.0']
2020-06-11 12:07:04,153:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:07:04,154:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:07:04,154:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,155:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,155:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,155:DEBUG:stack: ['$phi266.0']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi266.0']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:07:04,155:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,155:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,155:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,155:DEBUG:stack: ['$phi274.0']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:07:04,155:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:07:04,155:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:07:04,156:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:07:04,156:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,156:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,156:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,157:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,157:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,157:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:07:04,157:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:07:04,158:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:07:04,158:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,159:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,159:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,160:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:07:04,160:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:07:04,160:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:07:04,160:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:07:04,161:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,165:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:07:04,177:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,178:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:04,178:DEBUG:================================================================================
2020-06-11 12:07:04,178:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,178:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,178:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,178:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,178:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,178:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,178:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,178:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,178:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:04,178:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,178:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,178:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,178:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:04,178:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,178:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,178:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,178:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,178:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,178:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:04,178:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,179:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,179:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,179:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,179:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,179:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,179:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,179:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,179:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,179:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,179:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,179:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,179:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,179:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,179:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,179:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,179:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,179:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,179:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,179:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,179:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,179:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,179:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:07:04,179:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,179:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,179:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,180:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,180:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,180:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,180:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:07:04,180:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,180:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,180:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,180:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,180:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,180:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,180:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:07:04,180:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,180:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,180:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,180:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,180:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:07:04,180:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,180:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,180:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,180:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:04,180:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,180:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,180:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,180:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,180:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:04,180:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,181:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:07:04,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,181:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,181:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:07:04,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,181:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,181:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,181:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,181:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,181:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,181:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:07:04,181:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e346890>
2020-06-11 12:07:04,181:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,182:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7fc45414a1d0>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7fc45414a2d0>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7fc45414a410>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7fc45414a510>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7fc44e3c1890>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7fc45414a750>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7fc45414a850>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7fc45414aad0>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7fc45414ab90>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7fc45414ac50>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7fc45414af50>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7fc45414c190>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7fc45414c390>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7fc45414c550>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7fc45414c6d0>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7fc45414ca50>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7fc45414cb50>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e327790>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7fc44e327a90>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7fc44e327b90>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e3c1450>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fc44e3c1510>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7fc44e3c1250>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc45407e750>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7fc44e3c11d0>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7fc44e3c1a50>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7fc44e3c1e10>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7fc45406bb90>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7fc45406bb10>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7fc45416f690>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7fc45416f890>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7fc45416fb50>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7fc45416fc90>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7fc45407eb10>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7fc45416fe10>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7fc45416fed0>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7fc45414a0d0>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7fc44e327950>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7fc44e3c1290>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7fc45414a610>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7fc45414aa10>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e676650>],
             'ashape': [<numba.core.ir.Assign object at 0x7fc44e3c1e90>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7fc45416fd10>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e676490>],
             'axis_index': [<numba.core.ir.Assign object at 0x7fc45414ae50>],
             'axis_len': [<numba.core.ir.Assign object at 0x7fc45406bed0>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7fc45414c750>],
             'ndim': [<numba.core.ir.Assign object at 0x7fc45407ea50>],
             'result': [<numba.core.ir.Assign object at 0x7fc45414a590>,
                        <numba.core.ir.Assign object at 0x7fc45414c710>]})
2020-06-11 12:07:04,182:DEBUG:SSA violators {'result'}
2020-06-11 12:07:04,182:DEBUG:Fix SSA violator on var result
2020-06-11 12:07:04,182:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,182:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,182:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,182:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,182:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,182:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,182:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,182:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,182:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,182:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,182:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:04,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,182:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,182:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,182:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,182:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,182:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:04,182:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,183:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,183:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,183:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,183:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,183:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,183:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,183:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,183:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,183:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,183:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,183:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,183:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,183:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,183:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,183:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,183:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,183:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,183:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,183:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,183:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,183:DEBUG:first assign: result
2020-06-11 12:07:04,183:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:07:04,183:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,183:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:04,184:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,184:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,184:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,184:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,184:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,184:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,184:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:04,184:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,184:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,184:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,184:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,184:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,184:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,184:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:04,184:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,184:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,184:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,184:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,184:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:04,184:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,184:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,184:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,184:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:04,184:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,184:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,184:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,184:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,185:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:04,185:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:07:04,185:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,185:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:04,185:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,185:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,185:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:04,185:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,185:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,185:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,185:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,185:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,185:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,185:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:04,185:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e346750>
2020-06-11 12:07:04,185:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,185:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7fc4542621d0>],
             128: [<numba.core.ir.Assign object at 0x7fc454262710>]})
2020-06-11 12:07:04,185:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,185:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,185:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,186:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,186:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,186:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,186:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,186:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,186:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,186:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,186:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,186:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,186:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:04,186:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,186:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,186:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,186:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,186:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,186:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:04,186:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,186:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,186:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,186:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,186:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,186:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,186:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,187:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,187:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,187:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,187:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,187:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,187:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,187:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,187:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,187:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,187:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,187:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,187:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,187:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,187:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,187:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,187:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:04,187:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,187:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,187:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,187:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,187:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,187:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,187:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:04,187:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,188:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,188:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,188:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,188:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,188:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,188:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:04,188:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,188:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,188:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,188:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,188:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:04,188:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,188:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,188:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,188:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:04,188:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,188:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,188:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,188:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,188:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,188:DEBUG:find_def_from_top label 128
2020-06-11 12:07:04,188:DEBUG:idom 122 from label 128
2020-06-11 12:07:04,188:DEBUG:find_def_from_bottom label 122
2020-06-11 12:07:04,188:DEBUG:find_def_from_top label 122
2020-06-11 12:07:04,188:DEBUG:idom 120 from label 122
2020-06-11 12:07:04,188:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:04,188:DEBUG:find_def_from_top label 120
2020-06-11 12:07:04,189:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:07:04,189:DEBUG:find_def_from_bottom label 305
2020-06-11 12:07:04,189:DEBUG:find_def_from_top label 305
2020-06-11 12:07:04,189:DEBUG:idom 128 from label 305
2020-06-11 12:07:04,189:DEBUG:find_def_from_bottom label 128
2020-06-11 12:07:04,189:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:07:04,189:DEBUG:find_def_from_bottom label 110
2020-06-11 12:07:04,189:DEBUG:find_def_from_top label 110
2020-06-11 12:07:04,189:DEBUG:idom 52 from label 110
2020-06-11 12:07:04,189:DEBUG:find_def_from_bottom label 52
2020-06-11 12:07:04,189:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:07:04,189:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,189:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:07:04,189:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,189:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:04,189:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,189:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,189:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:04,189:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,189:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,189:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,190:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,190:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,190:DEBUG:find_def_from_top label 304
2020-06-11 12:07:04,190:DEBUG:idom 302 from label 304
2020-06-11 12:07:04,190:DEBUG:find_def_from_bottom label 302
2020-06-11 12:07:04,190:DEBUG:find_def_from_top label 302
2020-06-11 12:07:04,190:DEBUG:idom 120 from label 302
2020-06-11 12:07:04,190:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:04,190:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,190:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,190:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,190:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:04,190:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc454262e10>
2020-06-11 12:07:04,190:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,190:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,191:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:04,191:DEBUG:================================================================================
2020-06-11 12:07:04,556:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
           8	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,556:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,556:DEBUG:stack: []
2020-06-11 12:07:04,556:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:07:04,556:DEBUG:stack []
2020-06-11 12:07:04,556:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:04,556:DEBUG:stack []
2020-06-11 12:07:04,556:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:07:04,556:DEBUG:stack ['$_60call_function_kw_22_12.0']
2020-06-11 12:07:04,556:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
2020-06-11 12:07:04,556:DEBUG:stack ['$_60call_function_kw_22_12.0', '$n_24.1']
2020-06-11 12:07:04,556:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,556:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:07:04,556:DEBUG:end state. edges=[]
2020-06-11 12:07:04,557:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,557:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:04,557:DEBUG:defmap: {}
2020-06-11 12:07:04,557:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,557:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,557:DEBUG:keep phismap: {}
2020-06-11 12:07:04,557:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:04,557:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,557:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_60call_function_kw_22_12.0'}), (4, {'res': '$n_24.1'}), (6, {'lhs': '$_60call_function_kw_22_12.0', 'rhs': '$n_24.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,557:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,559:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,559:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,559:DEBUG:================================================================================
2020-06-11 12:07:04,559:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,559:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e29ce90>
2020-06-11 12:07:04,559:DEBUG:on stmt: _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1)
2020-06-11 12:07:04,559:DEBUG:on stmt: n_2 = arg(1, name=n_2)
2020-06-11 12:07:04,559:DEBUG:on stmt: $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2
2020-06-11 12:07:04,559:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:07:04,559:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:04,559:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc44e2a1d90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e2a1f10>],
             '_60call_function_kw_22_1': [<numba.core.ir.Assign object at 0x7fc44e2a1a90>],
             'n_2': [<numba.core.ir.Assign object at 0x7fc44e2a1b10>]})
2020-06-11 12:07:04,559:DEBUG:SSA violators set()
2020-06-11 12:07:04,559:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,560:DEBUG:label 0:
    _60call_function_kw_22_1 = arg(0, name=_60call_function_kw_22_1) ['_60call_function_kw_22_1']
    n_2 = arg(1, name=n_2)                   ['n_2']
    $6binary_true_divide.2 = _60call_function_kw_22_1 / n_2 ['$6binary_true_divide.2', '_60call_function_kw_22_1', 'n_2']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:04,560:DEBUG:================================================================================
2020-06-11 12:07:04,579:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=166)
           2	LOAD_DEREF(arg=0, lineno=166)
           4	STORE_FAST(arg=1, lineno=166)
           6	SETUP_LOOP(arg=30, lineno=167)
           8	LOAD_GLOBAL(arg=0, lineno=167)
          10	LOAD_METHOD(arg=1, lineno=167)
          12	LOAD_FAST(arg=0, lineno=167)
          14	CALL_METHOD(arg=1, lineno=167)
          16	GET_ITER(arg=None, lineno=167)
>         18	FOR_ITER(arg=16, lineno=167)
          20	STORE_FAST(arg=2, lineno=167)
          22	LOAD_FAST(arg=1, lineno=168)
          24	LOAD_FAST(arg=2, lineno=168)
          26	LOAD_METHOD(arg=2, lineno=168)
          28	CALL_METHOD(arg=0, lineno=168)
          30	INPLACE_ADD(arg=None, lineno=168)
          32	STORE_FAST(arg=1, lineno=168)
          34	JUMP_ABSOLUTE(arg=18, lineno=168)
>         36	POP_BLOCK(arg=None, lineno=168)
>         38	LOAD_FAST(arg=1, lineno=169)
          40	RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:07:04,580:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,580:DEBUG:stack: []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=166)
2020-06-11 12:07:04,580:DEBUG:stack []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=166)
2020-06-11 12:07:04,580:DEBUG:stack []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=166)
2020-06-11 12:07:04,580:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:04,580:DEBUG:end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,580:DEBUG:pending: deque([State(pc_initial=6 nstack_initial=0)])
2020-06-11 12:07:04,580:DEBUG:stack: []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack []
2020-06-11 12:07:04,580:DEBUG:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack ['$8load_global.0']
2020-06-11 12:07:04,580:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack ['$10load_method.1']
2020-06-11 12:07:04,580:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack ['$10load_method.1', '$arr12.2']
2020-06-11 12:07:04,580:DEBUG:dispatch pc=16, inst=GET_ITER(arg=None, lineno=167)
2020-06-11 12:07:04,580:DEBUG:stack ['$14call_method.3']
2020-06-11 12:07:04,581:DEBUG:end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,581:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:04,581:DEBUG:stack: ['$phi18.0']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=18, inst=FOR_ITER(arg=16, lineno=167)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi18.0']
2020-06-11 12:07:04,581:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,581:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2020-06-11 12:07:04,581:DEBUG:stack: []
2020-06-11 12:07:04,581:DEBUG:dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=168)
2020-06-11 12:07:04,581:DEBUG:stack []
2020-06-11 12:07:04,581:DEBUG:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,581:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
2020-06-11 12:07:04,581:DEBUG:stack: ['$phi20.0', '$phi20.1']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=167)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi20.0', '$phi20.1']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=168)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=168)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi20.0', '$c22.2']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=168)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi20.0', '$c22.2', '$v24.3']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=168)
2020-06-11 12:07:04,581:DEBUG:stack ['$phi20.0', '$c22.2', '$26load_method.4']
2020-06-11 12:07:04,581:DEBUG:dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=168)
2020-06-11 12:07:04,582:DEBUG:stack ['$phi20.0', '$c22.2', '$28call_method.5']
2020-06-11 12:07:04,582:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=1, lineno=168)
2020-06-11 12:07:04,582:DEBUG:stack ['$phi20.0', '$30inplace_add.6']
2020-06-11 12:07:04,582:DEBUG:dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=168)
2020-06-11 12:07:04,582:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:04,582:DEBUG:end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,582:DEBUG:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:04,582:DEBUG:stack: []
2020-06-11 12:07:04,582:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=169)
2020-06-11 12:07:04,582:DEBUG:stack []
2020-06-11 12:07:04,582:DEBUG:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:07:04,582:DEBUG:stack ['$c38.0']
2020-06-11 12:07:04,582:DEBUG:end state. edges=[]
2020-06-11 12:07:04,582:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:04,582:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,582:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
2020-06-11 12:07:04,583:DEBUG:defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2020-06-11 12:07:04,583:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:04,583:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:04,583:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:04,583:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:04,583:DEBUG:keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2020-06-11 12:07:04,583:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2020-06-11 12:07:04,584:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
2020-06-11 12:07:04,584:DEBUG:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'retval': '$c38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,585:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:04,589:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,589:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:04,589:DEBUG:================================================================================
2020-06-11 12:07:04,589:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,589:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,589:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,589:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:04,590:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:04,590:DEBUG:on stmt: jump 6
2020-06-11 12:07:04,590:DEBUG:==== SSA block analysis pass on 6
2020-06-11 12:07:04,590:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,590:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,590:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:04,590:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:04,590:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:04,590:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:04,590:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,590:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:07:04,590:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,590:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:04,590:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:04,590:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:04,590:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:04,590:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:04,590:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:07:04,590:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,590:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:04,590:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:04,590:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:04,590:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,590:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:07:04,590:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,590:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:04,591:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,591:DEBUG:on stmt: jump 38
2020-06-11 12:07:04,591:DEBUG:==== SSA block analysis pass on 38
2020-06-11 12:07:04,591:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,591:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:04,591:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:04,591:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x7fc44e3d2950>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x7fc45414ce50>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x7fc45414c950>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e340950>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e340190>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e340c10>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x7fc44e26fcd0>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x7fc44e26fed0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e28d1d0>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x7fc44e26fdd0>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7fc44e26f210>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x7fc44e3d2590>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7fc44e28da50>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fc44e340490>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e28d650>],
             'c': [<numba.core.ir.Assign object at 0x7fc44e28d510>,
                   <numba.core.ir.Assign object at 0x7fc44e340b10>],
             'v': [<numba.core.ir.Assign object at 0x7fc44e340a10>]})
2020-06-11 12:07:04,591:DEBUG:SSA violators {'c'}
2020-06-11 12:07:04,591:DEBUG:Fix SSA violator on var c
2020-06-11 12:07:04,591:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,591:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,591:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,591:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:04,591:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:04,591:DEBUG:first assign: c
2020-06-11 12:07:04,591:DEBUG:replaced with: c = $2load_deref.0
2020-06-11 12:07:04,591:DEBUG:on stmt: jump 6
2020-06-11 12:07:04,591:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:07:04,591:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,591:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,592:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:04,592:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:04,592:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:04,592:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:04,592:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,592:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:07:04,592:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,592:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:04,592:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:04,592:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:04,592:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:04,592:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:04,592:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:04,592:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,592:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:04,592:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:04,592:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:04,592:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,592:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:07:04,592:DEBUG:replaced with: c.1 = $30inplace_add.6
2020-06-11 12:07:04,592:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,592:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,592:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,593:DEBUG:on stmt: jump 38
2020-06-11 12:07:04,593:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:07:04,593:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e3c1b50>
2020-06-11 12:07:04,593:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:04,593:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:04,593:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc44e585dd0>],
             20: [<numba.core.ir.Assign object at 0x7fc44e327510>]})
2020-06-11 12:07:04,593:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,593:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,593:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,593:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:04,593:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:04,593:DEBUG:on stmt: jump 6
2020-06-11 12:07:04,593:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:07:04,593:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,593:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,593:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:04,593:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:04,593:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:04,594:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:04,594:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,594:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:07:04,594:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,594:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:04,594:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:04,594:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:04,594:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:04,594:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:04,594:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:04,594:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,594:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:04,594:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:04,594:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:04,594:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,594:DEBUG:find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,594:DEBUG:find_def_from_top label 20
2020-06-11 12:07:04,594:DEBUG:idom 18 from label 20
2020-06-11 12:07:04,594:DEBUG:find_def_from_bottom label 18
2020-06-11 12:07:04,594:DEBUG:find_def_from_top label 18
2020-06-11 12:07:04,594:DEBUG:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2020-06-11 12:07:04,594:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:04,594:DEBUG:incoming_def c.1 = $30inplace_add.6
2020-06-11 12:07:04,594:DEBUG:find_def_from_bottom label 6
2020-06-11 12:07:04,595:DEBUG:find_def_from_top label 6
2020-06-11 12:07:04,595:DEBUG:idom 0 from label 6
2020-06-11 12:07:04,595:DEBUG:find_def_from_bottom label 0
2020-06-11 12:07:04,595:DEBUG:incoming_def c = $2load_deref.0
2020-06-11 12:07:04,595:DEBUG:replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,595:DEBUG:on stmt: c.1 = $30inplace_add.6
2020-06-11 12:07:04,595:DEBUG:on stmt: jump 18
2020-06-11 12:07:04,595:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,595:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,595:DEBUG:on stmt: jump 38
2020-06-11 12:07:04,595:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:07:04,595:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc45407ed10>
2020-06-11 12:07:04,595:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:04,595:DEBUG:find_def var='c' stmt=$40return_value.1 = cast(value=c)
2020-06-11 12:07:04,595:DEBUG:find_def_from_top label 38
2020-06-11 12:07:04,595:DEBUG:idom 36 from label 38
2020-06-11 12:07:04,595:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:04,595:DEBUG:find_def_from_top label 36
2020-06-11 12:07:04,595:DEBUG:idom 18 from label 36
2020-06-11 12:07:04,595:DEBUG:find_def_from_bottom label 18
2020-06-11 12:07:04,595:DEBUG:replaced with: $40return_value.1 = cast(value=c.2)
2020-06-11 12:07:04,595:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:04,595:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,596:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    c.2 = phi(incoming_values=[Var(c.1, arraymath.py:168), Var(c, arraymath.py:166)], incoming_blocks=[20, 6]) ['c', 'c.1', 'c.2']
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c.2']
    c.1 = $30inplace_add.6                   ['$30inplace_add.6', 'c.1']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c.2)      ['$40return_value.1', 'c.2']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:04,596:DEBUG:================================================================================
2020-06-11 12:07:04,607:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=2716)
           2	LOAD_GLOBAL(arg=0, lineno=2716)
           4	LOAD_FAST(arg=0, lineno=2716)
           6	CALL_FUNCTION(arg=1, lineno=2716)
           8	STORE_FAST(arg=2, lineno=2716)
          10	SETUP_LOOP(arg=52, lineno=2717)
          12	LOAD_GLOBAL(arg=1, lineno=2717)
          14	LOAD_FAST(arg=2, lineno=2717)
          16	CALL_FUNCTION(arg=1, lineno=2717)
          18	GET_ITER(arg=None, lineno=2717)
>         20	FOR_ITER(arg=40, lineno=2717)
          22	STORE_FAST(arg=3, lineno=2717)
          24	LOAD_FAST(arg=0, lineno=2718)
          26	LOAD_FAST(arg=3, lineno=2718)
          28	BINARY_SUBSCR(arg=None, lineno=2718)
          30	LOAD_FAST(arg=1, lineno=2718)
          32	LOAD_GLOBAL(arg=0, lineno=2718)
          34	LOAD_FAST(arg=1, lineno=2718)
          36	CALL_FUNCTION(arg=1, lineno=2718)
          38	LOAD_FAST(arg=2, lineno=2718)
          40	BINARY_SUBTRACT(arg=None, lineno=2718)
          42	LOAD_FAST(arg=3, lineno=2718)
          44	BINARY_ADD(arg=None, lineno=2718)
          46	BINARY_SUBSCR(arg=None, lineno=2718)
          48	COMPARE_OP(arg=3, lineno=2718)
          50	POP_JUMP_IF_FALSE(arg=20, lineno=2718)
          52	LOAD_GLOBAL(arg=2, lineno=2719)
          54	LOAD_CONST(arg=1, lineno=2719)
          56	CALL_FUNCTION(arg=1, lineno=2719)
          58	RAISE_VARARGS(arg=1, lineno=2719)
          60	JUMP_ABSOLUTE(arg=20, lineno=2719)
>         62	POP_BLOCK(arg=None, lineno=2719)
>         64	LOAD_CONST(arg=0, lineno=2719)
          66	RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:07:04,607:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,607:DEBUG:stack: []
2020-06-11 12:07:04,607:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=2716)
2020-06-11 12:07:04,607:DEBUG:stack []
2020-06-11 12:07:04,607:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2716)
2020-06-11 12:07:04,607:DEBUG:stack []
2020-06-11 12:07:04,607:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2716)
2020-06-11 12:07:04,607:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:04,607:DEBUG:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2716)
2020-06-11 12:07:04,607:DEBUG:stack ['$2load_global.0', '$shape4.1']
2020-06-11 12:07:04,607:DEBUG:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2716)
2020-06-11 12:07:04,607:DEBUG:stack ['$6call_function.2']
2020-06-11 12:07:04,607:DEBUG:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,607:DEBUG:pending: deque([State(pc_initial=10 nstack_initial=0)])
2020-06-11 12:07:04,607:DEBUG:stack: []
2020-06-11 12:07:04,607:DEBUG:dispatch pc=10, inst=SETUP_LOOP(arg=52, lineno=2717)
2020-06-11 12:07:04,607:DEBUG:stack []
2020-06-11 12:07:04,608:DEBUG:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=2717)
2020-06-11 12:07:04,608:DEBUG:stack []
2020-06-11 12:07:04,608:DEBUG:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=2717)
2020-06-11 12:07:04,608:DEBUG:stack ['$12load_global.0']
2020-06-11 12:07:04,608:DEBUG:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=2717)
2020-06-11 12:07:04,608:DEBUG:stack ['$12load_global.0', '$n14.1']
2020-06-11 12:07:04,608:DEBUG:dispatch pc=18, inst=GET_ITER(arg=None, lineno=2717)
2020-06-11 12:07:04,608:DEBUG:stack ['$16call_function.2']
2020-06-11 12:07:04,608:DEBUG:end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,608:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:04,608:DEBUG:stack: ['$phi20.0']
2020-06-11 12:07:04,608:DEBUG:dispatch pc=20, inst=FOR_ITER(arg=40, lineno=2717)
2020-06-11 12:07:04,608:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:04,608:DEBUG:end state. edges=[Edge(pc=62, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,608:DEBUG:pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2020-06-11 12:07:04,608:DEBUG:stack: []
2020-06-11 12:07:04,608:DEBUG:dispatch pc=62, inst=POP_BLOCK(arg=None, lineno=2719)
2020-06-11 12:07:04,608:DEBUG:stack []
2020-06-11 12:07:04,608:DEBUG:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,608:DEBUG:pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=64 nstack_initial=0)])
2020-06-11 12:07:04,608:DEBUG:stack: ['$phi22.0', '$phi22.1']
2020-06-11 12:07:04,608:DEBUG:dispatch pc=22, inst=STORE_FAST(arg=3, lineno=2717)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$phi22.1']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$shape24.2']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$shape24.2', '$i26.3']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6', '$main_shape34.7']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8', '$n38.9']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10', '$i42.11']
2020-06-11 12:07:04,609:DEBUG:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=2718)
2020-06-11 12:07:04,609:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$44binary_add.12']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=48, inst=COMPARE_OP(arg=3, lineno=2718)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi22.0', '$28binary_subscr.4', '$46binary_subscr.13']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=20, lineno=2718)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi22.0', '$48compare_op.14']
2020-06-11 12:07:04,610:DEBUG:end state. edges=[Edge(pc=52, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,610:DEBUG:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:04,610:DEBUG:stack: []
2020-06-11 12:07:04,610:DEBUG:dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack []
2020-06-11 12:07:04,610:DEBUG:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack ['$const64.0']
2020-06-11 12:07:04,610:DEBUG:end state. edges=[]
2020-06-11 12:07:04,610:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:04,610:DEBUG:stack: ['$phi52.0']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi52.0']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi52.0', '$52load_global.1']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi52.0', '$52load_global.1', '$const54.2']
2020-06-11 12:07:04,610:DEBUG:dispatch pc=58, inst=RAISE_VARARGS(arg=1, lineno=2719)
2020-06-11 12:07:04,610:DEBUG:stack ['$phi52.0', '$56call_function.3']
2020-06-11 12:07:04,610:DEBUG:end state. edges=[]
2020-06-11 12:07:04,611:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=1)])
2020-06-11 12:07:04,611:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,611:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=52 nstack_initial=1): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2020-06-11 12:07:04,611:DEBUG:defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2020-06-11 12:07:04,611:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
2020-06-11 12:07:04,611:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:04,611:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:04,612:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
2020-06-11 12:07:04,612:DEBUG:keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2020-06-11 12:07:04,612:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2020-06-11 12:07:04,612:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$n14.1'}), (16, {'func': '$12load_global.0', 'args': ['$n14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$shape24.2'}), (26, {'res': '$i26.3'}), (28, {'index': '$i26.3', 'target': '$shape24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$main_shape30.5'}), (32, {'res': '$32load_global.6'}), (34, {'res': '$main_shape34.7'}), (36, {'func': '$32load_global.6', 'args': ['$main_shape34.7'], 'res': '$36call_function.8'}), (38, {'res': '$n38.9'}), (40, {'lhs': '$36call_function.8', 'rhs': '$n38.9', 'res': '$40binary_subtract.10'}), (42, {'res': '$i42.11'}), (44, {'lhs': '$40binary_subtract.10', 'rhs': '$i42.11', 'res': '$44binary_add.12'}), (46, {'index': '$44binary_add.12', 'target': '$main_shape30.5', 'res': '$46binary_subscr.13'}), (48, {'lhs': '$28binary_subscr.4', 'rhs': '$46binary_subscr.13', 'res': '$48compare_op.14'}), (50, {'pred': '$48compare_op.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: ('$phi22.0',), 20: ('$phi22.0',)})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.1'}), (54, {'res': '$const54.2'}), (56, {'func': '$52load_global.1', 'args': ['$const54.2'], 'res': '$56call_function.3'}), (58, {'exc': '$56call_function.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ()})
2020-06-11 12:07:04,612:DEBUG:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,613:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2716)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'shape']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = call $32load_global.6(main_shape, func=$32load_global.6, args=[Var(main_shape, arrayobj.py:2716)], kws=(), vararg=None) ['$32load_global.6', '$36call_function.8', 'main_shape']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise $56call_function.3                 ['$56call_function.3']
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:04,619:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,619:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 2)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 2)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:04,620:DEBUG:================================================================================
2020-06-11 12:07:04,620:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,620:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,620:DEBUG:on stmt: shape = arg(0, name=shape)
2020-06-11 12:07:04,620:DEBUG:on stmt: main_shape = arg(1, name=main_shape)
2020-06-11 12:07:04,620:DEBUG:on stmt: $2load_global.0 = global(len: <built-in function len>)
2020-06-11 12:07:04,620:DEBUG:on stmt: $6call_function.2 = const(int, 2)
2020-06-11 12:07:04,620:DEBUG:on stmt: n = $6call_function.2
2020-06-11 12:07:04,620:DEBUG:on stmt: jump 10
2020-06-11 12:07:04,620:DEBUG:==== SSA block analysis pass on 10
2020-06-11 12:07:04,620:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,620:DEBUG:on stmt: $12load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,620:DEBUG:on stmt: $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None)
2020-06-11 12:07:04,620:DEBUG:on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
2020-06-11 12:07:04,620:DEBUG:on stmt: $phi20.0 = $18get_iter.3
2020-06-11 12:07:04,620:DEBUG:on stmt: jump 20
2020-06-11 12:07:04,620:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:07:04,620:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,620:DEBUG:on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2020-06-11 12:07:04,620:DEBUG:on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2020-06-11 12:07:04,620:DEBUG:on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2020-06-11 12:07:04,620:DEBUG:on stmt: $phi22.1 = $20for_iter.2
2020-06-11 12:07:04,620:DEBUG:on stmt: branch $20for_iter.3, 22, 62
2020-06-11 12:07:04,620:DEBUG:==== SSA block analysis pass on 22
2020-06-11 12:07:04,620:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,621:DEBUG:on stmt: i = $phi22.1
2020-06-11 12:07:04,621:DEBUG:on stmt: $28binary_subscr.4 = getitem(value=shape, index=i)
2020-06-11 12:07:04,621:DEBUG:on stmt: $32load_global.6 = global(len: <built-in function len>)
2020-06-11 12:07:04,621:DEBUG:on stmt: $36call_function.8 = const(int, 2)
2020-06-11 12:07:04,621:DEBUG:on stmt: $40binary_subtract.10 = $36call_function.8 - n
2020-06-11 12:07:04,621:DEBUG:on stmt: $44binary_add.12 = $40binary_subtract.10 + i
2020-06-11 12:07:04,621:DEBUG:on stmt: $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12)
2020-06-11 12:07:04,621:DEBUG:on stmt: $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13
2020-06-11 12:07:04,621:DEBUG:on stmt: branch $48compare_op.14, 52, 20
2020-06-11 12:07:04,621:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:04,621:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,621:DEBUG:on stmt: $52load_global.1 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,621:DEBUG:on stmt: $const54.2 = const(str, nditer(): operands could not be broadcast together)
2020-06-11 12:07:04,621:DEBUG:on stmt: $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None)
2020-06-11 12:07:04,621:DEBUG:on stmt: raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2020-06-11 12:07:04,621:DEBUG:==== SSA block analysis pass on 62
2020-06-11 12:07:04,621:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,621:DEBUG:on stmt: jump 64
2020-06-11 12:07:04,621:DEBUG:==== SSA block analysis pass on 64
2020-06-11 12:07:04,621:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2164d0>
2020-06-11 12:07:04,621:DEBUG:on stmt: $const64.0 = const(NoneType, None)
2020-06-11 12:07:04,621:DEBUG:on stmt: $66return_value.1 = cast(value=$const64.0)
2020-06-11 12:07:04,621:DEBUG:on stmt: return $66return_value.1
2020-06-11 12:07:04,622:DEBUG:defs defaultdict(<class 'list'>,
            {'$12load_global.0': [<numba.core.ir.Assign object at 0x7fc44e21ca50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fc44e21cc50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fc44e21cd50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e21cfd0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e2710d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e271190>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x7fc44e271610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44e21c5d0>],
             '$32load_global.6': [<numba.core.ir.Assign object at 0x7fc44e271810>],
             '$36call_function.8': [<numba.core.ir.Assign object at 0x7fc44e271a10>],
             '$40binary_subtract.10': [<numba.core.ir.Assign object at 0x7fc44e271b50>],
             '$44binary_add.12': [<numba.core.ir.Assign object at 0x7fc44e271d50>],
             '$46binary_subscr.13': [<numba.core.ir.Assign object at 0x7fc44e271e50>],
             '$48compare_op.14': [<numba.core.ir.Assign object at 0x7fc44e271f90>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x7fc44e271c10>],
             '$56call_function.3': [<numba.core.ir.Assign object at 0x7fc44e274250>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7fc44e274610>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fc44e21c7d0>],
             '$const54.2': [<numba.core.ir.Assign object at 0x7fc44e274110>],
             '$const64.0': [<numba.core.ir.Assign object at 0x7fc44e2744d0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fc44e21cb10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fc44e21cf10>],
             'i': [<numba.core.ir.Assign object at 0x7fc44e271390>],
             'main_shape': [<numba.core.ir.Assign object at 0x7fc44e21c090>],
             'n': [<numba.core.ir.Assign object at 0x7fc44e21c8d0>],
             'shape': [<numba.core.ir.Assign object at 0x7fc44e21c290>]})
2020-06-11 12:07:04,622:DEBUG:SSA violators set()
2020-06-11 12:07:04,622:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,622:DEBUG:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = const(int, 2)        ['$6call_function.2']
    n = $6call_function.2                    ['$6call_function.2', 'n']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = const(int, 2)       ['$36call_function.8']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    branch $48compare_op.14, 52, 20          ['$48compare_op.14']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:2719)], kws=(), vararg=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise <class 'ValueError'>('nditer(): operands could not be broadcast together') []
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

2020-06-11 12:07:04,622:DEBUG:================================================================================
2020-06-11 12:07:04,749:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=244)
           2	LOAD_FAST(arg=0, lineno=244)
           4	LOAD_FAST(arg=1, lineno=244)
           6	BINARY_ADD(arg=None, lineno=244)
           8	LOAD_FAST(arg=2, lineno=244)
          10	BINARY_SUBTRACT(arg=None, lineno=244)
          12	RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,750:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,750:DEBUG:stack: []
2020-06-11 12:07:04,750:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack []
2020-06-11 12:07:04,750:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack []
2020-06-11 12:07:04,750:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack ['$_46load_attr_15_12.0']
2020-06-11 12:07:04,750:DEBUG:dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack ['$_46load_attr_15_12.0', '$_76call_method_30_14.1']
2020-06-11 12:07:04,750:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack ['$6binary_add.2']
2020-06-11 12:07:04,750:DEBUG:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack ['$6binary_add.2', '$_92binary_true_divide_38_18.3']
2020-06-11 12:07:04,750:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=244)
2020-06-11 12:07:04,750:DEBUG:stack ['$10binary_subtract.4']
2020-06-11 12:07:04,750:DEBUG:end state. edges=[]
2020-06-11 12:07:04,750:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,750:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:04,751:DEBUG:defmap: {}
2020-06-11 12:07:04,751:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,751:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,751:DEBUG:keep phismap: {}
2020-06-11 12:07:04,751:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:04,751:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,751:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_46load_attr_15_12.0'}), (4, {'res': '$_76call_method_30_14.1'}), (6, {'lhs': '$_46load_attr_15_12.0', 'rhs': '$_76call_method_30_14.1', 'res': '$6binary_add.2'}), (8, {'res': '$_92binary_true_divide_38_18.3'}), (10, {'lhs': '$6binary_add.2', 'rhs': '$_92binary_true_divide_38_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,751:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:04,753:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,753:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:04,753:DEBUG:================================================================================
2020-06-11 12:07:04,753:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,753:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc454568c50>
2020-06-11 12:07:04,753:DEBUG:on stmt: _46load_attr_15_1 = arg(0, name=_46load_attr_15_1)
2020-06-11 12:07:04,753:DEBUG:on stmt: _76call_method_30_1 = arg(1, name=_76call_method_30_1)
2020-06-11 12:07:04,753:DEBUG:on stmt: _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1)
2020-06-11 12:07:04,753:DEBUG:on stmt: $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1
2020-06-11 12:07:04,753:DEBUG:on stmt: $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1
2020-06-11 12:07:04,753:DEBUG:on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
2020-06-11 12:07:04,753:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:07:04,753:DEBUG:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fc44e4dd590>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc44e4d9690>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc44e4dd110>],
             '_46load_attr_15_1': [<numba.core.ir.Assign object at 0x7fc44e4dd550>],
             '_76call_method_30_1': [<numba.core.ir.Assign object at 0x7fc44e4dd1d0>],
             '_92binary_true_divide_38_1': [<numba.core.ir.Assign object at 0x7fc44e4dd2d0>]})
2020-06-11 12:07:04,753:DEBUG:SSA violators set()
2020-06-11 12:07:04,753:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,754:DEBUG:label 0:
    _46load_attr_15_1 = arg(0, name=_46load_attr_15_1) ['_46load_attr_15_1']
    _76call_method_30_1 = arg(1, name=_76call_method_30_1) ['_76call_method_30_1']
    _92binary_true_divide_38_1 = arg(2, name=_92binary_true_divide_38_1) ['_92binary_true_divide_38_1']
    $6binary_add.2 = _46load_attr_15_1 + _76call_method_30_1 ['$6binary_add.2', '_46load_attr_15_1', '_76call_method_30_1']
    $10binary_subtract.4 = $6binary_add.2 - _92binary_true_divide_38_1 ['$10binary_subtract.4', '$6binary_add.2', '_92binary_true_divide_38_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:04,754:DEBUG:================================================================================
2020-06-11 12:07:04,773:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:04,774:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,774:DEBUG:stack: []
2020-06-11 12:07:04,774:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack []
2020-06-11 12:07:04,774:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack []
2020-06-11 12:07:04,774:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:04,774:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:07:04,774:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:07:04,774:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:04,774:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:04,774:DEBUG:end state. edges=[]
2020-06-11 12:07:04,774:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,774:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:04,774:DEBUG:defmap: {}
2020-06-11 12:07:04,774:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,774:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:04,775:DEBUG:keep phismap: {}
2020-06-11 12:07:04,775:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:04,775:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,775:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,775:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e52d3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,777:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,777:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e52d3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,777:DEBUG:================================================================================
2020-06-11 12:07:04,777:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,777:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e4bc210>
2020-06-11 12:07:04,777:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,777:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,777:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e52d3b0>)
2020-06-11 12:07:04,777:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:07:04,777:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:04,777:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:04,777:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44e4d0850>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e4bcf90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4d01d0>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e4bcd10>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e4bce10>]})
2020-06-11 12:07:04,777:DEBUG:SSA violators set()
2020-06-11 12:07:04,777:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,777:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e52d3b0>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:04,777:DEBUG:================================================================================
2020-06-11 12:07:04,780:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:04,780:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:04,780:DEBUG:stack: []
2020-06-11 12:07:04,780:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:07:04,780:DEBUG:stack []
2020-06-11 12:07:04,780:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:07:04,780:DEBUG:stack []
2020-06-11 12:07:04,780:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:07:04,780:DEBUG:stack ['$arr2.0']
2020-06-11 12:07:04,780:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:07:04,780:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:04,780:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:07:04,781:DEBUG:stack []
2020-06-11 12:07:04,781:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:07:04,781:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:07:04,781:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,781:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,781:DEBUG:stack: []
2020-06-11 12:07:04,781:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:04,781:DEBUG:stack []
2020-06-11 12:07:04,781:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:07:04,781:DEBUG:stack ['$axis12.0']
2020-06-11 12:07:04,781:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:07:04,781:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:07:04,781:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:07:04,781:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:07:04,781:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,781:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:04,781:DEBUG:stack: []
2020-06-11 12:07:04,781:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:07:04,781:DEBUG:stack []
2020-06-11 12:07:04,781:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:07:04,781:DEBUG:stack ['$axis36.0']
2020-06-11 12:07:04,781:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:07:04,781:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:07:04,781:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:07:04,781:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:07:04,782:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,782:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:07:04,782:DEBUG:stack: []
2020-06-11 12:07:04,782:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:04,782:DEBUG:stack []
2020-06-11 12:07:04,782:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:07:04,782:DEBUG:stack ['$axis20.0']
2020-06-11 12:07:04,782:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:07:04,782:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:07:04,782:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:07:04,782:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:07:04,782:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,782:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,782:DEBUG:stack: []
2020-06-11 12:07:04,782:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:07:04,782:DEBUG:stack []
2020-06-11 12:07:04,782:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:07:04,782:DEBUG:stack ['$28load_global.0']
2020-06-11 12:07:04,782:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:07:04,782:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:07:04,782:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:07:04,782:DEBUG:stack ['$32call_function.2']
2020-06-11 12:07:04,782:DEBUG:end state. edges=[]
2020-06-11 12:07:04,783:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,783:DEBUG:stack: []
2020-06-11 12:07:04,783:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:07:04,783:DEBUG:stack []
2020-06-11 12:07:04,783:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:07:04,783:DEBUG:stack ['$44load_global.0']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:07:04,783:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:07:04,783:DEBUG:stack ['$48call_function.2']
2020-06-11 12:07:04,783:DEBUG:end state. edges=[]
2020-06-11 12:07:04,783:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:04,783:DEBUG:stack: []
2020-06-11 12:07:04,783:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:07:04,783:DEBUG:stack []
2020-06-11 12:07:04,783:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:07:04,783:DEBUG:stack ['$52load_global.0']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:07:04,783:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:07:04,783:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:07:04,783:DEBUG:stack ['$58call_function.3']
2020-06-11 12:07:04,783:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:07:04,783:DEBUG:stack []
2020-06-11 12:07:04,783:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:07:04,783:DEBUG:stack ['$ashape62.4']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:07:04,784:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:07:04,784:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:07:04,784:DEBUG:stack []
2020-06-11 12:07:04,784:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:07:04,784:DEBUG:stack ['$ashape70.7']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:07:04,784:DEBUG:stack ['$72load_method.8']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:07:04,784:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:07:04,784:DEBUG:stack ['$76call_method.10']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:07:04,784:DEBUG:stack []
2020-06-11 12:07:04,784:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:07:04,784:DEBUG:stack ['$80load_global.11']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:07:04,784:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:07:04,784:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:07:04,784:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:07:04,784:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:07:04,785:DEBUG:stack ['$88call_function.15']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack []
2020-06-11 12:07:04,785:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$92load_global.16']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:07:04,785:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:07:04,785:DEBUG:stack ['$106call_method.23']
2020-06-11 12:07:04,785:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,785:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,785:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,785:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:04,785:DEBUG:stack: []
2020-06-11 12:07:04,785:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:07:04,785:DEBUG:stack []
2020-06-11 12:07:04,786:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack []
2020-06-11 12:07:04,786:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack ['$112load_global.0']
2020-06-11 12:07:04,786:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:07:04,786:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack ['$116call_function.2']
2020-06-11 12:07:04,786:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,786:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,786:DEBUG:stack: ['$phi120.0']
2020-06-11 12:07:04,786:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:04,786:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,786:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:07:04,786:DEBUG:stack: []
2020-06-11 12:07:04,786:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:07:04,786:DEBUG:stack []
2020-06-11 12:07:04,786:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:04,786:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:07:04,786:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:07:04,786:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:07:04,786:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:07:04,787:DEBUG:stack ['$phi122.0']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:07:04,787:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:07:04,787:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,787:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:04,787:DEBUG:stack: []
2020-06-11 12:07:04,787:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:07:04,787:DEBUG:stack []
2020-06-11 12:07:04,787:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:07:04,787:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:07:04,787:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:07:04,787:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:04,787:DEBUG:stack ['$310call_function.3']
2020-06-11 12:07:04,787:DEBUG:end state. edges=[]
2020-06-11 12:07:04,787:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:04,787:DEBUG:stack: ['$phi128.0']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:07:04,787:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:07:04,787:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:07:04,787:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:07:04,787:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:07:04,788:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:07:04,788:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:04,788:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,788:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,789:DEBUG:stack: ['$phi156.0']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi156.0']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:07:04,789:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,789:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:04,789:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:04,789:DEBUG:stack: ['$phi164.0']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:07:04,789:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:07:04,789:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:04,790:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,790:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,790:DEBUG:stack: ['$phi192.0']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi192.0']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:07:04,790:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:07:04,790:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:07:04,791:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,791:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:04,791:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:04,791:DEBUG:stack: ['$phi200.0']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:07:04,791:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:07:04,791:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:04,792:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,792:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,792:DEBUG:stack: ['$phi228.0']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi228.0']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:07:04,792:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:07:04,792:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:07:04,792:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,793:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:04,793:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:04,793:DEBUG:stack: ['$phi238.0']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:07:04,793:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:07:04,793:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:04,794:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,794:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,794:DEBUG:stack: ['$phi266.0']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi266.0']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:07:04,794:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:07:04,794:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,794:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,794:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,794:DEBUG:stack: ['$phi274.0']
2020-06-11 12:07:04,794:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:07:04,795:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:07:04,795:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:07:04,796:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:07:04,796:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:04,796:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:04,796:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,796:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:04,796:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:04,796:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:07:04,797:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:07:04,797:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:07:04,797:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,798:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,798:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:04,799:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:07:04,799:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:07:04,799:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:07:04,799:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:07:04,800:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:04,803:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:07:04,815:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:04,816:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:04,816:DEBUG:================================================================================
2020-06-11 12:07:04,816:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:04,816:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,816:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,816:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,816:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,816:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,816:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,816:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,816:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:04,816:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,816:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,816:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,816:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:04,816:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,816:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,816:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,816:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,816:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,816:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:04,816:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,816:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,816:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,817:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,817:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,817:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,817:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,817:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,817:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,817:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,817:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,817:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,817:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,817:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,817:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,817:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,817:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,817:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:07:04,817:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,817:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,817:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,817:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,818:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,818:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,818:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:07:04,818:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,818:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,818:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,818:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,818:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,818:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,818:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:07:04,818:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,818:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,818:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,818:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,818:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:07:04,818:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,818:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,818:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,818:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:04,818:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,818:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,818:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,818:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,818:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:04,818:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,818:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:07:04,819:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,819:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,819:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:07:04,819:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,819:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,819:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,819:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,819:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,819:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,819:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:07:04,819:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc45403cf90>
2020-06-11 12:07:04,819:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,820:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7fc44e6b6090>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7fc454568850>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7fc4540d3850>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7fc44e63fad0>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7fc44e4aa650>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7fc44e4bb290>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7fc44e4bb150>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7fc44e4bba10>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7fc44e4bba50>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7fc44e4bb210>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7fc4541fab10>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7fc4541fac50>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7fc4541fab90>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7fc4541fae50>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7fc4541fa110>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7fc4541fa550>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7fc4541fa450>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7fc4543e7e50>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7fc4543e7a50>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7fc4543e7950>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e4c1a90>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fc44e4c11d0>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7fc44e4c1490>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc45422b3d0>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7fc44e4c1210>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7fc44e4c1450>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4c1c50>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7fc454064b10>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7fc454064c10>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7fc454064550>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7fc4540646d0>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7fc454064b90>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7fc454064ad0>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7fc4540872d0>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7fc4540647d0>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7fc454064450>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7fc44e6b6150>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7fc4543e7b10>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7fc44e4c1710>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7fc44e4bbf50>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7fc44e4bb2d0>],
             'arr': [<numba.core.ir.Assign object at 0x7fc45422b890>],
             'ashape': [<numba.core.ir.Assign object at 0x7fc44e4c1bd0>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7fc454064b50>],
             'axis': [<numba.core.ir.Assign object at 0x7fc45422b610>],
             'axis_index': [<numba.core.ir.Assign object at 0x7fc4541fa510>],
             'axis_len': [<numba.core.ir.Assign object at 0x7fc454064490>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7fc4541fa150>],
             'ndim': [<numba.core.ir.Assign object at 0x7fc45422bfd0>],
             'result': [<numba.core.ir.Assign object at 0x7fc44e4bb490>,
                        <numba.core.ir.Assign object at 0x7fc4541fa090>]})
2020-06-11 12:07:04,820:DEBUG:SSA violators {'result'}
2020-06-11 12:07:04,820:DEBUG:Fix SSA violator on var result
2020-06-11 12:07:04,820:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,820:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,820:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,820:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,820:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,820:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,820:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,820:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,820:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,820:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,820:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,820:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,820:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:04,820:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,820:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,820:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,820:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,820:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,820:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:04,820:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,821:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,821:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,821:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,821:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,821:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,821:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,821:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,821:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,821:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,821:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,821:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,821:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,821:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,821:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,821:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,821:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,821:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,821:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,821:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,821:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,821:DEBUG:first assign: result
2020-06-11 12:07:04,821:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:07:04,821:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,821:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:04,821:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,822:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,822:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,822:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,822:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,822:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,822:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:04,822:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,822:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,822:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,822:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,822:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,822:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,822:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:04,822:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,822:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,822:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,822:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,822:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:04,822:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,822:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,822:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,822:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:04,822:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,822:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,822:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,822:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,823:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:04,823:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:07:04,823:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,823:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:04,823:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,823:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,823:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:04,823:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,823:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,823:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,823:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,823:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,823:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,823:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:04,823:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e695150>
2020-06-11 12:07:04,823:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,823:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7fc45403cf90>],
             128: [<numba.core.ir.Assign object at 0x7fc44e4a7b50>]})
2020-06-11 12:07:04,823:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:04,823:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,824:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:04,824:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:04,824:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:04,824:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:04,824:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,824:DEBUG:on stmt: jump 36
2020-06-11 12:07:04,824:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:04,824:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,824:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:04,824:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:04,824:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:04,824:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,824:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:04,824:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:04,824:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:04,824:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:04,824:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:04,824:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,824:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:04,824:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,824:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:04,824:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:04,824:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:04,824:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:04,825:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:04,825:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:04,825:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:04,825:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,825:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:04,825:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:04,825:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:04,825:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:04,825:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:04,825:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:04,825:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:04,825:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,825:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:04,825:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:04,825:DEBUG:on stmt: jump 110
2020-06-11 12:07:04,825:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:04,825:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,825:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:04,825:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:04,825:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:04,825:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:04,826:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,826:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:04,826:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,826:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:04,826:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:04,826:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:04,826:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:04,826:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:04,826:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:04,826:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,826:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:04,826:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:04,826:DEBUG:on stmt: jump 128
2020-06-11 12:07:04,826:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:04,826:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,826:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:04,826:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:04,826:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 0)
2020-06-11 12:07:04,826:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:04,826:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:04,826:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:04,826:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,826:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,826:DEBUG:find_def_from_top label 128
2020-06-11 12:07:04,827:DEBUG:idom 122 from label 128
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 122
2020-06-11 12:07:04,827:DEBUG:find_def_from_top label 122
2020-06-11 12:07:04,827:DEBUG:idom 120 from label 122
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:04,827:DEBUG:find_def_from_top label 120
2020-06-11 12:07:04,827:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 305
2020-06-11 12:07:04,827:DEBUG:find_def_from_top label 305
2020-06-11 12:07:04,827:DEBUG:idom 128 from label 305
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 128
2020-06-11 12:07:04,827:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 110
2020-06-11 12:07:04,827:DEBUG:find_def_from_top label 110
2020-06-11 12:07:04,827:DEBUG:idom 52 from label 110
2020-06-11 12:07:04,827:DEBUG:find_def_from_bottom label 52
2020-06-11 12:07:04,827:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:07:04,827:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:04,827:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:07:04,827:DEBUG:on stmt: jump 305
2020-06-11 12:07:04,828:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:04,828:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,828:DEBUG:on stmt: jump 304
2020-06-11 12:07:04,828:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:04,828:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,828:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:04,828:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:04,828:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,828:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,828:DEBUG:find_def_from_top label 304
2020-06-11 12:07:04,828:DEBUG:idom 302 from label 304
2020-06-11 12:07:04,828:DEBUG:find_def_from_bottom label 302
2020-06-11 12:07:04,828:DEBUG:find_def_from_top label 302
2020-06-11 12:07:04,828:DEBUG:idom 120 from label 302
2020-06-11 12:07:04,828:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:04,828:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:04,828:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:04,828:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:04,828:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:04,828:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc4544f59d0>
2020-06-11 12:07:04,828:DEBUG:on stmt: jump 120
2020-06-11 12:07:04,828:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:04,829:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 0) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:04,829:DEBUG:================================================================================
2020-06-11 12:07:05,167:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
           8	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,167:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,167:DEBUG:stack: []
2020-06-11 12:07:05,167:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:07:05,167:DEBUG:stack []
2020-06-11 12:07:05,167:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:05,167:DEBUG:stack []
2020-06-11 12:07:05,168:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:07:05,168:DEBUG:stack ['$_112call_function_kw_6_12.0']
2020-06-11 12:07:05,168:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:07:05,168:DEBUG:stack ['$_112call_function_kw_6_12.0', '$_118binary_subtract_9_14.1']
2020-06-11 12:07:05,168:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,168:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:07:05,168:DEBUG:end state. edges=[]
2020-06-11 12:07:05,168:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,168:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:05,168:DEBUG:defmap: {}
2020-06-11 12:07:05,168:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,168:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,168:DEBUG:keep phismap: {}
2020-06-11 12:07:05,168:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:05,169:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,169:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_112call_function_kw_6_12.0'}), (4, {'res': '$_118binary_subtract_9_14.1'}), (6, {'lhs': '$_112call_function_kw_6_12.0', 'rhs': '$_118binary_subtract_9_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,169:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,171:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,171:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,171:DEBUG:================================================================================
2020-06-11 12:07:05,171:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,171:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e5519d0>
2020-06-11 12:07:05,171:DEBUG:on stmt: _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1)
2020-06-11 12:07:05,171:DEBUG:on stmt: _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1)
2020-06-11 12:07:05,171:DEBUG:on stmt: $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1
2020-06-11 12:07:05,171:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:07:05,171:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:05,172:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc44e563650>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e563190>],
             '_112call_function_kw_6_1': [<numba.core.ir.Assign object at 0x7fc44e563d90>],
             '_118binary_subtract_9_1': [<numba.core.ir.Assign object at 0x7fc44e563e50>]})
2020-06-11 12:07:05,172:DEBUG:SSA violators set()
2020-06-11 12:07:05,172:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,172:DEBUG:label 0:
    _112call_function_kw_6_1 = arg(0, name=_112call_function_kw_6_1) ['_112call_function_kw_6_1']
    _118binary_subtract_9_1 = arg(1, name=_118binary_subtract_9_1) ['_118binary_subtract_9_1']
    $6binary_true_divide.2 = _112call_function_kw_6_1 / _118binary_subtract_9_1 ['$6binary_true_divide.2', '_112call_function_kw_6_1', '_118binary_subtract_9_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,172:DEBUG:================================================================================
2020-06-11 12:07:05,196:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=342)
           2	LOAD_DEREF(arg=0, lineno=342)
           4	LOAD_FAST(arg=0, lineno=342)
           6	LOAD_FAST(arg=1, lineno=342)
           8	CALL_FUNCTION(arg=2, lineno=342)
          10	RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:05,196:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,197:DEBUG:stack: []
2020-06-11 12:07:05,197:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack []
2020-06-11 12:07:05,197:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack []
2020-06-11 12:07:05,197:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:05,197:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack ['$2load_deref.0', '$arr4.1']
2020-06-11 12:07:05,197:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack ['$2load_deref.0', '$arr4.1', '$axis6.2']
2020-06-11 12:07:05,197:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=342)
2020-06-11 12:07:05,197:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:05,197:DEBUG:end state. edges=[]
2020-06-11 12:07:05,197:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,197:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:05,197:DEBUG:defmap: {}
2020-06-11 12:07:05,197:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,197:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,198:DEBUG:keep phismap: {}
2020-06-11 12:07:05,198:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:05,198:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,198:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$arr4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,198:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e66fb90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:05,201:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,201:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e66fb90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:05,201:DEBUG:================================================================================
2020-06-11 12:07:05,201:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,201:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2ec650>
2020-06-11 12:07:05,201:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:05,201:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:05,201:DEBUG:on stmt: $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e66fb90>)
2020-06-11 12:07:05,201:DEBUG:on stmt: $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None)
2020-06-11 12:07:05,201:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:05,201:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:05,201:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44e2a4ad0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44e2a46d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44e2a49d0>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e2a4550>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e2a45d0>]})
2020-06-11 12:07:05,201:DEBUG:SSA violators set()
2020-06-11 12:07:05,201:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,201:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $2load_deref.0 = freevar(compiled: <function gen_sum_axis_impl.<locals>.inner at 0x7fc44e66fb90>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(arr, axis, func=$2load_deref.0, args=[Var(arr, arraymath.py:342), Var(axis, arraymath.py:342)], kws=(), vararg=None) ['$2load_deref.0', '$8call_function.3', 'arr', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:05,202:DEBUG:================================================================================
2020-06-11 12:07:05,204:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=195)
           2	LOAD_FAST(arg=0, lineno=195)
           4	LOAD_ATTR(arg=0, lineno=195)
           6	STORE_FAST(arg=2, lineno=195)
           8	LOAD_DEREF(arg=1, lineno=197)
          10	POP_JUMP_IF_TRUE(arg=36, lineno=197)
          12	LOAD_FAST(arg=1, lineno=199)
          14	LOAD_CONST(arg=1, lineno=199)
          16	COMPARE_OP(arg=0, lineno=199)
          18	POP_JUMP_IF_TRUE(arg=28, lineno=199)
          20	LOAD_FAST(arg=1, lineno=199)
          22	LOAD_CONST(arg=2, lineno=199)
          24	COMPARE_OP(arg=4, lineno=199)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=199)
>         28	LOAD_GLOBAL(arg=1, lineno=200)
          30	LOAD_CONST(arg=3, lineno=200)
          32	CALL_FUNCTION(arg=1, lineno=200)
          34	RAISE_VARARGS(arg=1, lineno=200)
>         36	LOAD_FAST(arg=1, lineno=205)
          38	LOAD_FAST(arg=2, lineno=205)
          40	COMPARE_OP(arg=5, lineno=205)
          42	POP_JUMP_IF_FALSE(arg=52, lineno=205)
          44	LOAD_GLOBAL(arg=1, lineno=206)
          46	LOAD_CONST(arg=4, lineno=206)
          48	CALL_FUNCTION(arg=1, lineno=206)
          50	RAISE_VARARGS(arg=1, lineno=206)
>         52	LOAD_GLOBAL(arg=2, lineno=209)
          54	LOAD_FAST(arg=0, lineno=209)
          56	LOAD_ATTR(arg=3, lineno=209)
          58	CALL_FUNCTION(arg=1, lineno=209)
          60	STORE_FAST(arg=3, lineno=209)
          62	LOAD_FAST(arg=3, lineno=211)
          64	LOAD_FAST(arg=1, lineno=211)
          66	BINARY_SUBSCR(arg=None, lineno=211)
          68	STORE_FAST(arg=4, lineno=211)
          70	LOAD_FAST(arg=3, lineno=213)
          72	LOAD_METHOD(arg=4, lineno=213)
          74	LOAD_FAST(arg=1, lineno=213)
          76	CALL_METHOD(arg=1, lineno=213)
          78	POP_TOP(arg=None, lineno=213)
          80	LOAD_GLOBAL(arg=5, lineno=215)
          82	LOAD_FAST(arg=3, lineno=215)
          84	LOAD_FAST(arg=0, lineno=215)
          86	LOAD_ATTR(arg=3, lineno=215)
          88	CALL_FUNCTION(arg=2, lineno=215)
          90	STORE_FAST(arg=5, lineno=215)
          92	LOAD_GLOBAL(arg=6, lineno=217)
          94	LOAD_METHOD(arg=7, lineno=217)
          96	LOAD_FAST(arg=5, lineno=217)
          98	LOAD_DEREF(arg=3, lineno=217)
         100	LOAD_GLOBAL(arg=8, lineno=217)
         102	LOAD_DEREF(arg=3, lineno=217)
         104	CALL_FUNCTION(arg=1, lineno=217)
         106	CALL_METHOD(arg=3, lineno=217)
         108	STORE_FAST(arg=6, lineno=217)
         110	SETUP_LOOP(arg=192, lineno=220)
         112	LOAD_GLOBAL(arg=9, lineno=220)
         114	LOAD_FAST(arg=4, lineno=220)
         116	CALL_FUNCTION(arg=1, lineno=220)
         118	GET_ITER(arg=None, lineno=220)
>        120	FOR_ITER(arg=180, lineno=220)
         122	STORE_FAST(arg=7, lineno=220)
         124	LOAD_DEREF(arg=1, lineno=221)
         126	POP_JUMP_IF_FALSE(arg=156, lineno=221)
         128	LOAD_GLOBAL(arg=10, lineno=223)
         130	LOAD_FAST(arg=0, lineno=223)
         132	LOAD_ATTR(arg=3, lineno=223)
         134	LOAD_FAST(arg=7, lineno=223)
         136	LOAD_DEREF(arg=0, lineno=224)
         138	CALL_FUNCTION(arg=3, lineno=224)
         140	STORE_FAST(arg=8, lineno=224)
         142	LOAD_FAST(arg=6, lineno=225)
         144	LOAD_FAST(arg=0, lineno=225)
         146	LOAD_FAST(arg=8, lineno=225)
         148	BINARY_SUBSCR(arg=None, lineno=225)
         150	INPLACE_ADD(arg=None, lineno=225)
         152	STORE_FAST(arg=6, lineno=225)
         154	JUMP_ABSOLUTE(arg=120, lineno=225)
>        156	LOAD_FAST(arg=1, lineno=230)
         158	LOAD_CONST(arg=1, lineno=230)
         160	COMPARE_OP(arg=2, lineno=230)
         162	POP_JUMP_IF_FALSE(arg=192, lineno=230)
         164	LOAD_GLOBAL(arg=10, lineno=231)
         166	LOAD_FAST(arg=0, lineno=231)
         168	LOAD_ATTR(arg=3, lineno=231)
         170	LOAD_FAST(arg=7, lineno=231)
         172	LOAD_CONST(arg=1, lineno=231)
         174	CALL_FUNCTION(arg=3, lineno=231)
         176	STORE_FAST(arg=9, lineno=231)
         178	LOAD_FAST(arg=6, lineno=232)
         180	LOAD_FAST(arg=0, lineno=232)
         182	LOAD_FAST(arg=9, lineno=232)
         184	BINARY_SUBSCR(arg=None, lineno=232)
         186	INPLACE_ADD(arg=None, lineno=232)
         188	STORE_FAST(arg=6, lineno=232)
         190	JUMP_ABSOLUTE(arg=120, lineno=232)
>        192	LOAD_FAST(arg=1, lineno=233)
         194	LOAD_CONST(arg=5, lineno=233)
         196	COMPARE_OP(arg=2, lineno=233)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=233)
         200	LOAD_GLOBAL(arg=10, lineno=234)
         202	LOAD_FAST(arg=0, lineno=234)
         204	LOAD_ATTR(arg=3, lineno=234)
         206	LOAD_FAST(arg=7, lineno=234)
         208	LOAD_CONST(arg=5, lineno=234)
         210	CALL_FUNCTION(arg=3, lineno=234)
         212	STORE_FAST(arg=10, lineno=234)
         214	LOAD_FAST(arg=6, lineno=235)
         216	LOAD_FAST(arg=0, lineno=235)
         218	LOAD_FAST(arg=10, lineno=235)
         220	BINARY_SUBSCR(arg=None, lineno=235)
         222	INPLACE_ADD(arg=None, lineno=235)
         224	STORE_FAST(arg=6, lineno=235)
         226	JUMP_ABSOLUTE(arg=120, lineno=235)
>        228	LOAD_FAST(arg=1, lineno=236)
         230	LOAD_CONST(arg=6, lineno=236)
         232	COMPARE_OP(arg=2, lineno=236)
         234	POP_JUMP_IF_FALSE(arg=266, lineno=236)
         238	LOAD_GLOBAL(arg=10, lineno=237)
         240	LOAD_FAST(arg=0, lineno=237)
         242	LOAD_ATTR(arg=3, lineno=237)
         244	LOAD_FAST(arg=7, lineno=237)
         246	LOAD_CONST(arg=6, lineno=237)
         248	CALL_FUNCTION(arg=3, lineno=237)
         250	STORE_FAST(arg=11, lineno=237)
         252	LOAD_FAST(arg=6, lineno=238)
         254	LOAD_FAST(arg=0, lineno=238)
         256	LOAD_FAST(arg=11, lineno=238)
         258	BINARY_SUBSCR(arg=None, lineno=238)
         260	INPLACE_ADD(arg=None, lineno=238)
         262	STORE_FAST(arg=6, lineno=238)
         264	JUMP_ABSOLUTE(arg=120, lineno=238)
>        266	LOAD_FAST(arg=1, lineno=239)
         268	LOAD_CONST(arg=2, lineno=239)
         270	COMPARE_OP(arg=2, lineno=239)
         272	POP_JUMP_IF_FALSE(arg=120, lineno=239)
         274	LOAD_GLOBAL(arg=10, lineno=240)
         276	LOAD_FAST(arg=0, lineno=240)
         278	LOAD_ATTR(arg=3, lineno=240)
         280	LOAD_FAST(arg=7, lineno=240)
         282	LOAD_CONST(arg=2, lineno=240)
         284	CALL_FUNCTION(arg=3, lineno=240)
         286	STORE_FAST(arg=12, lineno=240)
         288	LOAD_FAST(arg=6, lineno=241)
         290	LOAD_FAST(arg=0, lineno=241)
         292	LOAD_FAST(arg=12, lineno=241)
         294	BINARY_SUBSCR(arg=None, lineno=241)
         296	INPLACE_ADD(arg=None, lineno=241)
         298	STORE_FAST(arg=6, lineno=241)
         300	JUMP_ABSOLUTE(arg=120, lineno=241)
>        302	POP_BLOCK(arg=None, lineno=241)
>        304	LOAD_DEREF(arg=2, lineno=242)
         306	LOAD_FAST(arg=6, lineno=242)
         308	LOAD_CONST(arg=1, lineno=242)
         310	CALL_FUNCTION(arg=2, lineno=242)
         312	RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:05,204:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,204:DEBUG:stack: []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=195)
2020-06-11 12:07:05,204:DEBUG:stack []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=195)
2020-06-11 12:07:05,204:DEBUG:stack []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=195)
2020-06-11 12:07:05,204:DEBUG:stack ['$arr2.0']
2020-06-11 12:07:05,204:DEBUG:dispatch pc=6, inst=STORE_FAST(arg=2, lineno=195)
2020-06-11 12:07:05,204:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:05,204:DEBUG:dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=197)
2020-06-11 12:07:05,204:DEBUG:stack []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=10, inst=POP_JUMP_IF_TRUE(arg=36, lineno=197)
2020-06-11 12:07:05,204:DEBUG:stack ['$8load_deref.2']
2020-06-11 12:07:05,204:DEBUG:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,204:DEBUG:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:05,204:DEBUG:stack: []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:05,204:DEBUG:stack []
2020-06-11 12:07:05,204:DEBUG:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=199)
2020-06-11 12:07:05,205:DEBUG:stack ['$axis12.0']
2020-06-11 12:07:05,205:DEBUG:dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=199)
2020-06-11 12:07:05,205:DEBUG:stack ['$axis12.0', '$const14.1']
2020-06-11 12:07:05,205:DEBUG:dispatch pc=18, inst=POP_JUMP_IF_TRUE(arg=28, lineno=199)
2020-06-11 12:07:05,205:DEBUG:stack ['$16compare_op.2']
2020-06-11 12:07:05,205:DEBUG:end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,205:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2020-06-11 12:07:05,205:DEBUG:stack: []
2020-06-11 12:07:05,205:DEBUG:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=205)
2020-06-11 12:07:05,205:DEBUG:stack []
2020-06-11 12:07:05,205:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=205)
2020-06-11 12:07:05,205:DEBUG:stack ['$axis36.0']
2020-06-11 12:07:05,205:DEBUG:dispatch pc=40, inst=COMPARE_OP(arg=5, lineno=205)
2020-06-11 12:07:05,205:DEBUG:stack ['$axis36.0', '$ndim38.1']
2020-06-11 12:07:05,205:DEBUG:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=52, lineno=205)
2020-06-11 12:07:05,205:DEBUG:stack ['$40compare_op.2']
2020-06-11 12:07:05,205:DEBUG:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,205:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2020-06-11 12:07:05,205:DEBUG:stack: []
2020-06-11 12:07:05,205:DEBUG:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=199)
2020-06-11 12:07:05,205:DEBUG:stack []
2020-06-11 12:07:05,205:DEBUG:dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=199)
2020-06-11 12:07:05,205:DEBUG:stack ['$axis20.0']
2020-06-11 12:07:05,205:DEBUG:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=199)
2020-06-11 12:07:05,206:DEBUG:stack ['$axis20.0', '$const22.1']
2020-06-11 12:07:05,206:DEBUG:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=199)
2020-06-11 12:07:05,206:DEBUG:stack ['$24compare_op.2']
2020-06-11 12:07:05,206:DEBUG:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,206:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:05,206:DEBUG:stack: []
2020-06-11 12:07:05,206:DEBUG:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=200)
2020-06-11 12:07:05,206:DEBUG:stack []
2020-06-11 12:07:05,206:DEBUG:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=200)
2020-06-11 12:07:05,206:DEBUG:stack ['$28load_global.0']
2020-06-11 12:07:05,206:DEBUG:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=200)
2020-06-11 12:07:05,206:DEBUG:stack ['$28load_global.0', '$const30.1']
2020-06-11 12:07:05,206:DEBUG:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=200)
2020-06-11 12:07:05,206:DEBUG:stack ['$32call_function.2']
2020-06-11 12:07:05,206:DEBUG:end state. edges=[]
2020-06-11 12:07:05,206:DEBUG:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:05,206:DEBUG:stack: []
2020-06-11 12:07:05,206:DEBUG:dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=206)
2020-06-11 12:07:05,206:DEBUG:stack []
2020-06-11 12:07:05,206:DEBUG:dispatch pc=46, inst=LOAD_CONST(arg=4, lineno=206)
2020-06-11 12:07:05,206:DEBUG:stack ['$44load_global.0']
2020-06-11 12:07:05,206:DEBUG:dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=206)
2020-06-11 12:07:05,206:DEBUG:stack ['$44load_global.0', '$const46.1']
2020-06-11 12:07:05,206:DEBUG:dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=206)
2020-06-11 12:07:05,207:DEBUG:stack ['$48call_function.2']
2020-06-11 12:07:05,207:DEBUG:end state. edges=[]
2020-06-11 12:07:05,207:DEBUG:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2020-06-11 12:07:05,207:DEBUG:stack: []
2020-06-11 12:07:05,207:DEBUG:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=209)
2020-06-11 12:07:05,207:DEBUG:stack []
2020-06-11 12:07:05,207:DEBUG:dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=209)
2020-06-11 12:07:05,207:DEBUG:stack ['$52load_global.0']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=209)
2020-06-11 12:07:05,207:DEBUG:stack ['$52load_global.0', '$arr54.1']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=209)
2020-06-11 12:07:05,207:DEBUG:stack ['$52load_global.0', '$56load_attr.2']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=60, inst=STORE_FAST(arg=3, lineno=209)
2020-06-11 12:07:05,207:DEBUG:stack ['$58call_function.3']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=211)
2020-06-11 12:07:05,207:DEBUG:stack []
2020-06-11 12:07:05,207:DEBUG:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=211)
2020-06-11 12:07:05,207:DEBUG:stack ['$ashape62.4']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=211)
2020-06-11 12:07:05,207:DEBUG:stack ['$ashape62.4', '$axis64.5']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=211)
2020-06-11 12:07:05,207:DEBUG:stack ['$66binary_subscr.6']
2020-06-11 12:07:05,207:DEBUG:dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=213)
2020-06-11 12:07:05,207:DEBUG:stack []
2020-06-11 12:07:05,207:DEBUG:dispatch pc=72, inst=LOAD_METHOD(arg=4, lineno=213)
2020-06-11 12:07:05,208:DEBUG:stack ['$ashape70.7']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=213)
2020-06-11 12:07:05,208:DEBUG:stack ['$72load_method.8']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=213)
2020-06-11 12:07:05,208:DEBUG:stack ['$72load_method.8', '$axis74.9']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=78, inst=POP_TOP(arg=None, lineno=213)
2020-06-11 12:07:05,208:DEBUG:stack ['$76call_method.10']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=80, inst=LOAD_GLOBAL(arg=5, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack []
2020-06-11 12:07:05,208:DEBUG:dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack ['$80load_global.11']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack ['$80load_global.11', '$ashape82.12']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$arr84.13']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=88, inst=CALL_FUNCTION(arg=2, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack ['$80load_global.11', '$ashape82.12', '$86load_attr.14']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=90, inst=STORE_FAST(arg=5, lineno=215)
2020-06-11 12:07:05,208:DEBUG:stack ['$88call_function.15']
2020-06-11 12:07:05,208:DEBUG:dispatch pc=92, inst=LOAD_GLOBAL(arg=6, lineno=217)
2020-06-11 12:07:05,208:DEBUG:stack []
2020-06-11 12:07:05,208:DEBUG:dispatch pc=94, inst=LOAD_METHOD(arg=7, lineno=217)
2020-06-11 12:07:05,208:DEBUG:stack ['$92load_global.16']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=96, inst=LOAD_FAST(arg=5, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=98, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=100, inst=LOAD_GLOBAL(arg=8, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=102, inst=LOAD_DEREF(arg=3, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$100load_global.20', '$102load_deref.21']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=106, inst=CALL_METHOD(arg=3, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$94load_method.17', '$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22']
2020-06-11 12:07:05,209:DEBUG:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=217)
2020-06-11 12:07:05,209:DEBUG:stack ['$106call_method.23']
2020-06-11 12:07:05,209:DEBUG:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,209:DEBUG:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:05,209:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:05,209:DEBUG:pending: deque([State(pc_initial=110 nstack_initial=0)])
2020-06-11 12:07:05,209:DEBUG:stack: []
2020-06-11 12:07:05,209:DEBUG:dispatch pc=110, inst=SETUP_LOOP(arg=192, lineno=220)
2020-06-11 12:07:05,209:DEBUG:stack []
2020-06-11 12:07:05,209:DEBUG:dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=220)
2020-06-11 12:07:05,209:DEBUG:stack []
2020-06-11 12:07:05,209:DEBUG:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=220)
2020-06-11 12:07:05,210:DEBUG:stack ['$112load_global.0']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=220)
2020-06-11 12:07:05,210:DEBUG:stack ['$112load_global.0', '$axis_len114.1']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=118, inst=GET_ITER(arg=None, lineno=220)
2020-06-11 12:07:05,210:DEBUG:stack ['$116call_function.2']
2020-06-11 12:07:05,210:DEBUG:end state. edges=[Edge(pc=120, stack=('$118get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,210:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,210:DEBUG:stack: ['$phi120.0']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=120, inst=FOR_ITER(arg=180, lineno=220)
2020-06-11 12:07:05,210:DEBUG:stack ['$phi120.0']
2020-06-11 12:07:05,210:DEBUG:end state. edges=[Edge(pc=302, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=('$phi120.0', '$120for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,210:DEBUG:pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=122 nstack_initial=2)])
2020-06-11 12:07:05,210:DEBUG:stack: []
2020-06-11 12:07:05,210:DEBUG:dispatch pc=302, inst=POP_BLOCK(arg=None, lineno=241)
2020-06-11 12:07:05,210:DEBUG:stack []
2020-06-11 12:07:05,210:DEBUG:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:05,210:DEBUG:pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=304 nstack_initial=0)])
2020-06-11 12:07:05,210:DEBUG:stack: ['$phi122.0', '$phi122.1']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=122, inst=STORE_FAST(arg=7, lineno=220)
2020-06-11 12:07:05,210:DEBUG:stack ['$phi122.0', '$phi122.1']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=124, inst=LOAD_DEREF(arg=1, lineno=221)
2020-06-11 12:07:05,210:DEBUG:stack ['$phi122.0']
2020-06-11 12:07:05,210:DEBUG:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=156, lineno=221)
2020-06-11 12:07:05,211:DEBUG:stack ['$phi122.0', '$124load_deref.2']
2020-06-11 12:07:05,211:DEBUG:end state. edges=[Edge(pc=128, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=('$phi122.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,211:DEBUG:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:05,211:DEBUG:stack: []
2020-06-11 12:07:05,211:DEBUG:dispatch pc=304, inst=LOAD_DEREF(arg=2, lineno=242)
2020-06-11 12:07:05,211:DEBUG:stack []
2020-06-11 12:07:05,211:DEBUG:dispatch pc=306, inst=LOAD_FAST(arg=6, lineno=242)
2020-06-11 12:07:05,211:DEBUG:stack ['$304load_deref.0']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=308, inst=LOAD_CONST(arg=1, lineno=242)
2020-06-11 12:07:05,211:DEBUG:stack ['$304load_deref.0', '$result306.1']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=310, inst=CALL_FUNCTION(arg=2, lineno=242)
2020-06-11 12:07:05,211:DEBUG:stack ['$304load_deref.0', '$result306.1', '$const308.2']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=312, inst=RETURN_VALUE(arg=None, lineno=242)
2020-06-11 12:07:05,211:DEBUG:stack ['$310call_function.3']
2020-06-11 12:07:05,211:DEBUG:end state. edges=[]
2020-06-11 12:07:05,211:DEBUG:pending: deque([State(pc_initial=128 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
2020-06-11 12:07:05,211:DEBUG:stack: ['$phi128.0']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=223)
2020-06-11 12:07:05,211:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=223)
2020-06-11 12:07:05,211:DEBUG:stack ['$phi128.0', '$128load_global.1']
2020-06-11 12:07:05,211:DEBUG:dispatch pc=132, inst=LOAD_ATTR(arg=3, lineno=223)
2020-06-11 12:07:05,211:DEBUG:stack ['$phi128.0', '$128load_global.1', '$arr130.2']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=223)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=136, inst=LOAD_DEREF(arg=0, lineno=224)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=224)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$128load_global.1', '$132load_attr.3', '$axis_index134.4', '$136load_deref.5']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=140, inst=STORE_FAST(arg=8, lineno=224)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$138call_function.6']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=144, inst=LOAD_FAST(arg=0, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$result142.7']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$result142.7', '$arr144.8', '$index_tuple_generic146.9']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=150, inst=INPLACE_ADD(arg=None, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$result142.7', '$148binary_subscr.10']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0', '$150inplace_add.11']
2020-06-11 12:07:05,212:DEBUG:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=120, lineno=225)
2020-06-11 12:07:05,212:DEBUG:stack ['$phi128.0']
2020-06-11 12:07:05,212:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,212:DEBUG:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,213:DEBUG:stack: ['$phi156.0']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=230)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi156.0']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=230)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi156.0', '$axis156.1']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=160, inst=COMPARE_OP(arg=2, lineno=230)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi156.0', '$axis156.1', '$const158.2']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=192, lineno=230)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi156.0', '$160compare_op.3']
2020-06-11 12:07:05,213:DEBUG:end state. edges=[Edge(pc=164, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=('$phi156.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,213:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:05,213:DEBUG:pending: deque([State(pc_initial=164 nstack_initial=1), State(pc_initial=192 nstack_initial=1)])
2020-06-11 12:07:05,213:DEBUG:stack: ['$phi164.0']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=231)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=231)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi164.0', '$164load_global.1']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=168, inst=LOAD_ATTR(arg=3, lineno=231)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi164.0', '$164load_global.1', '$arr166.2']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=231)
2020-06-11 12:07:05,213:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3']
2020-06-11 12:07:05,213:DEBUG:dispatch pc=172, inst=LOAD_CONST(arg=1, lineno=231)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=174, inst=CALL_FUNCTION(arg=3, lineno=231)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$164load_global.1', '$168load_attr.3', '$axis_index170.4', '$const172.5']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=176, inst=STORE_FAST(arg=9, lineno=231)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$174call_function.6']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$result178.7']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$result178.7', '$arr180.8', '$index_tuple1182.9']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$result178.7', '$184binary_subscr.10']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=188, inst=STORE_FAST(arg=6, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0', '$186inplace_add.11']
2020-06-11 12:07:05,214:DEBUG:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=120, lineno=232)
2020-06-11 12:07:05,214:DEBUG:stack ['$phi164.0']
2020-06-11 12:07:05,214:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi164.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,214:DEBUG:pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,214:DEBUG:stack: ['$phi192.0']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=233)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi192.0']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=194, inst=LOAD_CONST(arg=5, lineno=233)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi192.0', '$axis192.1']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=196, inst=COMPARE_OP(arg=2, lineno=233)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi192.0', '$axis192.1', '$const194.2']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=233)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi192.0', '$196compare_op.3']
2020-06-11 12:07:05,215:DEBUG:end state. edges=[Edge(pc=200, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=228, stack=('$phi192.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,215:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:05,215:DEBUG:pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=228 nstack_initial=1)])
2020-06-11 12:07:05,215:DEBUG:stack: ['$phi200.0']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=200, inst=LOAD_GLOBAL(arg=10, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0', '$200load_global.1']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=204, inst=LOAD_ATTR(arg=3, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0', '$200load_global.1', '$arr202.2']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=210, inst=CALL_FUNCTION(arg=3, lineno=234)
2020-06-11 12:07:05,215:DEBUG:stack ['$phi200.0', '$200load_global.1', '$204load_attr.3', '$axis_index206.4', '$const208.5']
2020-06-11 12:07:05,215:DEBUG:dispatch pc=212, inst=STORE_FAST(arg=10, lineno=234)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$210call_function.6']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$result214.7']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=218, inst=LOAD_FAST(arg=10, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$result214.7', '$arr216.8', '$index_tuple2218.9']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=222, inst=INPLACE_ADD(arg=None, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$result214.7', '$220binary_subscr.10']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=224, inst=STORE_FAST(arg=6, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0', '$222inplace_add.11']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=226, inst=JUMP_ABSOLUTE(arg=120, lineno=235)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi200.0']
2020-06-11 12:07:05,216:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi200.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,216:DEBUG:pending: deque([State(pc_initial=228 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,216:DEBUG:stack: ['$phi228.0']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=228, inst=LOAD_FAST(arg=1, lineno=236)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi228.0']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=230, inst=LOAD_CONST(arg=6, lineno=236)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi228.0', '$axis228.1']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=232, inst=COMPARE_OP(arg=2, lineno=236)
2020-06-11 12:07:05,216:DEBUG:stack ['$phi228.0', '$axis228.1', '$const230.2']
2020-06-11 12:07:05,216:DEBUG:dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=266, lineno=236)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi228.0', '$232compare_op.3']
2020-06-11 12:07:05,217:DEBUG:end state. edges=[Edge(pc=238, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=266, stack=('$phi228.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,217:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:05,217:DEBUG:pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=266 nstack_initial=1)])
2020-06-11 12:07:05,217:DEBUG:stack: ['$phi238.0']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=238, inst=LOAD_GLOBAL(arg=10, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=240, inst=LOAD_FAST(arg=0, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$238load_global.1']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$238load_global.1', '$arr240.2']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=246, inst=LOAD_CONST(arg=6, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=248, inst=CALL_FUNCTION(arg=3, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$238load_global.1', '$242load_attr.3', '$axis_index244.4', '$const246.5']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=250, inst=STORE_FAST(arg=11, lineno=237)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$248call_function.6']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=252, inst=LOAD_FAST(arg=6, lineno=238)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=254, inst=LOAD_FAST(arg=0, lineno=238)
2020-06-11 12:07:05,217:DEBUG:stack ['$phi238.0', '$result252.7']
2020-06-11 12:07:05,217:DEBUG:dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=238)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=238)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi238.0', '$result252.7', '$arr254.8', '$index_tuple3256.9']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=260, inst=INPLACE_ADD(arg=None, lineno=238)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi238.0', '$result252.7', '$258binary_subscr.10']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=262, inst=STORE_FAST(arg=6, lineno=238)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi238.0', '$260inplace_add.11']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=264, inst=JUMP_ABSOLUTE(arg=120, lineno=238)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi238.0']
2020-06-11 12:07:05,218:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi238.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,218:DEBUG:pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,218:DEBUG:stack: ['$phi266.0']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=239)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi266.0']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=268, inst=LOAD_CONST(arg=2, lineno=239)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi266.0', '$axis266.1']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=270, inst=COMPARE_OP(arg=2, lineno=239)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi266.0', '$axis266.1', '$const268.2']
2020-06-11 12:07:05,218:DEBUG:dispatch pc=272, inst=POP_JUMP_IF_FALSE(arg=120, lineno=239)
2020-06-11 12:07:05,218:DEBUG:stack ['$phi266.0', '$270compare_op.3']
2020-06-11 12:07:05,218:DEBUG:end state. edges=[Edge(pc=274, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=120, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,218:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,218:DEBUG:pending: deque([State(pc_initial=274 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,218:DEBUG:stack: ['$phi274.0']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=274, inst=LOAD_GLOBAL(arg=10, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$274load_global.1']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=278, inst=LOAD_ATTR(arg=3, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$274load_global.1', '$arr276.2']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=282, inst=LOAD_CONST(arg=2, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=284, inst=CALL_FUNCTION(arg=3, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$274load_global.1', '$278load_attr.3', '$axis_index280.4', '$const282.5']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=286, inst=STORE_FAST(arg=12, lineno=240)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$284call_function.6']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=241)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=290, inst=LOAD_FAST(arg=0, lineno=241)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$result288.7']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=292, inst=LOAD_FAST(arg=12, lineno=241)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=241)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$result288.7', '$arr290.8', '$index_tuple4292.9']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=241)
2020-06-11 12:07:05,219:DEBUG:stack ['$phi274.0', '$result288.7', '$294binary_subscr.10']
2020-06-11 12:07:05,219:DEBUG:dispatch pc=298, inst=STORE_FAST(arg=6, lineno=241)
2020-06-11 12:07:05,220:DEBUG:stack ['$phi274.0', '$296inplace_add.11']
2020-06-11 12:07:05,220:DEBUG:dispatch pc=300, inst=JUMP_ABSOLUTE(arg=120, lineno=241)
2020-06-11 12:07:05,220:DEBUG:stack ['$phi274.0']
2020-06-11 12:07:05,220:DEBUG:end state. edges=[Edge(pc=120, stack=('$phi274.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:05,220:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1), State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,220:DEBUG:pending: deque([State(pc_initial=120 nstack_initial=1)])
2020-06-11 12:07:05,220:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,220:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=1): {'$phi120.0'},
             State(pc_initial=122 nstack_initial=2): {'$phi122.1'},
             State(pc_initial=128 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=164 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=228 nstack_initial=1): set(),
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=274 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set()})
2020-06-11 12:07:05,221:DEBUG:defmap: {'$phi120.0': State(pc_initial=110 nstack_initial=0),
 '$phi122.1': State(pc_initial=120 nstack_initial=1)}
2020-06-11 12:07:05,221:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi128.0',
                            State(pc_initial=128 nstack_initial=1)),
                           ('$phi164.0',
                            State(pc_initial=164 nstack_initial=1)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1)),
                           ('$phi274.0',
                            State(pc_initial=274 nstack_initial=1))},
             '$phi122.0': {('$phi120.0',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi156.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2))},
             '$phi164.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi192.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi200.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi228.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi238.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi266.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi274.0': {('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))}})
2020-06-11 12:07:05,221:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi192.0',
                            State(pc_initial=192 nstack_initial=1)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=1))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:05,222:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:05,222:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi120.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi122.1': {('$120for_iter.2',
                            State(pc_initial=120 nstack_initial=1))},
             '$phi128.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi156.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi164.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi192.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi200.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi228.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi238.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi266.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))},
             '$phi274.0': {('$118get_iter.3',
                            State(pc_initial=110 nstack_initial=0))}})
2020-06-11 12:07:05,223:DEBUG:keep phismap: {'$phi120.0': {('$118get_iter.3', State(pc_initial=110 nstack_initial=0))},
 '$phi122.1': {('$120for_iter.2', State(pc_initial=120 nstack_initial=1))}}
2020-06-11 12:07:05,223:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=110 nstack_initial=0): {'$phi120.0': '$118get_iter.3'},
             State(pc_initial=120 nstack_initial=1): {'$phi122.1': '$120for_iter.2'}})
2020-06-11 12:07:05,223:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_deref.2'}), (10, {'pred': '$8load_deref.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 36: ()})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$axis12.0'}), (14, {'res': '$const14.1'}), (16, {'lhs': '$axis12.0', 'rhs': '$const14.1', 'res': '$16compare_op.2'}), (18, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 28: ()})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$axis20.0'}), (22, {'res': '$const22.1'}), (24, {'lhs': '$axis20.0', 'rhs': '$const22.1', 'res': '$24compare_op.2'}), (26, {'pred': '$24compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$axis36.0'}), (38, {'res': '$ndim38.1'}), (40, {'lhs': '$axis36.0', 'rhs': '$ndim38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 52: ()})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'res': '$const46.1'}), (48, {'func': '$44load_global.0', 'args': ['$const46.1'], 'res': '$48call_function.2'}), (50, {'exc': '$48call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.0'}), (54, {'res': '$arr54.1'}), (56, {'item': '$arr54.1', 'res': '$56load_attr.2'}), (58, {'func': '$52load_global.0', 'args': ['$56load_attr.2'], 'res': '$58call_function.3'}), (60, {'value': '$58call_function.3'}), (62, {'res': '$ashape62.4'}), (64, {'res': '$axis64.5'}), (66, {'index': '$axis64.5', 'target': '$ashape62.4', 'res': '$66binary_subscr.6'}), (68, {'value': '$66binary_subscr.6'}), (70, {'res': '$ashape70.7'}), (72, {'item': '$ashape70.7', 'res': '$72load_method.8'}), (74, {'res': '$axis74.9'}), (76, {'func': '$72load_method.8', 'args': ['$axis74.9'], 'res': '$76call_method.10'}), (80, {'res': '$80load_global.11'}), (82, {'res': '$ashape82.12'}), (84, {'res': '$arr84.13'}), (86, {'item': '$arr84.13', 'res': '$86load_attr.14'}), (88, {'func': '$80load_global.11', 'args': ['$ashape82.12', '$86load_attr.14'], 'res': '$88call_function.15'}), (90, {'value': '$88call_function.15'}), (92, {'res': '$92load_global.16'}), (94, {'item': '$92load_global.16', 'res': '$94load_method.17'}), (96, {'res': '$ashape_without_axis96.18'}), (98, {'res': '$98load_deref.19'}), (100, {'res': '$100load_global.20'}), (102, {'res': '$102load_deref.21'}), (104, {'func': '$100load_global.20', 'args': ['$102load_deref.21'], 'res': '$104call_function.22'}), (106, {'func': '$94load_method.17', 'args': ['$ashape_without_axis96.18', '$98load_deref.19', '$104call_function.22'], 'res': '$106call_method.23'}), (108, {'value': '$106call_method.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$axis_len114.1'}), (116, {'func': '$112load_global.0', 'args': ['$axis_len114.1'], 'res': '$116call_function.2'}), (118, {'value': '$116call_function.2', 'res': '$118get_iter.3'})), outgoing_phis={'$phi120.0': '$118get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ('$118get_iter.3',)})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=120 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'iterator': '$phi120.0', 'pair': '$120for_iter.1', 'indval': '$120for_iter.2', 'pred': '$120for_iter.3'}),), outgoing_phis={'$phi122.1': '$120for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={302: (), 122: ('$phi120.0', '$120for_iter.2')})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'value': '$phi122.1'}), (124, {'res': '$124load_deref.2'}), (126, {'pred': '$124load_deref.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi122.0',), 156: ('$phi122.0',)})
2020-06-11 12:07:05,223:DEBUG:block_infos State(pc_initial=128 nstack_initial=1):
AdaptBlockInfo(insts=((128, {'res': '$128load_global.1'}), (130, {'res': '$arr130.2'}), (132, {'item': '$arr130.2', 'res': '$132load_attr.3'}), (134, {'res': '$axis_index134.4'}), (136, {'res': '$136load_deref.5'}), (138, {'func': '$128load_global.1', 'args': ['$132load_attr.3', '$axis_index134.4', '$136load_deref.5'], 'res': '$138call_function.6'}), (140, {'value': '$138call_function.6'}), (142, {'res': '$result142.7'}), (144, {'res': '$arr144.8'}), (146, {'res': '$index_tuple_generic146.9'}), (148, {'index': '$index_tuple_generic146.9', 'target': '$arr144.8', 'res': '$148binary_subscr.10'}), (150, {'lhs': '$result142.7', 'rhs': '$148binary_subscr.10', 'res': '$150inplace_add.11'}), (152, {'value': '$150inplace_add.11'}), (154, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi128.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$axis156.1'}), (158, {'res': '$const158.2'}), (160, {'lhs': '$axis156.1', 'rhs': '$const158.2', 'res': '$160compare_op.3'}), (162, {'pred': '$160compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={164: ('$phi156.0',), 192: ('$phi156.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=164 nstack_initial=1):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.1'}), (166, {'res': '$arr166.2'}), (168, {'item': '$arr166.2', 'res': '$168load_attr.3'}), (170, {'res': '$axis_index170.4'}), (172, {'res': '$const172.5'}), (174, {'func': '$164load_global.1', 'args': ['$168load_attr.3', '$axis_index170.4', '$const172.5'], 'res': '$174call_function.6'}), (176, {'value': '$174call_function.6'}), (178, {'res': '$result178.7'}), (180, {'res': '$arr180.8'}), (182, {'res': '$index_tuple1182.9'}), (184, {'index': '$index_tuple1182.9', 'target': '$arr180.8', 'res': '$184binary_subscr.10'}), (186, {'lhs': '$result178.7', 'rhs': '$184binary_subscr.10', 'res': '$186inplace_add.11'}), (188, {'value': '$186inplace_add.11'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi164.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'res': '$axis192.1'}), (194, {'res': '$const194.2'}), (196, {'lhs': '$axis192.1', 'rhs': '$const194.2', 'res': '$196compare_op.3'}), (198, {'pred': '$196compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={200: ('$phi192.0',), 228: ('$phi192.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.1'}), (202, {'res': '$arr202.2'}), (204, {'item': '$arr202.2', 'res': '$204load_attr.3'}), (206, {'res': '$axis_index206.4'}), (208, {'res': '$const208.5'}), (210, {'func': '$200load_global.1', 'args': ['$204load_attr.3', '$axis_index206.4', '$const208.5'], 'res': '$210call_function.6'}), (212, {'value': '$210call_function.6'}), (214, {'res': '$result214.7'}), (216, {'res': '$arr216.8'}), (218, {'res': '$index_tuple2218.9'}), (220, {'index': '$index_tuple2218.9', 'target': '$arr216.8', 'res': '$220binary_subscr.10'}), (222, {'lhs': '$result214.7', 'rhs': '$220binary_subscr.10', 'res': '$222inplace_add.11'}), (224, {'value': '$222inplace_add.11'}), (226, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi200.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=228 nstack_initial=1):
AdaptBlockInfo(insts=((228, {'res': '$axis228.1'}), (230, {'res': '$const230.2'}), (232, {'lhs': '$axis228.1', 'rhs': '$const230.2', 'res': '$232compare_op.3'}), (234, {'pred': '$232compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={238: ('$phi228.0',), 266: ('$phi228.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$238load_global.1'}), (240, {'res': '$arr240.2'}), (242, {'item': '$arr240.2', 'res': '$242load_attr.3'}), (244, {'res': '$axis_index244.4'}), (246, {'res': '$const246.5'}), (248, {'func': '$238load_global.1', 'args': ['$242load_attr.3', '$axis_index244.4', '$const246.5'], 'res': '$248call_function.6'}), (250, {'value': '$248call_function.6'}), (252, {'res': '$result252.7'}), (254, {'res': '$arr254.8'}), (256, {'res': '$index_tuple3256.9'}), (258, {'index': '$index_tuple3256.9', 'target': '$arr254.8', 'res': '$258binary_subscr.10'}), (260, {'lhs': '$result252.7', 'rhs': '$258binary_subscr.10', 'res': '$260inplace_add.11'}), (262, {'value': '$260inplace_add.11'}), (264, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi238.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$axis266.1'}), (268, {'res': '$const268.2'}), (270, {'lhs': '$axis266.1', 'rhs': '$const268.2', 'res': '$270compare_op.3'}), (272, {'pred': '$270compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={274: ('$phi266.0',), 120: ('$phi266.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=274 nstack_initial=1):
AdaptBlockInfo(insts=((274, {'res': '$274load_global.1'}), (276, {'res': '$arr276.2'}), (278, {'item': '$arr276.2', 'res': '$278load_attr.3'}), (280, {'res': '$axis_index280.4'}), (282, {'res': '$const282.5'}), (284, {'func': '$274load_global.1', 'args': ['$278load_attr.3', '$axis_index280.4', '$const282.5'], 'res': '$284call_function.6'}), (286, {'value': '$284call_function.6'}), (288, {'res': '$result288.7'}), (290, {'res': '$arr290.8'}), (292, {'res': '$index_tuple4292.9'}), (294, {'index': '$index_tuple4292.9', 'target': '$arr290.8', 'res': '$294binary_subscr.10'}), (296, {'lhs': '$result288.7', 'rhs': '$294binary_subscr.10', 'res': '$296inplace_add.11'}), (298, {'value': '$296inplace_add.11'}), (300, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={120: ('$phi274.0',)})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 304, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={304: ()})
2020-06-11 12:07:05,224:DEBUG:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$304load_deref.0'}), (306, {'res': '$result306.1'}), (308, {'res': '$const308.2'}), (310, {'func': '$304load_deref.0', 'args': ['$result306.1', '$const308.2'], 'res': '$310call_function.3'}), (312, {'retval': '$310call_function.3', 'castval': '$312return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,227:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = getattr(value=arr, attr=ndim) ['$4load_attr.1', 'arr']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    branch $8load_deref.2, 36, 12            ['$8load_deref.2']
label 12:
    $const14.1 = const(int, 0)               ['$const14.1']
    $16compare_op.2 = axis < $const14.1      ['$16compare_op.2', '$const14.1', 'axis']
    branch $16compare_op.2, 28, 20           ['$16compare_op.2']
label 20:
    $const22.1 = const(int, 3)               ['$const22.1']
    $24compare_op.2 = axis > $const22.1      ['$24compare_op.2', '$const22.1', 'axis']
    branch $24compare_op.2, 28, 36           ['$24compare_op.2']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, Numba does not support sum with axis parameter outside the range 0 to 3.) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arraymath.py:200)], kws=(), vararg=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise $48call_function.2                 ['$48call_function.2']
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    branch $124load_deref.2, 128, 156        ['$124load_deref.2']
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 120                                 []
label 156:
    $const158.2 = const(int, 0)              ['$const158.2']
    $160compare_op.3 = axis == $const158.2   ['$160compare_op.3', '$const158.2', 'axis']
    branch $160compare_op.3, 164, 192        ['$160compare_op.3']
label 164:
    $164load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$164load_global.1']
    $168load_attr.3 = getattr(value=arr, attr=shape) ['$168load_attr.3', 'arr']
    $const172.5 = const(int, 0)              ['$const172.5']
    $174call_function.6 = call $164load_global.1($168load_attr.3, axis_index, $const172.5, func=$164load_global.1, args=[Var($168load_attr.3, arraymath.py:231), Var(axis_index, arraymath.py:220), Var($const172.5, arraymath.py:231)], kws=(), vararg=None) ['$164load_global.1', '$168load_attr.3', '$174call_function.6', '$const172.5', 'axis_index']
    index_tuple1 = $174call_function.6       ['$174call_function.6', 'index_tuple1']
    $184binary_subscr.10 = getitem(value=arr, index=index_tuple1) ['$184binary_subscr.10', 'arr', 'index_tuple1']
    $186inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$184binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$184binary_subscr.10', '$186inplace_add.11', 'result']
    result = $186inplace_add.11              ['$186inplace_add.11', 'result']
    jump 120                                 []
label 192:
    $const194.2 = const(int, 1)              ['$const194.2']
    $196compare_op.3 = axis == $const194.2   ['$196compare_op.3', '$const194.2', 'axis']
    branch $196compare_op.3, 200, 228        ['$196compare_op.3']
label 200:
    $200load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$200load_global.1']
    $204load_attr.3 = getattr(value=arr, attr=shape) ['$204load_attr.3', 'arr']
    $const208.5 = const(int, 1)              ['$const208.5']
    $210call_function.6 = call $200load_global.1($204load_attr.3, axis_index, $const208.5, func=$200load_global.1, args=[Var($204load_attr.3, arraymath.py:234), Var(axis_index, arraymath.py:220), Var($const208.5, arraymath.py:234)], kws=(), vararg=None) ['$200load_global.1', '$204load_attr.3', '$210call_function.6', '$const208.5', 'axis_index']
    index_tuple2 = $210call_function.6       ['$210call_function.6', 'index_tuple2']
    $220binary_subscr.10 = getitem(value=arr, index=index_tuple2) ['$220binary_subscr.10', 'arr', 'index_tuple2']
    $222inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$220binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.10', '$222inplace_add.11', 'result']
    result = $222inplace_add.11              ['$222inplace_add.11', 'result']
    jump 120                                 []
label 228:
    $const230.2 = const(int, 2)              ['$const230.2']
    $232compare_op.3 = axis == $const230.2   ['$232compare_op.3', '$const230.2', 'axis']
    branch $232compare_op.3, 238, 266        ['$232compare_op.3']
label 238:
    $238load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$238load_global.1']
    $242load_attr.3 = getattr(value=arr, attr=shape) ['$242load_attr.3', 'arr']
    $const246.5 = const(int, 2)              ['$const246.5']
    $248call_function.6 = call $238load_global.1($242load_attr.3, axis_index, $const246.5, func=$238load_global.1, args=[Var($242load_attr.3, arraymath.py:237), Var(axis_index, arraymath.py:220), Var($const246.5, arraymath.py:237)], kws=(), vararg=None) ['$238load_global.1', '$242load_attr.3', '$248call_function.6', '$const246.5', 'axis_index']
    index_tuple3 = $248call_function.6       ['$248call_function.6', 'index_tuple3']
    $258binary_subscr.10 = getitem(value=arr, index=index_tuple3) ['$258binary_subscr.10', 'arr', 'index_tuple3']
    $260inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$258binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.10', '$260inplace_add.11', 'result']
    result = $260inplace_add.11              ['$260inplace_add.11', 'result']
    jump 120                                 []
label 266:
    $const268.2 = const(int, 3)              ['$const268.2']
    $270compare_op.3 = axis == $const268.2   ['$270compare_op.3', '$const268.2', 'axis']
    branch $270compare_op.3, 274, 120        ['$270compare_op.3']
label 274:
    $274load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$274load_global.1']
    $278load_attr.3 = getattr(value=arr, attr=shape) ['$278load_attr.3', 'arr']
    $const282.5 = const(int, 3)              ['$const282.5']
    $284call_function.6 = call $274load_global.1($278load_attr.3, axis_index, $const282.5, func=$274load_global.1, args=[Var($278load_attr.3, arraymath.py:240), Var(axis_index, arraymath.py:220), Var($const282.5, arraymath.py:240)], kws=(), vararg=None) ['$274load_global.1', '$278load_attr.3', '$284call_function.6', '$const282.5', 'axis_index']
    index_tuple4 = $284call_function.6       ['$284call_function.6', 'index_tuple4']
    $294binary_subscr.10 = getitem(value=arr, index=index_tuple4) ['$294binary_subscr.10', 'arr', 'index_tuple4']
    $296inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$294binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$294binary_subscr.10', '$296inplace_add.11', 'result']
    result = $296inplace_add.11              ['$296inplace_add.11', 'result']
    jump 120                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']

2020-06-11 12:07:05,240:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,241:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result']
    result = $150inplace_add.11              ['$150inplace_add.11', 'result']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:05,241:DEBUG:================================================================================
2020-06-11 12:07:05,241:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,241:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:05,241:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:05,241:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:05,241:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:05,241:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,241:DEBUG:on stmt: jump 36
2020-06-11 12:07:05,241:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:05,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,241:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:05,241:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:05,241:DEBUG:==== SSA block analysis pass on 44
2020-06-11 12:07:05,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,241:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:05,241:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:05,241:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:05,241:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:05,241:DEBUG:==== SSA block analysis pass on 52
2020-06-11 12:07:05,241:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,242:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:05,242:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,242:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:05,242:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:05,242:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:05,242:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:05,242:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:05,242:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:05,242:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:05,242:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,242:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:05,242:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:05,242:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:05,242:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:05,242:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:05,242:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:05,242:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:05,242:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,242:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,242:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:05,242:DEBUG:on stmt: jump 110
2020-06-11 12:07:05,242:DEBUG:==== SSA block analysis pass on 110
2020-06-11 12:07:05,242:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,242:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:05,243:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:05,243:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:05,243:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:05,243:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,243:DEBUG:==== SSA block analysis pass on 120
2020-06-11 12:07:05,243:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,243:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:05,243:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:05,243:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:05,243:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:05,243:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:05,243:DEBUG:==== SSA block analysis pass on 122
2020-06-11 12:07:05,243:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,243:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:05,243:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,243:DEBUG:on stmt: jump 128
2020-06-11 12:07:05,243:DEBUG:==== SSA block analysis pass on 128
2020-06-11 12:07:05,243:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,243:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:05,243:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,243:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:05,243:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:05,243:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:05,243:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:05,243:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:05,243:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:05,244:DEBUG:on stmt: jump 305
2020-06-11 12:07:05,244:DEBUG:==== SSA block analysis pass on 302
2020-06-11 12:07:05,244:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,244:DEBUG:on stmt: jump 304
2020-06-11 12:07:05,244:DEBUG:==== SSA block analysis pass on 304
2020-06-11 12:07:05,244:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,244:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:05,244:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:05,244:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:05,244:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:05,244:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:05,244:DEBUG:==== SSA block analysis pass on 305
2020-06-11 12:07:05,244:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e2e8550>
2020-06-11 12:07:05,244:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,245:DEBUG:defs defaultdict(<class 'list'>,
            {'$100load_global.20': [<numba.core.ir.Assign object at 0x7fc4541fc650>],
             '$102load_deref.21': [<numba.core.ir.Assign object at 0x7fc4541fc9d0>],
             '$104call_function.22': [<numba.core.ir.Assign object at 0x7fc4541fca90>],
             '$106call_method.23': [<numba.core.ir.Assign object at 0x7fc4541fcc10>],
             '$112load_global.0': [<numba.core.ir.Assign object at 0x7fc44e54b990>],
             '$116call_function.2': [<numba.core.ir.Assign object at 0x7fc4541fcd50>],
             '$118get_iter.3': [<numba.core.ir.Assign object at 0x7fc4541fcf10>],
             '$120for_iter.1': [<numba.core.ir.Assign object at 0x7fc4541fc850>],
             '$120for_iter.2': [<numba.core.ir.Assign object at 0x7fc4541fc550>],
             '$120for_iter.3': [<numba.core.ir.Assign object at 0x7fc4541fc450>],
             '$124load_deref.2': [<numba.core.ir.Assign object at 0x7fc4541fc150>],
             '$128load_global.1': [<numba.core.ir.Assign object at 0x7fc44e438b50>],
             '$132load_attr.3': [<numba.core.ir.Assign object at 0x7fc44e438490>],
             '$136load_deref.5': [<numba.core.ir.Assign object at 0x7fc44e438f10>],
             '$138call_function.6': [<numba.core.ir.Assign object at 0x7fc45422f150>],
             '$148binary_subscr.10': [<numba.core.ir.Assign object at 0x7fc45422fe90>],
             '$150inplace_add.11': [<numba.core.ir.Assign object at 0x7fc45422f850>],
             '$304load_deref.0': [<numba.core.ir.Assign object at 0x7fc454062890>],
             '$310call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4d0e90>],
             '$312return_value.4': [<numba.core.ir.Assign object at 0x7fc44e4d0750>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7fc44e53dc50>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fc44e53dad0>],
             '$48call_function.2': [<numba.core.ir.Assign object at 0x7fc45467ad50>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc44e2ec790>],
             '$52load_global.0': [<numba.core.ir.Assign object at 0x7fc4544f5790>],
             '$56load_attr.2': [<numba.core.ir.Assign object at 0x7fc44e4b0890>],
             '$58call_function.3': [<numba.core.ir.Assign object at 0x7fc44e4b0f50>],
             '$66binary_subscr.6': [<numba.core.ir.Assign object at 0x7fc454051090>],
             '$72load_method.8': [<numba.core.ir.Assign object at 0x7fc44e2ec450>],
             '$76call_method.10': [<numba.core.ir.Assign object at 0x7fc4540511d0>],
             '$80load_global.11': [<numba.core.ir.Assign object at 0x7fc454051350>],
             '$86load_attr.14': [<numba.core.ir.Assign object at 0x7fc45422b810>],
             '$88call_function.15': [<numba.core.ir.Assign object at 0x7fc44e4bc210>],
             '$8load_deref.2': [<numba.core.ir.Assign object at 0x7fc44e2ecf90>],
             '$92load_global.16': [<numba.core.ir.Assign object at 0x7fc44e65f950>],
             '$94load_method.17': [<numba.core.ir.Assign object at 0x7fc45452f650>],
             '$98load_deref.19': [<numba.core.ir.Assign object at 0x7fc454090910>],
             '$const308.2': [<numba.core.ir.Assign object at 0x7fc454062c50>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7fc44e53dbd0>],
             '$phi120.0': [<numba.core.ir.Assign object at 0x7fc4541fcbd0>],
             '$phi122.1': [<numba.core.ir.Assign object at 0x7fc4541fc690>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44e2ec210>],
             'ashape': [<numba.core.ir.Assign object at 0x7fc44e4b0f90>],
             'ashape_without_axis': [<numba.core.ir.Assign object at 0x7fc44e4bc290>],
             'axis': [<numba.core.ir.Assign object at 0x7fc44e2ec250>],
             'axis_index': [<numba.core.ir.Assign object at 0x7fc4541fc1d0>],
             'axis_len': [<numba.core.ir.Assign object at 0x7fc454051150>],
             'index_tuple_generic': [<numba.core.ir.Assign object at 0x7fc45422f190>],
             'ndim': [<numba.core.ir.Assign object at 0x7fc44e2ecbd0>],
             'result': [<numba.core.ir.Assign object at 0x7fc4541fcc50>,
                        <numba.core.ir.Assign object at 0x7fc45422f1d0>]})
2020-06-11 12:07:05,245:DEBUG:SSA violators {'result'}
2020-06-11 12:07:05,245:DEBUG:Fix SSA violator on var result
2020-06-11 12:07:05,245:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:05,245:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,245:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:05,245:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:05,245:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:05,245:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:05,245:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,245:DEBUG:on stmt: jump 36
2020-06-11 12:07:05,245:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:05,245:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,245:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:05,245:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:05,245:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:05,245:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,245:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:05,245:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:05,245:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:05,245:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:05,246:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:05,246:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,246:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:05,246:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,246:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:05,246:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:05,246:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:05,246:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:05,246:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:05,246:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:05,246:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:05,246:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,246:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:05,246:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:05,246:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:05,246:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:05,246:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:05,246:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:05,246:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:05,246:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,246:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,246:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:05,246:DEBUG:first assign: result
2020-06-11 12:07:05,247:DEBUG:replaced with: result = $106call_method.23
2020-06-11 12:07:05,247:DEBUG:on stmt: jump 110
2020-06-11 12:07:05,247:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:05,247:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,247:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:05,247:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:05,247:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:05,247:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:05,247:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,247:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:05,247:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,247:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:05,247:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:05,247:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:05,247:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:05,247:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:05,247:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:05,247:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,247:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:05,247:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,247:DEBUG:on stmt: jump 128
2020-06-11 12:07:05,247:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:05,247:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,247:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:05,247:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,247:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:05,247:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:05,248:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:05,248:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:05,248:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:05,248:DEBUG:on stmt: result = $150inplace_add.11
2020-06-11 12:07:05,248:DEBUG:replaced with: result.1 = $150inplace_add.11
2020-06-11 12:07:05,248:DEBUG:on stmt: jump 305
2020-06-11 12:07:05,248:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:05,248:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,248:DEBUG:on stmt: jump 304
2020-06-11 12:07:05,248:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:05,248:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,248:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:05,248:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:05,248:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:05,248:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:05,248:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:05,248:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:05,248:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc44e53bb50>
2020-06-11 12:07:05,248:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,248:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x7fc44e2e8590>],
             128: [<numba.core.ir.Assign object at 0x7fc44e4d7490>]})
2020-06-11 12:07:05,249:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:05,249:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,249:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:05,249:DEBUG:on stmt: axis = arg(1, name=axis)
2020-06-11 12:07:05,249:DEBUG:on stmt: $4load_attr.1 = const(int, 2)
2020-06-11 12:07:05,249:DEBUG:on stmt: ndim = $4load_attr.1
2020-06-11 12:07:05,249:DEBUG:on stmt: $8load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,249:DEBUG:on stmt: jump 36
2020-06-11 12:07:05,249:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:05,249:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,249:DEBUG:on stmt: $40compare_op.2 = axis >= ndim
2020-06-11 12:07:05,249:DEBUG:on stmt: branch $40compare_op.2, 44, 52
2020-06-11 12:07:05,249:DEBUG:==== SSA block rewrite pass on 44
2020-06-11 12:07:05,249:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,249:DEBUG:on stmt: $44load_global.0 = global(ValueError: <class 'ValueError'>)
2020-06-11 12:07:05,249:DEBUG:on stmt: $const46.1 = const(str, axis is out of bounds for array)
2020-06-11 12:07:05,249:DEBUG:on stmt: $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None)
2020-06-11 12:07:05,249:DEBUG:on stmt: raise <class 'ValueError'>('axis is out of bounds for array')
2020-06-11 12:07:05,249:DEBUG:==== SSA block rewrite pass on 52
2020-06-11 12:07:05,249:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,249:DEBUG:on stmt: $52load_global.0 = global(list: <class 'list'>)
2020-06-11 12:07:05,249:DEBUG:on stmt: $56load_attr.2 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,250:DEBUG:on stmt: $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None)
2020-06-11 12:07:05,250:DEBUG:on stmt: ashape = $58call_function.3
2020-06-11 12:07:05,250:DEBUG:on stmt: $66binary_subscr.6 = getitem(value=ashape, index=axis)
2020-06-11 12:07:05,250:DEBUG:on stmt: axis_len = $66binary_subscr.6
2020-06-11 12:07:05,250:DEBUG:on stmt: $72load_method.8 = getattr(value=ashape, attr=pop)
2020-06-11 12:07:05,250:DEBUG:on stmt: $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None)
2020-06-11 12:07:05,250:DEBUG:on stmt: $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>)
2020-06-11 12:07:05,250:DEBUG:on stmt: $86load_attr.14 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,250:DEBUG:on stmt: $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None)
2020-06-11 12:07:05,250:DEBUG:on stmt: ashape_without_axis = $88call_function.15
2020-06-11 12:07:05,250:DEBUG:on stmt: $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:05,250:DEBUG:on stmt: $94load_method.17 = getattr(value=$92load_global.16, attr=full)
2020-06-11 12:07:05,250:DEBUG:on stmt: $98load_deref.19 = freevar(zero: 0.0)
2020-06-11 12:07:05,250:DEBUG:on stmt: $100load_global.20 = global(type: <class 'type'>)
2020-06-11 12:07:05,250:DEBUG:on stmt: $102load_deref.21 = freevar(zero: 0.0)
2020-06-11 12:07:05,250:DEBUG:on stmt: $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,250:DEBUG:on stmt: $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None)
2020-06-11 12:07:05,250:DEBUG:on stmt: result = $106call_method.23
2020-06-11 12:07:05,250:DEBUG:on stmt: jump 110
2020-06-11 12:07:05,250:DEBUG:==== SSA block rewrite pass on 110
2020-06-11 12:07:05,250:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,250:DEBUG:on stmt: $112load_global.0 = global(range: <class 'range'>)
2020-06-11 12:07:05,251:DEBUG:on stmt: $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None)
2020-06-11 12:07:05,251:DEBUG:on stmt: $118get_iter.3 = getiter(value=$116call_function.2)
2020-06-11 12:07:05,251:DEBUG:on stmt: $phi120.0 = $118get_iter.3
2020-06-11 12:07:05,251:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,251:DEBUG:==== SSA block rewrite pass on 120
2020-06-11 12:07:05,251:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,251:DEBUG:on stmt: $120for_iter.1 = iternext(value=$phi120.0)
2020-06-11 12:07:05,251:DEBUG:on stmt: $120for_iter.2 = pair_first(value=$120for_iter.1)
2020-06-11 12:07:05,251:DEBUG:on stmt: $120for_iter.3 = pair_second(value=$120for_iter.1)
2020-06-11 12:07:05,251:DEBUG:on stmt: $phi122.1 = $120for_iter.2
2020-06-11 12:07:05,251:DEBUG:on stmt: branch $120for_iter.3, 122, 302
2020-06-11 12:07:05,251:DEBUG:==== SSA block rewrite pass on 122
2020-06-11 12:07:05,251:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,251:DEBUG:on stmt: axis_index = $phi122.1
2020-06-11 12:07:05,251:DEBUG:on stmt: $124load_deref.2 = freevar(is_axis_const: True)
2020-06-11 12:07:05,251:DEBUG:on stmt: jump 128
2020-06-11 12:07:05,251:DEBUG:==== SSA block rewrite pass on 128
2020-06-11 12:07:05,251:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,251:DEBUG:on stmt: $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>)
2020-06-11 12:07:05,251:DEBUG:on stmt: $132load_attr.3 = getattr(value=arr, attr=shape)
2020-06-11 12:07:05,251:DEBUG:on stmt: $136load_deref.5 = freevar(const_axis_val: 1)
2020-06-11 12:07:05,251:DEBUG:on stmt: $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None)
2020-06-11 12:07:05,251:DEBUG:on stmt: index_tuple_generic = $138call_function.6
2020-06-11 12:07:05,252:DEBUG:on stmt: $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic)
2020-06-11 12:07:05,252:DEBUG:on stmt: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:05,252:DEBUG:find_def var='result' stmt=$150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:05,252:DEBUG:find_def_from_top label 128
2020-06-11 12:07:05,252:DEBUG:idom 122 from label 128
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 122
2020-06-11 12:07:05,252:DEBUG:find_def_from_top label 122
2020-06-11 12:07:05,252:DEBUG:idom 120 from label 122
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:05,252:DEBUG:find_def_from_top label 120
2020-06-11 12:07:05,252:DEBUG:insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 120
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 305
2020-06-11 12:07:05,252:DEBUG:find_def_from_top label 305
2020-06-11 12:07:05,252:DEBUG:idom 128 from label 305
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 128
2020-06-11 12:07:05,252:DEBUG:incoming_def result.1 = $150inplace_add.11
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 110
2020-06-11 12:07:05,252:DEBUG:find_def_from_top label 110
2020-06-11 12:07:05,252:DEBUG:idom 52 from label 110
2020-06-11 12:07:05,252:DEBUG:find_def_from_bottom label 52
2020-06-11 12:07:05,252:DEBUG:incoming_def result = $106call_method.23
2020-06-11 12:07:05,252:DEBUG:replaced with: $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:05,252:DEBUG:on stmt: result.1 = $150inplace_add.11
2020-06-11 12:07:05,252:DEBUG:on stmt: jump 305
2020-06-11 12:07:05,253:DEBUG:==== SSA block rewrite pass on 302
2020-06-11 12:07:05,253:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,253:DEBUG:on stmt: jump 304
2020-06-11 12:07:05,253:DEBUG:==== SSA block rewrite pass on 304
2020-06-11 12:07:05,253:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,253:DEBUG:on stmt: $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>)
2020-06-11 12:07:05,253:DEBUG:on stmt: $const308.2 = const(int, 0)
2020-06-11 12:07:05,253:DEBUG:on stmt: $310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:05,253:DEBUG:find_def var='result' stmt=$310call_function.3 = call $304load_deref.0(result, $const308.2, func=$304load_deref.0, args=[Var(result, arraymath.py:217), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:05,253:DEBUG:find_def_from_top label 304
2020-06-11 12:07:05,253:DEBUG:idom 302 from label 304
2020-06-11 12:07:05,253:DEBUG:find_def_from_bottom label 302
2020-06-11 12:07:05,253:DEBUG:find_def_from_top label 302
2020-06-11 12:07:05,253:DEBUG:idom 120 from label 302
2020-06-11 12:07:05,253:DEBUG:find_def_from_bottom label 120
2020-06-11 12:07:05,253:DEBUG:replaced with: $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None)
2020-06-11 12:07:05,253:DEBUG:on stmt: $312return_value.4 = cast(value=$310call_function.3)
2020-06-11 12:07:05,253:DEBUG:on stmt: return $312return_value.4
2020-06-11 12:07:05,253:DEBUG:==== SSA block rewrite pass on 305
2020-06-11 12:07:05,253:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44e4d7d50>
2020-06-11 12:07:05,253:DEBUG:on stmt: jump 120
2020-06-11 12:07:05,253:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,254:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    axis = arg(1, name=axis)                 ['axis']
    $4load_attr.1 = const(int, 2)            ['$4load_attr.1']
    ndim = $4load_attr.1                     ['$4load_attr.1', 'ndim']
    $8load_deref.2 = freevar(is_axis_const: True) ['$8load_deref.2']
    jump 36                                  []
label 36:
    $40compare_op.2 = axis >= ndim           ['$40compare_op.2', 'axis', 'ndim']
    branch $40compare_op.2, 44, 52           ['$40compare_op.2']
label 44:
    $44load_global.0 = global(ValueError: <class 'ValueError'>) ['$44load_global.0']
    $const46.1 = const(str, axis is out of bounds for array) ['$const46.1']
    $48call_function.2 = call $44load_global.0($const46.1, func=$44load_global.0, args=[Var($const46.1, arraymath.py:206)], kws=(), vararg=None) ['$44load_global.0', '$48call_function.2', '$const46.1']
    raise <class 'ValueError'>('axis is out of bounds for array') []
label 52:
    $52load_global.0 = global(list: <class 'list'>) ['$52load_global.0']
    $56load_attr.2 = getattr(value=arr, attr=shape) ['$56load_attr.2', 'arr']
    $58call_function.3 = call $52load_global.0($56load_attr.2, func=$52load_global.0, args=[Var($56load_attr.2, arraymath.py:209)], kws=(), vararg=None) ['$52load_global.0', '$56load_attr.2', '$58call_function.3']
    ashape = $58call_function.3              ['$58call_function.3', 'ashape']
    $66binary_subscr.6 = getitem(value=ashape, index=axis) ['$66binary_subscr.6', 'ashape', 'axis']
    axis_len = $66binary_subscr.6            ['$66binary_subscr.6', 'axis_len']
    $72load_method.8 = getattr(value=ashape, attr=pop) ['$72load_method.8', 'ashape']
    $76call_method.10 = call $72load_method.8(axis, func=$72load_method.8, args=[Var(axis, arraymath.py:195)], kws=(), vararg=None) ['$72load_method.8', '$76call_method.10', 'axis']
    $80load_global.11 = global(_create_tuple_result_shape: <intrinsic _create_tuple_result_shape>) ['$80load_global.11']
    $86load_attr.14 = getattr(value=arr, attr=shape) ['$86load_attr.14', 'arr']
    $88call_function.15 = call $80load_global.11(ashape, $86load_attr.14, func=$80load_global.11, args=[Var(ashape, arraymath.py:209), Var($86load_attr.14, arraymath.py:215)], kws=(), vararg=None) ['$80load_global.11', '$86load_attr.14', '$88call_function.15', 'ashape']
    ashape_without_axis = $88call_function.15 ['$88call_function.15', 'ashape_without_axis']
    $92load_global.16 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$92load_global.16']
    $94load_method.17 = getattr(value=$92load_global.16, attr=full) ['$92load_global.16', '$94load_method.17']
    $98load_deref.19 = freevar(zero: 0.0)    ['$98load_deref.19']
    $100load_global.20 = global(type: <class 'type'>) ['$100load_global.20']
    $102load_deref.21 = freevar(zero: 0.0)   ['$102load_deref.21']
    $104call_function.22 = call $100load_global.20($102load_deref.21, func=$100load_global.20, args=[Var($102load_deref.21, arraymath.py:217)], kws=(), vararg=None) ['$100load_global.20', '$102load_deref.21', '$104call_function.22']
    $106call_method.23 = call $94load_method.17(ashape_without_axis, $98load_deref.19, $104call_function.22, func=$94load_method.17, args=[Var(ashape_without_axis, arraymath.py:215), Var($98load_deref.19, arraymath.py:217), Var($104call_function.22, arraymath.py:217)], kws=(), vararg=None) ['$104call_function.22', '$106call_method.23', '$94load_method.17', '$98load_deref.19', 'ashape_without_axis']
    result = $106call_method.23              ['$106call_method.23', 'result']
    jump 110                                 []
label 110:
    $112load_global.0 = global(range: <class 'range'>) ['$112load_global.0']
    $116call_function.2 = call $112load_global.0(axis_len, func=$112load_global.0, args=[Var(axis_len, arraymath.py:211)], kws=(), vararg=None) ['$112load_global.0', '$116call_function.2', 'axis_len']
    $118get_iter.3 = getiter(value=$116call_function.2) ['$116call_function.2', '$118get_iter.3']
    $phi120.0 = $118get_iter.3               ['$118get_iter.3', '$phi120.0']
    jump 120                                 []
label 120:
    result.2 = phi(incoming_values=[Var(result.1, arraymath.py:225), Var(result, arraymath.py:217)], incoming_blocks=[305, 110]) ['result', 'result.1', 'result.2']
    $120for_iter.1 = iternext(value=$phi120.0) ['$120for_iter.1', '$phi120.0']
    $120for_iter.2 = pair_first(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.2']
    $120for_iter.3 = pair_second(value=$120for_iter.1) ['$120for_iter.1', '$120for_iter.3']
    $phi122.1 = $120for_iter.2               ['$120for_iter.2', '$phi122.1']
    branch $120for_iter.3, 122, 302          ['$120for_iter.3']
label 122:
    axis_index = $phi122.1                   ['$phi122.1', 'axis_index']
    $124load_deref.2 = freevar(is_axis_const: True) ['$124load_deref.2']
    jump 128                                 []
label 128:
    $128load_global.1 = global(_gen_index_tuple: <intrinsic _gen_index_tuple>) ['$128load_global.1']
    $132load_attr.3 = getattr(value=arr, attr=shape) ['$132load_attr.3', 'arr']
    $136load_deref.5 = freevar(const_axis_val: 1) ['$136load_deref.5']
    $138call_function.6 = call $128load_global.1($132load_attr.3, axis_index, $136load_deref.5, func=$128load_global.1, args=[Var($132load_attr.3, arraymath.py:223), Var(axis_index, arraymath.py:220), Var($136load_deref.5, arraymath.py:224)], kws=(), vararg=None) ['$128load_global.1', '$132load_attr.3', '$136load_deref.5', '$138call_function.6', 'axis_index']
    index_tuple_generic = $138call_function.6 ['$138call_function.6', 'index_tuple_generic']
    $148binary_subscr.10 = getitem(value=arr, index=index_tuple_generic) ['$148binary_subscr.10', 'arr', 'index_tuple_generic']
    $150inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$148binary_subscr.10, static_lhs=Undefined, static_rhs=Undefined) ['$148binary_subscr.10', '$150inplace_add.11', 'result.2']
    result.1 = $150inplace_add.11            ['$150inplace_add.11', 'result.1']
    jump 305                                 []
label 302:
    jump 304                                 []
label 304:
    $304load_deref.0 = freevar(op: <function _array_sum_axis_nop at 0x7fc4548d6560>) ['$304load_deref.0']
    $const308.2 = const(int, 0)              ['$const308.2']
    $310call_function.3 = call $304load_deref.0(result.2, $const308.2, func=$304load_deref.0, args=[Var(result.2, arraymath.py:223), Var($const308.2, arraymath.py:242)], kws=(), vararg=None) ['$304load_deref.0', '$310call_function.3', '$const308.2', 'result.2']
    $312return_value.4 = cast(value=$310call_function.3) ['$310call_function.3', '$312return_value.4']
    return $312return_value.4                ['$312return_value.4']
label 305:
    jump 120                                 []

2020-06-11 12:07:05,254:DEBUG:================================================================================
2020-06-11 12:07:05,626:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=250)
           8	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,627:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,627:DEBUG:stack: []
2020-06-11 12:07:05,627:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:07:05,627:DEBUG:stack []
2020-06-11 12:07:05,627:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:05,627:DEBUG:stack []
2020-06-11 12:07:05,627:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:07:05,627:DEBUG:stack ['$_148call_function_kw_24_12.0']
2020-06-11 12:07:05,627:DEBUG:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=250)
2020-06-11 12:07:05,627:DEBUG:stack ['$_148call_function_kw_24_12.0', '$_154binary_subtract_27_14.1']
2020-06-11 12:07:05,627:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,628:DEBUG:stack ['$6binary_true_divide.2']
2020-06-11 12:07:05,628:DEBUG:end state. edges=[]
2020-06-11 12:07:05,628:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,628:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:05,628:DEBUG:defmap: {}
2020-06-11 12:07:05,628:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,628:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,628:DEBUG:keep phismap: {}
2020-06-11 12:07:05,628:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:05,628:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,628:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_148call_function_kw_24_12.0'}), (4, {'res': '$_154binary_subtract_27_14.1'}), (6, {'lhs': '$_148call_function_kw_24_12.0', 'rhs': '$_154binary_subtract_27_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,628:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,630:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,630:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,630:DEBUG:================================================================================
2020-06-11 12:07:05,630:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,630:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44e084710>
2020-06-11 12:07:05,630:DEBUG:on stmt: _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1)
2020-06-11 12:07:05,630:DEBUG:on stmt: _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1)
2020-06-11 12:07:05,630:DEBUG:on stmt: $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1
2020-06-11 12:07:05,630:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2020-06-11 12:07:05,630:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:05,631:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc44e081150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44e0812d0>],
             '_148call_function_kw_24_1': [<numba.core.ir.Assign object at 0x7fc44e07ddd0>],
             '_154binary_subtract_27_1': [<numba.core.ir.Assign object at 0x7fc44e07de50>]})
2020-06-11 12:07:05,631:DEBUG:SSA violators set()
2020-06-11 12:07:05,631:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,631:DEBUG:label 0:
    _148call_function_kw_24_1 = arg(0, name=_148call_function_kw_24_1) ['_148call_function_kw_24_1']
    _154binary_subtract_27_1 = arg(1, name=_154binary_subtract_27_1) ['_154binary_subtract_27_1']
    $6binary_true_divide.2 = _148call_function_kw_24_1 / _154binary_subtract_27_1 ['$6binary_true_divide.2', '_148call_function_kw_24_1', '_154binary_subtract_27_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,631:DEBUG:================================================================================
2020-06-11 12:07:05,654:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_FAST(arg=0, lineno=250)
           4	LOAD_FAST(arg=1, lineno=250)
           6	BINARY_ADD(arg=None, lineno=250)
           8	LOAD_FAST(arg=2, lineno=250)
          10	BINARY_SUBTRACT(arg=None, lineno=250)
          12	RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,654:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,654:DEBUG:stack: []
2020-06-11 12:07:05,654:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=250)
2020-06-11 12:07:05,654:DEBUG:stack []
2020-06-11 12:07:05,654:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=250)
2020-06-11 12:07:05,654:DEBUG:stack []
2020-06-11 12:07:05,654:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=250)
2020-06-11 12:07:05,654:DEBUG:stack ['$_134load_attr_17_12.0']
2020-06-11 12:07:05,654:DEBUG:dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=250)
2020-06-11 12:07:05,654:DEBUG:stack ['$_134load_attr_17_12.0', '$_168call_method_34_14.1']
2020-06-11 12:07:05,654:DEBUG:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=250)
2020-06-11 12:07:05,654:DEBUG:stack ['$6binary_add.2']
2020-06-11 12:07:05,655:DEBUG:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=250)
2020-06-11 12:07:05,655:DEBUG:stack ['$6binary_add.2', '$_192binary_true_divide_46_18.3']
2020-06-11 12:07:05,655:DEBUG:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=250)
2020-06-11 12:07:05,655:DEBUG:stack ['$10binary_subtract.4']
2020-06-11 12:07:05,655:DEBUG:end state. edges=[]
2020-06-11 12:07:05,655:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,655:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:05,655:DEBUG:defmap: {}
2020-06-11 12:07:05,655:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,655:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,655:DEBUG:keep phismap: {}
2020-06-11 12:07:05,655:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:05,655:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,655:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_134load_attr_17_12.0'}), (4, {'res': '$_168call_method_34_14.1'}), (6, {'lhs': '$_134load_attr_17_12.0', 'rhs': '$_168call_method_34_14.1', 'res': '$6binary_add.2'}), (8, {'res': '$_192binary_true_divide_46_18.3'}), (10, {'lhs': '$6binary_add.2', 'rhs': '$_192binary_true_divide_46_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,656:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:05,658:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,658:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:05,658:DEBUG:================================================================================
2020-06-11 12:07:05,658:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,658:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44dfaa810>
2020-06-11 12:07:05,658:DEBUG:on stmt: _134load_attr_17_1 = arg(0, name=_134load_attr_17_1)
2020-06-11 12:07:05,658:DEBUG:on stmt: _168call_method_34_1 = arg(1, name=_168call_method_34_1)
2020-06-11 12:07:05,658:DEBUG:on stmt: _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1)
2020-06-11 12:07:05,658:DEBUG:on stmt: $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1
2020-06-11 12:07:05,658:DEBUG:on stmt: $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1
2020-06-11 12:07:05,658:DEBUG:on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
2020-06-11 12:07:05,658:DEBUG:on stmt: return $12return_value.5
2020-06-11 12:07:05,659:DEBUG:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fc44dfa8510>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc44dfa8650>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc44dfa8350>],
             '_134load_attr_17_1': [<numba.core.ir.Assign object at 0x7fc44dfa4ed0>],
             '_168call_method_34_1': [<numba.core.ir.Assign object at 0x7fc44dfa4f50>],
             '_192binary_true_divide_46_1': [<numba.core.ir.Assign object at 0x7fc44dfa8050>]})
2020-06-11 12:07:05,659:DEBUG:SSA violators set()
2020-06-11 12:07:05,659:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,659:DEBUG:label 0:
    _134load_attr_17_1 = arg(0, name=_134load_attr_17_1) ['_134load_attr_17_1']
    _168call_method_34_1 = arg(1, name=_168call_method_34_1) ['_168call_method_34_1']
    _192binary_true_divide_46_1 = arg(2, name=_192binary_true_divide_46_1) ['_192binary_true_divide_46_1']
    $6binary_add.2 = _134load_attr_17_1 + _168call_method_34_1 ['$6binary_add.2', '_134load_attr_17_1', '_168call_method_34_1']
    $10binary_subtract.4 = $6binary_add.2 - _192binary_true_divide_46_1 ['$10binary_subtract.4', '$6binary_add.2', '_192binary_true_divide_46_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2020-06-11 12:07:05,659:DEBUG:================================================================================
2020-06-11 12:07:05,678:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=236)
           2	LOAD_FAST(arg=0, lineno=236)
           4	LOAD_FAST(arg=1, lineno=252)
           6	BINARY_SUBTRACT(arg=None, lineno=252)
           8	RETURN_VALUE(arg=None, lineno=252)
2020-06-11 12:07:05,678:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:05,678:DEBUG:stack: []
2020-06-11 12:07:05,678:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=236)
2020-06-11 12:07:05,678:DEBUG:stack []
2020-06-11 12:07:05,678:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=236)
2020-06-11 12:07:05,678:DEBUG:stack []
2020-06-11 12:07:05,678:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=252)
2020-06-11 12:07:05,678:DEBUG:stack ['$distx_12.0']
2020-06-11 12:07:05,678:DEBUG:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=252)
2020-06-11 12:07:05,678:DEBUG:stack ['$distx_12.0', '$exp_distx_2_14.1']
2020-06-11 12:07:05,678:DEBUG:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=252)
2020-06-11 12:07:05,678:DEBUG:stack ['$6binary_subtract.2']
2020-06-11 12:07:05,678:DEBUG:end state. edges=[]
2020-06-11 12:07:05,678:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:05,678:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:05,679:DEBUG:defmap: {}
2020-06-11 12:07:05,679:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,679:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:05,679:DEBUG:keep phismap: {}
2020-06-11 12:07:05,679:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:05,679:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:05,679:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$distx_12.0'}), (4, {'res': '$exp_distx_2_14.1'}), (6, {'lhs': '$distx_12.0', 'rhs': '$exp_distx_2_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:05,679:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,681:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:05,681:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,681:DEBUG:================================================================================
2020-06-11 12:07:05,681:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:05,681:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44dfdc750>
2020-06-11 12:07:05,681:DEBUG:on stmt: distx_1 = arg(0, name=distx_1)
2020-06-11 12:07:05,681:DEBUG:on stmt: exp_distx_2_1 = arg(1, name=exp_distx_2_1)
2020-06-11 12:07:05,681:DEBUG:on stmt: $6binary_subtract.2 = distx_1 - exp_distx_2_1
2020-06-11 12:07:05,681:DEBUG:on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2020-06-11 12:07:05,681:DEBUG:on stmt: return $8return_value.3
2020-06-11 12:07:05,681:DEBUG:defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fc44dfdf510>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc44dfdf690>],
             'distx_1': [<numba.core.ir.Assign object at 0x7fc44dfdf210>],
             'exp_distx_2_1': [<numba.core.ir.Assign object at 0x7fc44dfdf290>]})
2020-06-11 12:07:05,681:DEBUG:SSA violators set()
2020-06-11 12:07:05,681:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:05,681:DEBUG:label 0:
    distx_1 = arg(0, name=distx_1)           ['distx_1']
    exp_distx_2_1 = arg(1, name=exp_distx_2_1) ['exp_distx_2_1']
    $6binary_subtract.2 = distx_1 - exp_distx_2_1 ['$6binary_subtract.2', 'distx_1', 'exp_distx_2_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2020-06-11 12:07:05,681:DEBUG:================================================================================
2020-06-11 12:07:06,559:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=3130)
           2	LOAD_FAST(arg=0, lineno=3130)
           4	LOAD_ATTR(arg=0, lineno=3130)
           6	RETURN_VALUE(arg=None, lineno=3130)
2020-06-11 12:07:06,559:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:06,559:DEBUG:stack: []
2020-06-11 12:07:06,559:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=3130)
2020-06-11 12:07:06,560:DEBUG:stack []
2020-06-11 12:07:06,560:DEBUG:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3130)
2020-06-11 12:07:06,560:DEBUG:stack []
2020-06-11 12:07:06,560:DEBUG:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3130)
2020-06-11 12:07:06,560:DEBUG:stack ['$a2.0']
2020-06-11 12:07:06,560:DEBUG:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3130)
2020-06-11 12:07:06,560:DEBUG:stack ['$4load_attr.1']
2020-06-11 12:07:06,560:DEBUG:end state. edges=[]
2020-06-11 12:07:06,560:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:06,560:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:06,560:DEBUG:defmap: {}
2020-06-11 12:07:06,560:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,560:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,560:DEBUG:keep phismap: {}
2020-06-11 12:07:06,560:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:06,560:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:06,560:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:06,561:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:07:06,562:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:06,563:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:07:06,563:DEBUG:================================================================================
2020-06-11 12:07:06,563:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:06,563:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44de23dd0>
2020-06-11 12:07:06,563:DEBUG:on stmt: a = arg(0, name=a)
2020-06-11 12:07:06,563:DEBUG:on stmt: $4load_attr.1 = getattr(value=a, attr=real)
2020-06-11 12:07:06,563:DEBUG:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
2020-06-11 12:07:06,563:DEBUG:on stmt: return $6return_value.2
2020-06-11 12:07:06,563:DEBUG:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x7fc4544209d0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x7fc4546c4290>],
             'a': [<numba.core.ir.Assign object at 0x7fc454662f50>]})
2020-06-11 12:07:06,563:DEBUG:SSA violators set()
2020-06-11 12:07:06,563:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:06,563:DEBUG:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

2020-06-11 12:07:06,563:DEBUG:================================================================================
2020-06-11 12:07:06,598:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=263)
           6	LOAD_FAST(arg=0, lineno=267)
           8	CALL_FUNCTION(arg=2, lineno=267)
          10	RETURN_VALUE(arg=None, lineno=267)
2020-06-11 12:07:06,598:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:06,598:DEBUG:stack: []
2020-06-11 12:07:06,598:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:07:06,598:DEBUG:stack []
2020-06-11 12:07:06,598:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:07:06,598:DEBUG:stack []
2020-06-11 12:07:06,598:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=263)
2020-06-11 12:07:06,598:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:06,598:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=267)
2020-06-11 12:07:06,598:DEBUG:stack ['$2load_global.0', '$cent_distx_14.1']
2020-06-11 12:07:06,598:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=267)
2020-06-11 12:07:06,598:DEBUG:stack ['$2load_global.0', '$cent_distx_14.1', '$_34load_attr_14_16.2']
2020-06-11 12:07:06,598:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=267)
2020-06-11 12:07:06,598:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:06,598:DEBUG:end state. edges=[]
2020-06-11 12:07:06,599:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:06,599:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:06,599:DEBUG:defmap: {}
2020-06-11 12:07:06,599:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,599:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,599:DEBUG:keep phismap: {}
2020-06-11 12:07:06,599:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:06,599:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:06,599:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_distx_14.1'}), (6, {'res': '$_34load_attr_14_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_distx_14.1', '$_34load_attr_14_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:06,601:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,602:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:06,602:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,602:DEBUG:================================================================================
2020-06-11 12:07:06,602:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:06,602:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44dda3ed0>
2020-06-11 12:07:06,602:DEBUG:on stmt: _34load_attr_14_1 = arg(0, name=_34load_attr_14_1)
2020-06-11 12:07:06,602:DEBUG:on stmt: cent_distx_1 = arg(1, name=cent_distx_1)
2020-06-11 12:07:06,602:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>)
2020-06-11 12:07:06,602:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:07:06,603:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:06,603:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:06,603:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc454485ed0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44dd91d50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc4546c4d50>],
             '_34load_attr_14_1': [<numba.core.ir.Assign object at 0x7fc44dd2ba50>],
             'cent_distx_1': [<numba.core.ir.Assign object at 0x7fc44dda37d0>]})
2020-06-11 12:07:06,603:DEBUG:SSA violators set()
2020-06-11 12:07:06,603:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:06,603:DEBUG:label 0:
    _34load_attr_14_1 = arg(0, name=_34load_attr_14_1) ['_34load_attr_14_1']
    cent_distx_1 = arg(1, name=cent_distx_1) ['cent_distx_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_1, _34load_attr_14_1, func=$2load_global.0, args=[Var(cent_distx_1, dcorr.py:1), Var(_34load_attr_14_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_34load_attr_14_1', 'cent_distx_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,603:DEBUG:================================================================================
2020-06-11 12:07:06,618:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=166)
           2	LOAD_DEREF(arg=0, lineno=166)
           4	STORE_FAST(arg=1, lineno=166)
           6	SETUP_LOOP(arg=30, lineno=167)
           8	LOAD_GLOBAL(arg=0, lineno=167)
          10	LOAD_METHOD(arg=1, lineno=167)
          12	LOAD_FAST(arg=0, lineno=167)
          14	CALL_METHOD(arg=1, lineno=167)
          16	GET_ITER(arg=None, lineno=167)
>         18	FOR_ITER(arg=16, lineno=167)
          20	STORE_FAST(arg=2, lineno=167)
          22	LOAD_FAST(arg=1, lineno=168)
          24	LOAD_FAST(arg=2, lineno=168)
          26	LOAD_METHOD(arg=2, lineno=168)
          28	CALL_METHOD(arg=0, lineno=168)
          30	INPLACE_ADD(arg=None, lineno=168)
          32	STORE_FAST(arg=1, lineno=168)
          34	JUMP_ABSOLUTE(arg=18, lineno=168)
>         36	POP_BLOCK(arg=None, lineno=168)
>         38	LOAD_FAST(arg=1, lineno=169)
          40	RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:07:06,618:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:06,618:DEBUG:stack: []
2020-06-11 12:07:06,618:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=166)
2020-06-11 12:07:06,618:DEBUG:stack []
2020-06-11 12:07:06,618:DEBUG:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=166)
2020-06-11 12:07:06,618:DEBUG:stack []
2020-06-11 12:07:06,618:DEBUG:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=166)
2020-06-11 12:07:06,618:DEBUG:stack ['$2load_deref.0']
2020-06-11 12:07:06,619:DEBUG:end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:06,619:DEBUG:pending: deque([State(pc_initial=6 nstack_initial=0)])
2020-06-11 12:07:06,619:DEBUG:stack: []
2020-06-11 12:07:06,619:DEBUG:dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack []
2020-06-11 12:07:06,619:DEBUG:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack []
2020-06-11 12:07:06,619:DEBUG:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack ['$8load_global.0']
2020-06-11 12:07:06,619:DEBUG:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack ['$10load_method.1']
2020-06-11 12:07:06,619:DEBUG:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack ['$10load_method.1', '$arr12.2']
2020-06-11 12:07:06,619:DEBUG:dispatch pc=16, inst=GET_ITER(arg=None, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack ['$14call_method.3']
2020-06-11 12:07:06,619:DEBUG:end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:06,619:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:06,619:DEBUG:stack: ['$phi18.0']
2020-06-11 12:07:06,619:DEBUG:dispatch pc=18, inst=FOR_ITER(arg=16, lineno=167)
2020-06-11 12:07:06,619:DEBUG:stack ['$phi18.0']
2020-06-11 12:07:06,619:DEBUG:end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:06,620:DEBUG:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2020-06-11 12:07:06,620:DEBUG:stack: []
2020-06-11 12:07:06,620:DEBUG:dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack []
2020-06-11 12:07:06,620:DEBUG:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
2020-06-11 12:07:06,620:DEBUG:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
2020-06-11 12:07:06,620:DEBUG:stack: ['$phi20.0', '$phi20.1']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=20, inst=STORE_FAST(arg=2, lineno=167)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$phi20.1']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$c22.2']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$c22.2', '$v24.3']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$c22.2', '$26load_method.4']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$c22.2', '$28call_method.5']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=32, inst=STORE_FAST(arg=1, lineno=168)
2020-06-11 12:07:06,620:DEBUG:stack ['$phi20.0', '$30inplace_add.6']
2020-06-11 12:07:06,620:DEBUG:dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=168)
2020-06-11 12:07:06,621:DEBUG:stack ['$phi20.0']
2020-06-11 12:07:06,621:DEBUG:end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
2020-06-11 12:07:06,621:DEBUG:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:06,621:DEBUG:stack: []
2020-06-11 12:07:06,621:DEBUG:dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=169)
2020-06-11 12:07:06,621:DEBUG:stack []
2020-06-11 12:07:06,621:DEBUG:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=169)
2020-06-11 12:07:06,621:DEBUG:stack ['$c38.0']
2020-06-11 12:07:06,621:DEBUG:end state. edges=[]
2020-06-11 12:07:06,621:DEBUG:pending: deque([State(pc_initial=18 nstack_initial=1)])
2020-06-11 12:07:06,621:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:06,621:DEBUG:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
2020-06-11 12:07:06,621:DEBUG:defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2020-06-11 12:07:06,621:DEBUG:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:06,622:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:06,622:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:06,622:DEBUG:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
2020-06-11 12:07:06,622:DEBUG:keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2020-06-11 12:07:06,622:DEBUG:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2020-06-11 12:07:06,622:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:06,622:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
2020-06-11 12:07:06,622:DEBUG:block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
2020-06-11 12:07:06,622:DEBUG:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
2020-06-11 12:07:06,623:DEBUG:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
2020-06-11 12:07:06,623:DEBUG:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
2020-06-11 12:07:06,623:DEBUG:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'retval': '$c38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:06,623:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:06,628:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:06,628:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c)        ['$40return_value.1', 'c']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:06,628:DEBUG:================================================================================
2020-06-11 12:07:06,628:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:06,628:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,628:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:06,628:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:06,628:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:06,628:DEBUG:on stmt: jump 6
2020-06-11 12:07:06,628:DEBUG:==== SSA block analysis pass on 6
2020-06-11 12:07:06,628:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,628:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:06,628:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:06,628:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:06,629:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:06,629:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:06,629:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,629:DEBUG:==== SSA block analysis pass on 18
2020-06-11 12:07:06,629:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,629:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:06,629:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:06,629:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:06,629:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:06,629:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:06,629:DEBUG:==== SSA block analysis pass on 20
2020-06-11 12:07:06,629:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,629:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:06,629:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:06,629:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:06,629:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:06,629:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:07:06,629:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,629:DEBUG:==== SSA block analysis pass on 36
2020-06-11 12:07:06,629:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,629:DEBUG:on stmt: jump 38
2020-06-11 12:07:06,629:DEBUG:==== SSA block analysis pass on 38
2020-06-11 12:07:06,629:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,629:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:06,629:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:06,630:DEBUG:defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x7fc44ddffa50>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x7fc44de020d0>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x7fc44de021d0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7fc44de02450>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7fc44de02510>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fc44de025d0>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x7fc44de02a50>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x7fc44de02b90>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fc44ddff150>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x7fc44de02c90>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7fc44ddfe090>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x7fc44ddff850>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7fc44ddffe50>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fc44de02390>],
             'arr': [<numba.core.ir.Assign object at 0x7fc44ddffed0>],
             'c': [<numba.core.ir.Assign object at 0x7fc44ddff290>,
                   <numba.core.ir.Assign object at 0x7fc44de02790>],
             'v': [<numba.core.ir.Assign object at 0x7fc44de027d0>]})
2020-06-11 12:07:06,630:DEBUG:SSA violators {'c'}
2020-06-11 12:07:06,630:DEBUG:Fix SSA violator on var c
2020-06-11 12:07:06,630:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:06,630:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,630:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:06,630:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:06,630:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:06,630:DEBUG:first assign: c
2020-06-11 12:07:06,630:DEBUG:replaced with: c = $2load_deref.0
2020-06-11 12:07:06,630:DEBUG:on stmt: jump 6
2020-06-11 12:07:06,630:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:07:06,630:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,630:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:06,630:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:06,630:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:06,630:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:06,630:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:06,630:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,630:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:07:06,630:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,630:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:06,631:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:06,631:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:06,631:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:06,631:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:06,631:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:06,631:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,631:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:06,631:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:06,631:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:06,631:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:06,631:DEBUG:on stmt: c = $30inplace_add.6
2020-06-11 12:07:06,631:DEBUG:replaced with: c.1 = $30inplace_add.6
2020-06-11 12:07:06,631:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,631:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:06,631:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,631:DEBUG:on stmt: jump 38
2020-06-11 12:07:06,631:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:07:06,631:DEBUG:Running <numba.core.ssa._FreshVarHandler object at 0x7fc4544b0b90>
2020-06-11 12:07:06,631:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:06,631:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:06,631:DEBUG:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc44ddff490>],
             20: [<numba.core.ir.Assign object at 0x7fc44ddff910>]})
2020-06-11 12:07:06,632:DEBUG:==== SSA block rewrite pass on 0
2020-06-11 12:07:06,632:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,632:DEBUG:on stmt: arr = arg(0, name=arr)
2020-06-11 12:07:06,632:DEBUG:on stmt: $2load_deref.0 = freevar(zero: 0.0)
2020-06-11 12:07:06,632:DEBUG:on stmt: c = $2load_deref.0
2020-06-11 12:07:06,632:DEBUG:on stmt: jump 6
2020-06-11 12:07:06,632:DEBUG:==== SSA block rewrite pass on 6
2020-06-11 12:07:06,632:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,632:DEBUG:on stmt: $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)
2020-06-11 12:07:06,632:DEBUG:on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
2020-06-11 12:07:06,632:DEBUG:on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None)
2020-06-11 12:07:06,632:DEBUG:on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
2020-06-11 12:07:06,632:DEBUG:on stmt: $phi18.0 = $16get_iter.4
2020-06-11 12:07:06,632:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,632:DEBUG:==== SSA block rewrite pass on 18
2020-06-11 12:07:06,632:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,632:DEBUG:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2020-06-11 12:07:06,632:DEBUG:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2020-06-11 12:07:06,632:DEBUG:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2020-06-11 12:07:06,632:DEBUG:on stmt: $phi20.1 = $18for_iter.2
2020-06-11 12:07:06,632:DEBUG:on stmt: branch $18for_iter.3, 20, 36
2020-06-11 12:07:06,632:DEBUG:==== SSA block rewrite pass on 20
2020-06-11 12:07:06,632:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,632:DEBUG:on stmt: v = $phi20.1
2020-06-11 12:07:06,632:DEBUG:on stmt: $26load_method.4 = getattr(value=v, attr=item)
2020-06-11 12:07:06,632:DEBUG:on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None)
2020-06-11 12:07:06,633:DEBUG:on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:06,633:DEBUG:find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:06,633:DEBUG:find_def_from_top label 20
2020-06-11 12:07:06,633:DEBUG:idom 18 from label 20
2020-06-11 12:07:06,633:DEBUG:find_def_from_bottom label 18
2020-06-11 12:07:06,633:DEBUG:find_def_from_top label 18
2020-06-11 12:07:06,633:DEBUG:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2020-06-11 12:07:06,633:DEBUG:find_def_from_bottom label 20
2020-06-11 12:07:06,633:DEBUG:incoming_def c.1 = $30inplace_add.6
2020-06-11 12:07:06,633:DEBUG:find_def_from_bottom label 6
2020-06-11 12:07:06,633:DEBUG:find_def_from_top label 6
2020-06-11 12:07:06,633:DEBUG:idom 0 from label 6
2020-06-11 12:07:06,633:DEBUG:find_def_from_bottom label 0
2020-06-11 12:07:06,633:DEBUG:incoming_def c = $2load_deref.0
2020-06-11 12:07:06,633:DEBUG:replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2020-06-11 12:07:06,633:DEBUG:on stmt: c.1 = $30inplace_add.6
2020-06-11 12:07:06,633:DEBUG:on stmt: jump 18
2020-06-11 12:07:06,633:DEBUG:==== SSA block rewrite pass on 36
2020-06-11 12:07:06,633:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,633:DEBUG:on stmt: jump 38
2020-06-11 12:07:06,633:DEBUG:==== SSA block rewrite pass on 38
2020-06-11 12:07:06,633:DEBUG:Running <numba.core.ssa._FixSSAVars object at 0x7fc44ddf7250>
2020-06-11 12:07:06,633:DEBUG:on stmt: $40return_value.1 = cast(value=c)
2020-06-11 12:07:06,633:DEBUG:find_def var='c' stmt=$40return_value.1 = cast(value=c)
2020-06-11 12:07:06,633:DEBUG:find_def_from_top label 38
2020-06-11 12:07:06,634:DEBUG:idom 36 from label 38
2020-06-11 12:07:06,634:DEBUG:find_def_from_bottom label 36
2020-06-11 12:07:06,634:DEBUG:find_def_from_top label 36
2020-06-11 12:07:06,634:DEBUG:idom 18 from label 36
2020-06-11 12:07:06,634:DEBUG:find_def_from_bottom label 18
2020-06-11 12:07:06,634:DEBUG:replaced with: $40return_value.1 = cast(value=c.2)
2020-06-11 12:07:06,634:DEBUG:on stmt: return $40return_value.1
2020-06-11 12:07:06,634:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:06,634:DEBUG:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(zero: 0.0)      ['$2load_deref.0']
    c = $2load_deref.0                       ['$2load_deref.0', 'c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from '/home/rflperry/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:166)], kws=(), vararg=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    c.2 = phi(incoming_values=[Var(c.1, arraymath.py:168), Var(c, arraymath.py:166)], incoming_blocks=[20, 6]) ['c', 'c.1', 'c.2']
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c.2']
    c.1 = $30inplace_add.6                   ['$30inplace_add.6', 'c.1']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $40return_value.1 = cast(value=c.2)      ['$40return_value.1', 'c.2']
    return $40return_value.1                 ['$40return_value.1']

2020-06-11 12:07:06,634:DEBUG:================================================================================
2020-06-11 12:07:06,685:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=263)
           6	LOAD_FAST(arg=0, lineno=268)
           8	CALL_FUNCTION(arg=2, lineno=268)
          10	RETURN_VALUE(arg=None, lineno=268)
2020-06-11 12:07:06,685:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:06,685:DEBUG:stack: []
2020-06-11 12:07:06,685:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:07:06,686:DEBUG:stack []
2020-06-11 12:07:06,686:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:07:06,686:DEBUG:stack []
2020-06-11 12:07:06,686:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=263)
2020-06-11 12:07:06,686:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:06,686:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=268)
2020-06-11 12:07:06,686:DEBUG:stack ['$2load_global.0', '$cent_distx_24.1']
2020-06-11 12:07:06,686:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=268)
2020-06-11 12:07:06,686:DEBUG:stack ['$2load_global.0', '$cent_distx_24.1', '$_54load_attr_23_16.2']
2020-06-11 12:07:06,686:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=268)
2020-06-11 12:07:06,686:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:06,686:DEBUG:end state. edges=[]
2020-06-11 12:07:06,686:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:06,686:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:06,686:DEBUG:defmap: {}
2020-06-11 12:07:06,686:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,686:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,686:DEBUG:keep phismap: {}
2020-06-11 12:07:06,686:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:06,687:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:06,687:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_distx_24.1'}), (6, {'res': '$_54load_attr_23_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_distx_24.1', '$_54load_attr_23_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:06,687:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,688:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:06,689:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,689:DEBUG:================================================================================
2020-06-11 12:07:06,689:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:06,689:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44dc6bed0>
2020-06-11 12:07:06,689:DEBUG:on stmt: _54load_attr_23_1 = arg(0, name=_54load_attr_23_1)
2020-06-11 12:07:06,689:DEBUG:on stmt: cent_distx_2 = arg(1, name=cent_distx_2)
2020-06-11 12:07:06,689:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>)
2020-06-11 12:07:06,689:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:07:06,689:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:06,689:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:06,689:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44dc64550>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44dc64090>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44dc64650>],
             '_54load_attr_23_1': [<numba.core.ir.Assign object at 0x7fc44dc64c90>],
             'cent_distx_2': [<numba.core.ir.Assign object at 0x7fc44dc64990>]})
2020-06-11 12:07:06,689:DEBUG:SSA violators set()
2020-06-11 12:07:06,689:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:06,689:DEBUG:label 0:
    _54load_attr_23_1 = arg(0, name=_54load_attr_23_1) ['_54load_attr_23_1']
    cent_distx_2 = arg(1, name=cent_distx_2) ['cent_distx_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_distx_2, _54load_attr_23_1, func=$2load_global.0, args=[Var(cent_distx_2, dcorr.py:1), Var(_54load_attr_23_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_54load_attr_23_1', 'cent_distx_2']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,689:DEBUG:================================================================================
2020-06-11 12:07:06,707:DEBUG:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=264)
           6	LOAD_FAST(arg=0, lineno=269)
           8	CALL_FUNCTION(arg=2, lineno=269)
          10	RETURN_VALUE(arg=None, lineno=269)
2020-06-11 12:07:06,708:DEBUG:pending: deque([State(pc_initial=0 nstack_initial=0)])
2020-06-11 12:07:06,708:DEBUG:stack: []
2020-06-11 12:07:06,708:DEBUG:dispatch pc=0, inst=NOP(arg=None, lineno=1)
2020-06-11 12:07:06,708:DEBUG:stack []
2020-06-11 12:07:06,708:DEBUG:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2020-06-11 12:07:06,708:DEBUG:stack []
2020-06-11 12:07:06,708:DEBUG:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=264)
2020-06-11 12:07:06,708:DEBUG:stack ['$2load_global.0']
2020-06-11 12:07:06,708:DEBUG:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=269)
2020-06-11 12:07:06,708:DEBUG:stack ['$2load_global.0', '$cent_disty_14.1']
2020-06-11 12:07:06,708:DEBUG:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=269)
2020-06-11 12:07:06,708:DEBUG:stack ['$2load_global.0', '$cent_disty_14.1', '$_74load_attr_32_16.2']
2020-06-11 12:07:06,708:DEBUG:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=269)
2020-06-11 12:07:06,708:DEBUG:stack ['$8call_function.3']
2020-06-11 12:07:06,708:DEBUG:end state. edges=[]
2020-06-11 12:07:06,708:DEBUG:-------------------------Prune PHIs-------------------------
2020-06-11 12:07:06,708:DEBUG:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2020-06-11 12:07:06,708:DEBUG:defmap: {}
2020-06-11 12:07:06,708:DEBUG:phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,708:DEBUG:changing phismap: defaultdict(<class 'set'>, {})
2020-06-11 12:07:06,708:DEBUG:keep phismap: {}
2020-06-11 12:07:06,709:DEBUG:new_out: defaultdict(<class 'dict'>, {})
2020-06-11 12:07:06,709:DEBUG:----------------------DONE Prune PHIs-----------------------
2020-06-11 12:07:06,709:DEBUG:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cent_disty_14.1'}), (6, {'res': '$_74load_attr_32_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$cent_disty_14.1', '$_74load_attr_32_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2020-06-11 12:07:06,709:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,711:DEBUG:-----------------------------------BEFORE SSA-----------------------------------
2020-06-11 12:07:06,711:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,711:DEBUG:================================================================================
2020-06-11 12:07:06,711:DEBUG:==== SSA block analysis pass on 0
2020-06-11 12:07:06,711:DEBUG:Running <numba.core.ssa._GatherDefsHandler object at 0x7fc44dc5fe50>
2020-06-11 12:07:06,711:DEBUG:on stmt: _74load_attr_32_1 = arg(0, name=_74load_attr_32_1)
2020-06-11 12:07:06,711:DEBUG:on stmt: cent_disty_1 = arg(1, name=cent_disty_1)
2020-06-11 12:07:06,711:DEBUG:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>)
2020-06-11 12:07:06,711:DEBUG:on stmt: $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None)
2020-06-11 12:07:06,711:DEBUG:on stmt: $10return_value.4 = cast(value=$8call_function.3)
2020-06-11 12:07:06,711:DEBUG:on stmt: return $10return_value.4
2020-06-11 12:07:06,711:DEBUG:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc44dc5f3d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc44dc5bf90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc44dc5f2d0>],
             '_74load_attr_32_1': [<numba.core.ir.Assign object at 0x7fc44dc5bdd0>],
             'cent_disty_1': [<numba.core.ir.Assign object at 0x7fc44dc5be50>]})
2020-06-11 12:07:06,711:DEBUG:SSA violators set()
2020-06-11 12:07:06,711:DEBUG:-----------------------------------AFTER SSA------------------------------------
2020-06-11 12:07:06,712:DEBUG:label 0:
    _74load_attr_32_1 = arg(0, name=_74load_attr_32_1) ['_74load_attr_32_1']
    cent_disty_1 = arg(1, name=cent_disty_1) ['cent_disty_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fc4dfc8f45: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(cent_disty_1, _74load_attr_32_1, func=$2load_global.0, args=[Var(cent_disty_1, dcorr.py:1), Var(_74load_attr_32_1, dcorr.py:1)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', '_74load_attr_32_1', 'cent_disty_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2020-06-11 12:07:06,712:DEBUG:================================================================================
2020-06-11 12:08:26,389:INFO:Component(s) [0] done in 84.74199509620667
2020-06-11 12:09:35,125:INFO:Component(s) [1] done in 68.73531246185303
2020-06-11 12:10:46,607:INFO:Component(s) [2] done in 71.48248934745789
2020-06-11 12:11:58,577:INFO:Component(s) [0, 1] done in 71.96895980834961
2020-06-11 12:13:11,367:INFO:Component(s) [1, 2] done in 72.79028534889221
2020-06-11 12:14:26,233:INFO:Component(s) [2, 0] done in 74.86494469642639
2020-06-11 12:15:38,221:INFO:Component(s) [0, 1, 2] done in 71.98840141296387
2020-06-11 12:15:38,228:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,228:INFO:pvals: [8.279e-01 6.288e-01 6.806e-01 7.381e-01 9.518e-01 1.804e-01 7.150e-01
 5.483e-01 8.517e-01 4.330e-02 2.483e-01 3.401e-01 6.989e-01 6.880e-02
 1.694e-01 1.200e-03 1.640e-02 3.200e-03 6.522e-01 1.641e-01 2.020e-02
 1.000e-04 3.285e-01 6.000e-04]
2020-06-11 12:15:38,231:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,231:INFO:pvals: [9.939e-01 8.685e-01 9.733e-01 9.449e-01 9.968e-01 6.626e-01 8.790e-01
 9.385e-01 9.912e-01 1.818e-01 6.381e-01 7.316e-01 3.219e-01 1.016e-01
 2.117e-01 3.400e-03 8.070e-02 1.600e-03 6.739e-01 7.650e-02 9.570e-02
 1.000e-04 1.825e-01 7.000e-04]
2020-06-11 12:15:38,232:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,232:INFO:pvals: [9.723e-01 9.789e-01 1.000e+00 8.977e-01 9.388e-01 9.999e-01 7.076e-01
 9.997e-01 9.908e-01 9.773e-01 6.639e-01 9.977e-01 3.332e-01 3.209e-01
 6.250e-02 5.568e-01 8.680e-02 2.151e-01 2.555e-01 1.805e-01 8.581e-01
 3.000e-04 9.550e-02 8.060e-02]
2020-06-11 12:15:38,233:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,233:INFO:pvals: [9.515e-01 8.801e-01 9.826e-01 8.532e-01 9.778e-01 8.391e-01 7.552e-01
 9.570e-01 9.785e-01 2.969e-01 3.653e-01 8.221e-01 5.546e-01 9.540e-02
 6.840e-02 1.180e-02 1.310e-02 5.400e-03 4.899e-01 1.263e-01 1.443e-01
 1.000e-04 1.651e-01 2.200e-03]
2020-06-11 12:15:38,234:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,234:INFO:pvals: [1.000e+00 9.645e-01 9.999e-01 9.927e-01 9.999e-01 9.967e-01 9.302e-01
 9.999e-01 1.000e+00 8.702e-01 9.860e-01 9.895e-01 8.940e-02 3.864e-01
 3.877e-01 1.491e-01 7.842e-01 3.260e-02 5.976e-01 1.054e-01 6.856e-01
 2.000e-04 1.157e-01 3.540e-02]
2020-06-11 12:15:38,235:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,235:INFO:pvals: [9.993e-01 9.844e-01 1.000e+00 9.790e-01 9.957e-01 1.000e+00 8.629e-01
 1.000e+00 9.996e-01 9.743e-01 9.047e-01 9.993e-01 1.395e-01 3.117e-01
 1.216e-01 2.753e-01 2.761e-01 5.350e-02 3.733e-01 9.650e-02 8.253e-01
 1.000e-04 7.650e-02 3.270e-02]
2020-06-11 12:15:38,236:INFO:Names: ['Experts Resting vs. Experts Open Monitoring', 'Experts Resting vs. Experts Compassion', 'Experts Open Monitoring vs. Experts Compassion', 'Experts Meditating vs. Experts Resting', 'Novices Resting vs. Novices Open Monitoring', 'Novices Resting vs. Novices Compassion', 'Novices Open Monitoring vs. Novices Compassion', 'Novices Meditating vs. Novices Resting', 'All Resting vs. All Open Monitoring', 'All Resting vs. All Compassion', 'All Open Monitoring vs. All Compassion', 'All Meditating vs. All Resting', 'Experts Resting vs. Novices Open Monitoring', 'Experts Open Monitoring vs. Novices Resting', 'Experts Resting vs. Novices Compassion', 'Experts Compassion vs. Novices Resting', 'Experts Open Monitoring vs. Novices Compassion', 'Experts Compassion vs. Novices Open Monitoring', 'Experts Resting vs. Novices Resting', 'Experts Open Monitoring vs. Novices Open Monitoring', 'Experts Compassion vs. Novices Compassion', 'Experts All vs. Novices All', 'Experts Resting vs. Novices Meditating', 'Experts Meditating vs. Novices Resting']
2020-06-11 12:15:38,236:INFO:pvals: [9.949e-01 9.338e-01 9.971e-01 9.487e-01 9.964e-01 9.661e-01 8.570e-01
 9.958e-01 9.983e-01 4.849e-01 6.404e-01 9.368e-01 2.987e-01 1.251e-01
 9.900e-02 1.460e-02 5.490e-02 4.300e-03 5.203e-01 7.250e-02 2.492e-01
 1.000e-04 1.059e-01 3.300e-03]
2020-06-11 12:15:38,237:INFO:Saving to ../data/DCORR_gcca_pvals_10000_min_rank-ZG3.csv
